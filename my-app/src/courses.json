[
    {
      "modules": [
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df768a069b89",
              "languages": [],
              "searchString": "Programming paradigms: Overview programming paradigms: overview programming paradigms overview programmingparadigmsoverview",
              "moduleId": "5ee733864024df9a21069b6d",
              "index": 2,
              "title": "Programming paradigms: Overview",
              "description": "",
              "createdAt": "2019-11-01T10:06:49.811Z",
              "updatedAt": "2021-05-03T10:31:15.414Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbc03c9416af3061c8d7d87",
                    "text": "Some programming paradigms are subsets of other paradigms. For example, every procedural language is also imperative."
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbc03d5416af37f568d7d88",
                    "text": "Describe the relation between the following programming paradigms. Indicate which ones are subsets of others. Include the following paradigms: *declarative*, *functional*, *imperative*, *logical*, *object-oriented*, and *procedural*.",
                    "solution": "Object-oriented is a subset of procedural which is a subset of imperative. Functional and logical are both subsets of declarative."
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbc04bd416af357d88d7d89",
                    "text": "In what paradigms do the following famous programming languages belong: C#, Java, C, BASIC, Haskell, and Prolog.",
                    "solution": "C# and Java are object-oriented (and, hence, also procedural and imperative). C is procedural and BASIC is imperative. Haskell is functional and Prolog is logical. "
                  }
                ]
              },
              "introduction": "Some programming paradigms are subsets of other paradigms. For example, every procedural language is also imperative.",
              "publicKey": "rsgumh3lhbqn1ffp6qhr"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024dfdb5a069b87",
              "languages": [],
              "searchString": "Syntax and semantics syntax and semantics syntaxandsemantics",
              "moduleId": "5ee733864024df9a21069b6d",
              "index": 1,
              "title": "Syntax and semantics",
              "description": "",
              "createdAt": "2019-10-31T21:30:51.806Z",
              "updatedAt": "2021-05-03T10:31:15.536Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbb5291416af39f188d7d80",
                    "text": "What is the difference between the *syntax* and the *semantics* of a program? And how\ndoes this relate to the ‘Edit-Compile-Run’ development cycle?",
                    "solution": "Syntax is the set of *‘grammatical’ rules* of a programming language: it defines what you can and cannot write in a (syntactically) correct program. Semantics refers to the *meaning* of a program: it defines what your code is actually trying to do. A compiler can only check the syntax of your program, and not the semantics.\n\nIn the ‘Edit-Compile-Run’ cycle, developers first write their code code (syntax) and then compile it to check if it is syntactically correct. Finally, they run and test the program to see if it works as intended (semantics). If something is wrong, the cycle starts over."
                  }
                ]
              },
              "publicKey": "u1hwa65ne76166s9eqi4"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df6843069b8b",
              "languages": [],
              "searchString": "The compiler as a program the compiler as a program thecompilerasaprogram",
              "moduleId": "5ee733864024df9a21069b6d",
              "index": 4,
              "title": "The compiler as a program",
              "description": "",
              "createdAt": "2019-11-01T10:22:10.601Z",
              "updatedAt": "2021-05-03T10:31:15.996Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbc075c416af3b8118d7d8e",
                    "text": "The translation of a piece of code in a programming language (such as C#) to machine code doesn’t just happen magically: it’s a process that *programmers* have defined and\ncreated. Thus, a compiler itself is also a program. But if a compiler is a program, then someone must have compiled it at some point."
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbc07b3416af346b78d7d8f",
                    "text": "Can a compiler itself be written in a programming language? And if so, can that\nlanguage be the same as the language that the compiler compiles?",
                    "template": "",
                    "solution": "Yes, if you already possess a compiler or interpreter for that language."
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbc07c4416af353dc8d7d90",
                    "text": "Can a compiler compile itself?",
                    "template": "",
                    "solution": "Yes it can, assuming that you have another compiler available to compile it for the\nfirst time, so that you can have an executable."
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbc07d9416af3eda88d7d91",
                    "text": "What language do you think has been used to write the first compiler ever?",
                    "solution": "Only the first compiler ever had to be written in machine code."
                  }
                ]
              },
              "isOptional": true,
              "difficulty": 4,
              "introduction": "The translation of a piece of code in a programming language (such as C#) to machine code doesn’t just happen magically: it’s a process that *programmers* have defined and\ncreated. Thus, a compiler itself is also a program. But if a compiler is a program, then someone must have compiled it at some point.",
              "publicKey": "lccu3gcjp9limjhc1r5b"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024dfa108069b88",
              "languages": [],
              "searchString": "Reading material reading material readingmaterial",
              "moduleId": "5ee733864024df9a21069b6d",
              "index": 0,
              "title": "Reading material",
              "description": "",
              "createdAt": "2019-11-01T10:02:09.834Z",
              "updatedAt": "2021-05-03T10:31:16.098Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbc02f9416af30ffd8d7d85",
                    "text": "Please read *Chapter 2: What is programming* from the textbook *Learning C# by Programming Games*."
                  }
                ]
              },
              "publicKey": "tn0p5t3xqnnbfrdrw6pj"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df8b97069b8a",
              "languages": [],
              "searchString": "Programming paradigms: Statements programming paradigms: statements programming paradigms statements programmingparadigmsstatements",
              "moduleId": "5ee733864024df9a21069b6d",
              "index": 3,
              "title": "Programming paradigms: Statements",
              "description": "",
              "createdAt": "2019-11-01T10:14:17.740Z",
              "updatedAt": "2021-05-03T10:31:16.411Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "multipleChoiceQuestion",
                    "choices": [
                      {
                        "id": "fulfzyvi",
                        "text": "A. All imperative languages are also object-oriented.",
                        "correct": false,
                        "label": "A"
                      },
                      {
                        "id": "oasczohq",
                        "text": "B. All object-oriented languages are also procedural.",
                        "correct": true,
                        "label": "B"
                      },
                      {
                        "id": "jeupzozu",
                        "text": "C. Procedural languages have to be compiled.",
                        "correct": false,
                        "label": "C"
                      },
                      {
                        "id": "bbjkozkl",
                        "text": "D. Declarative languages cannot run on the same processor as imperative languages, because imperative languages have the assignment instruction and declarative languages don’t.",
                        "correct": false,
                        "label": "D"
                      }
                    ],
                    "actions": [],
                    "_id": "5dbc0590416af355f18d7d8b",
                    "multipleCorrect": true,
                    "text": "Which of the following statements are true?",
                    "solution": "Only the second statement is true."
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbc05ff416af34bfb8d7d8c",
                    "text": "Explain your answer to the previous question.",
                    "solution": "A is not true: for example, Fortran is an imperative language that is not object-oriented.\n\nB is true: objects are modified by methods, which are a kind of procedure.\n\nC is not true: for example, PHP is a procedural language that is interpreted, not compiled.\n\nD is also not true: a programming language can hide certain aspects of the underlying processor."
                  }
                ]
              },
              "publicKey": "uuimauz79shedghwoll5"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df6ebb069b8c",
              "languages": [],
              "searchString": "Reading material reading material readingmaterial",
              "moduleId": "5ee733864024df3e13069b6e",
              "index": 0,
              "title": "Reading material",
              "description": "",
              "createdAt": "2019-11-01T10:02:09.834Z",
              "updatedAt": "2021-05-03T10:31:16.299Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbc02a7416af362628d7d83",
                    "text": "Please read *Chapter 1: Buiding you first game application* from the textbook *Learning C# by Programming Games*."
                  }
                ]
              },
              "publicKey": "am021cgru6rqrqh51iwt"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df3e7e069b90",
              "languages": [],
              "searchString": "The game loop the game loop thegameloop",
              "moduleId": "5ee733864024df24f5069b6f",
              "index": 3,
              "title": "The game loop",
              "description": "",
              "createdAt": "2019-11-01T10:41:52.638Z",
              "updatedAt": "2021-05-03T10:31:15.387Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbc0bf5416af3090a8d7d9a",
                    "text": "Below are some questions about the game loop, the basis of every game program."
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbc0c0b416af340be8d7d9b",
                    "text": "What two actions are the main elements of the game loop? What is the use of these actions?",
                    "solution": "A classical game loop consists of two methods: `Update` (for changing the state of the game world) and `Draw` (for drawing the game world on the screen in its current state)."
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbc0c2d416af3a2928d7d9c",
                    "text": "What methods does MonoGame add to this? What is the use of these methods?",
                    "solution": "In MonoGame, there are extra methods such as `LoadContent` (the first place where you can load the assets of your game). Its counterpart is `UnloadContent`, which we do not use in this book. Finally, there is `Initialize`, another start-up method for setting up various aspects of your game."
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbc0c44416af37b288d7d9d",
                    "text": "What is the difference between a fixed-timestep game loop and a variable-timestep game loop? Can you think of an advantage and a disadvantage of both types?",
                    "solution": "In a *fixed-timestep* loop, each iteration simulates the passing of a fixed amount of time (such as 1/60 seconds). This makes sure that the game behaves the same on all computers, regardless of how powerful they are. However, slower computers may not be able to run the game in real-time.\n\nIn a *variable-timestep* loop, the computer simulates as many iterations as possible. This ensures real-time performance on all devices, but it does mean that the game behaves differently on fast and slow computers."
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbc0c58416af331078d7d9e",
                    "text": "The `Update` and `Draw` methods are always executed in sequence. Technically, we\ncould move all the code from the `Update` method into the `Draw` method, and leave\nout the `Update` method altogether. Why is it still useful to have different methods?",
                    "solution": "The first advantage is that the code is easier to read: `Update` handles one task, and `Draw` handles the other. Secondly, this forces the programmer to not mix up these tasks: a drawing instruction inside the `Update` method will simply have no effect. Thirdly (although we have not discussed this in the book), a game engine can sometimes make certain optimizations for the performance of the game. For example, if the game world doesn’t change, then it doesn’t have to be redrawn."
                  }
                ]
              },
              "introduction": "Below are some questions about the game loop, the basis of every game program.",
              "publicKey": "3rawkfsg143qtbe0t8sl"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df04f5069b8f",
              "languages": [],
              "searchString": "Comments comments",
              "moduleId": "5ee733864024df24f5069b6f",
              "index": 2,
              "title": "Comments",
              "description": "",
              "createdAt": "2019-11-01T10:38:05.670Z",
              "updatedAt": "2021-05-03T10:31:15.405Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbc0b1c416af329e08d7d98",
                    "text": "What are the two ways to write comments in a C# program? And what are the most important reasons to use comments?",
                    "solution": "Comments can be written on a single line with the `//` notation, or spread over multiple lines by starting the comment with `/*` and ending it with `*/`. For example:\n\n```csharp\n// This is a single line comment\n\n/*\n    This comment has multiple lines\n*/\n```\n\nThe most important reason to use comments is to make your code understandable for human readers: not just other programmers, but also yourself!"
                  }
                ]
              },
              "publicKey": "qxsqs8bk7eoz67hffumd"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024dfd84b069b91",
              "languages": [],
              "searchString": "The smallest program (for real, this time) the smallest program (for real, this time) the smallest program for real this time thesmallestprogramforrealthistime",
              "moduleId": "5ee733864024df24f5069b6f",
              "index": 4,
              "title": "The smallest program (for real, this time)",
              "description": "",
              "createdAt": "2019-11-01T10:53:15.415Z",
              "updatedAt": "2021-05-03T10:31:15.488Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbc0ecf416af3b6548d7da0",
                    "text": "You’ve seen HelloWorld as an example of a very small C# program, and you probably have a picture of what you can remove from that program while still following the C# syntax.\n\nIf you take this to the extreme, what is the shortest C# program that you can possibly write? *Hint:* the shortest program we could come up with is a console application of 26 characters long (that does absolutely nothing).",
                    "solution": "Here is a very small program of 29 characters:\n\n```csharp\nclass A{static void Main(){}}\n```\n\nIt has all the necessary ingredients, but no instructions. This is syntactically correct (although it’s a bit useless, of course). If you’re really eager, you can shorten this even further by renaming the `Main` method to something like `B`, and then changing the project settings so that `B` is marked as the program’s main method."
                  }
                ]
              },
              "isOptional": true,
              "difficulty": 4,
              "publicKey": "qcwhd2tymzaetmwo33kp"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df8088069b8e",
              "languages": [],
              "searchString": "Instructions, methods, classes instructions, methods, classes instructions methods classes instructionsmethodsclasses",
              "moduleId": "5ee733864024df24f5069b6f",
              "index": 1,
              "title": "Instructions, methods, classes",
              "description": "",
              "createdAt": "2019-11-01T10:35:39.677Z",
              "updatedAt": "2021-05-03T10:31:15.914Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbc0a82416af35a018d7d96",
                    "text": "What is an *instruction*, a *method*, and a *class*? And how are these concepts related to each other?",
                    "solution": "An *instruction* is a piece of code that changes the computer’s memory in some way. It is a part of the code that ‘does something’. A *method* is a reusable group of instructions with a name. The instructions inside it will be executed whenever the method is called. A *class* is a reusable group of methods (plus member variables and some other things) with a name. It defines the behavior of the objects in your program."
                  }
                ]
              },
              "publicKey": "qtoebyy2fgktka38emo1"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df6400069b8d",
              "languages": [],
              "searchString": "Reading material reading material readingmaterial",
              "moduleId": "5ee733864024df24f5069b6f",
              "index": 0,
              "title": "Reading material",
              "description": "",
              "createdAt": "2019-11-01T10:02:09.834Z",
              "updatedAt": "2021-05-03T10:31:16.052Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbc08e8416af34e628d7d93",
                    "text": "Please read *Chapter 3: Game programming basics* from the textbook *Learning C# by Programming Games*."
                  }
                ]
              },
              "publicKey": "hpfc42mexq20h8z0h18p"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024dfa7e6069b9a",
              "languages": [],
              "searchString": "Relation between syntactical categories relation between syntactical categories relationbetweensyntacticalcategories",
              "moduleId": "5ee733864024dfce7d069b70",
              "index": 8,
              "title": "Relation between syntactical categories",
              "description": "",
              "createdAt": "2019-11-01T13:24:43.243Z",
              "updatedAt": "2021-05-03T10:31:15.452Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbc3232416af368f18d7dbc",
                    "text": "Program fragments can belong to the following syntactical categories: (M)ethod call, (D)eclaration, (E)xpression, (I)nstruction, and (A)ssignment. Are there any patterns?"
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbc322b416af393f68d7dbb",
                    "text": "Which combinations of categories are possible for a fragment?",
                    "solution": "The following combinations of categories are possible: DI, AI, IM, EM, ADI."
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbc329a416af36f3e8d7dbd",
                    "text": "Which of the categories always belong together?",
                    "solution": "A declaration and an assignment are both a specific type of instruction, so D and A always imply I."
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbc32b4416af3d1fb8d7dbe",
                    "text": "Which of the categories always have their code fragment ending with a semicolon? Which categories have this sometimes? And which never?",
                    "solution": "An instruction *always* ends with a semicolon, and therefore an assignment and a declaration do that as well. An expression *never* ends with a semicolon. A method call *sometimes* ends with a semicolon, depending on whether it is part of an expression or part of an instruction."
                  }
                ]
              },
              "introduction": "Program fragments can belong to the following syntactical categories: (M)ethod call, (D)eclaration, (E)xpression, (I)nstruction, and (A)ssignment. Are there any patterns?",
              "publicKey": "nryvlesnxyrtk9ews7i3"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df66f7069b94",
              "languages": [],
              "searchString": "Concepts concepts",
              "moduleId": "5ee733864024dfce7d069b70",
              "index": 2,
              "title": "Concepts",
              "description": "",
              "createdAt": "2019-11-01T11:18:31.814Z",
              "updatedAt": "2021-05-03T10:31:15.470Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbc1495416af361998d7da7",
                    "text": "Provide short definitions of the concepts *instruction*, *variable*, *method*, and *object*. Which two relations does the concept *class* have with these concepts?",
                    "solution": "An *instruction* is a piece of code that can be executed. A *variable* is a location in memory with a name. A *method* is a group of instructions with a name. An *object* is a group of variables that belong together. A *class* is a group of methods, and also the type of an object that these methods can modify."
                  }
                ]
              },
              "publicKey": "zbiobkf1txrqvgn588uu"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df0810069b9b",
              "languages": [],
              "searchString": "Variable assignment variable assignment variableassignment",
              "moduleId": "5ee733864024dfce7d069b70",
              "index": 9,
              "title": "Variable assignment",
              "description": "",
              "createdAt": "2019-11-01T15:29:26.216Z",
              "updatedAt": "2021-05-03T10:31:15.507Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbc4f70416af34d828d7dc0",
                    "text": "Consider the following two variable declarations and assignments:\n\n```csharp\nint x, y;\nx = 40;\ny = 12;\n```\n\nIndicate for each of the following groups of instructions what the values of x and y are when these instructions are executed after the above declarations and instructions.\n\n```\n1.  y = x+1; x = y+1;\n2.  x = y; y = x;\n3.  x = y+1; y = x-1;\n4.  x = x+y; y = x-y; x = x-y;\n5.  y = x/3; x = y*3;\n6.  y = 2/3*x; x = 2*x/3;\n7.  y = x%6; x = x/6;\n\n```",
                    "solution": "```\n1.  x = 42, y = 41\n2.  x = 12, y = 12\n3.  x = 13, y = 12\n4.  x = 12, y = 40\n5.  x = 39, y = 13\n6.  x = 26, y =  0\n7.  x =  6, y =  4\n\n```\n\nWatch out: we’re slightly abusing the = symbol here. It has nothing to do with the assignment operator anymore. Instead, you should interpret it as the classical ‘equals’ that you know from mathematics. So, the symbols in this table are not meant as C# code."
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbc50ab416af34c2c8d7dc1",
                    "text": "In one of the cases, the values of `x` and `y` are swapped. Does this work for all possible values of `x` and `y`? If so, why is that? If not, in what cases does it fail?",
                    "solution": "The swap between `x` and `y` in case 4 works for all values (as long as the two numbers are not too big). You can see that this works if you replace the constants 40 and 12 by symbols `a` and `b`. If you fill in these values on the right hand side the final situation will be `y = a` and `x = b`. However, the sum of `x` and `y` shouldn’t be so big that `x+y` doesn’t fit into an `int` anymore."
                  }
                ]
              },
              "publicKey": "ojnq69lo8mcp7k8iwzr2"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df72fa069b99",
              "languages": [],
              "searchString": "Syntactical categories syntactical categories syntacticalcategories",
              "moduleId": "5ee733864024dfce7d069b70",
              "index": 7,
              "title": "Syntactical categories",
              "description": "",
              "createdAt": "2019-11-01T11:54:33.734Z",
              "updatedAt": "2021-05-03T10:31:15.776Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbc2906416af33d1c8d7db9",
                    "text": "Indicate for each of the following program fragments to which syntactical category it belongs: (M)ethod call, (D)eclaration, (E)xpression, (I)nstruction, and (A)ssignment.\n\nPlace the answer between the \\[ \\] before the fragment.\n\nThere may be multiple correct answers for each. Watch out: some fragments are not valid code at all, and they have zero answers!",
                    "template": "[ ]       int x;\n[ ]       (int)x\n[ ]       int(x)\n[ ]       int x\n[ ]       int x, double y;\n[ ]       int x, y;\n[ ]       \"/\"\n[ ]       \"\\\"\n[ ]       \"//\"\n\n\n[ ]       int 23;\n[ ]       23\n[ ]       23x0\n[ ]       x=23;\n[ ]       \"x=23;\"\n[ ]       x23\n[ ]       0x23\n[ ]       23%x\n[ ]       x/*23*/\n\n[ ]       (y+1)*x\n[ ]       (x+y)(x-1)\n[ ]       x+1=y+1;\n[ ]       x=y+1;\n[ ]       spriteBatch.Begin();\n[ ]       Math.Sqrt(23)\n[ ]       \"\\\\\"\n[ ]       (x%23)\n[ ]       \"\"\n\n[ ]       new Color(0,0,0)\n[ ]       new Color black;\n[ ]       Color blue;\n[ ]       GraphicsDevice.Clear(Color.White);\n[ ]       Content.RootDirectory = \"Content\";\n[ ]       Color.CornflowerBlue\n[ ]       Color.CornflowerBlue.ToString()\n[ ]       game.Run()\n[ ]       23=x;",
                    "solution": "```\n[DI]      int x;\n[E]       (int)x\n[ ]       int(x)\n[ ]       int x\n[DI]      int x, double y;\n[DI]      int x, y;\n[E]       \"/\"\n[ ]       \"\\\"\n[E]       \"//\"\n\n\n[ ]       int 23;\n[E]       23\n[ ]       23x0\n[AI]      x=23;\n[E]       \"x=23;\"\n[E]       x23\n[E]       0x23\n[E]       23%x\n[E]       x/*23*/\n\n[E]       (y+1)*x\n[ ]       (x+y)(x-1)\n[ ]       x+1=y+1;\n[AI]      x=y+1;\n[IM]      spriteBatch.Begin();\n[EM]      Math.Sqrt(23)\n[E]       \"\\\\\"\n[E]       (x%23)\n[E]       \"\"\n\n[EM]      new Color(0,0,0)\n[ ]       new Color black;\n[DI]      Color blue;\n[IM]      GraphicsDevice.Clear(Color.White);\n[AI]      Content.RootDirectory = \"Content\";\n[E]       Color.CornflowerBlue\n[EM]      Color.CornflowerBlue.ToString()\n[M]       game.Run()\n[ ]       23=x;\n```\n\nThe fragments marked with \\[ \\] are invalid code. Some fragments leave room for (nearly philosophical) discussion:\n\n* `x`, `y`, `x23`, etc. are valid as variable names, but of course, they are only valid code if you also declare these variables somewhere.\n* `game.Run()` could also be seen as an *expression* of type `void`, depending on whether you count `void` as a datatype.\n* You could argue that a combination of two declarations (such as `int x, y;`) is not a declaration anymore.\n* Not all books or websites agree that every declaration is an instruction, and some would prefer the answer \\[D\\] wherever we wrote \\[DI\\].\n\nBut try not to worry too much about these details.\n"
                  }
                ]
              },
              "publicKey": "izgsfwzirvk4lbq3na9e"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df4e36069b95",
              "languages": [],
              "searchString": "Declaration, instruction, expression declaration, instruction, expression declaration instruction expression declarationinstructionexpression",
              "moduleId": "5ee733864024dfce7d069b70",
              "index": 3,
              "title": "Declaration, instruction, expression",
              "description": "",
              "createdAt": "2019-11-01T11:21:29.501Z",
              "updatedAt": "2021-05-03T10:31:15.795Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbc1541416af3b84e8d7da9",
                    "text": "What’s the difference between a *declaration*, an *instruction*, and an *expression*?",
                    "solution": "An *instruction* is a programming construct that can be executed, so that the memory changes. A *declaration* is an instruction that ‘promises’ the existence of a variable with a certain type. An *expression* is a piece of code with a value (that can be evaluated)."
                  }
                ]
              },
              "publicKey": "kti674adira7d6pxpcmz"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df04f9069b9c",
              "languages": [],
              "searchString": "Multiplying and dividing multiplying and dividing multiplyinganddividing",
              "moduleId": "5ee733864024dfce7d069b70",
              "index": 10,
              "title": "Multiplying and dividing",
              "description": "",
              "createdAt": "2019-11-01T15:45:54.130Z",
              "updatedAt": "2021-05-03T10:31:15.877Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbc533f416af35b868d7dc3",
                    "text": "Is there a difference between the following three instructions?\n\n```csharp\nposition = 300 - 3*time / 2;\nposition = 300 - 3/2 * time;\nposition = 300 - time/2 * 3;\n```",
                    "solution": "Mathematically speaking, there is no difference. But if we are dealing with variables of type `int`, then the rounding of the division will result in a different outcome. For example, consider the case where `time` contains the value 5. Then `3*5/2 = 15/2 = 7`. But `3/2*5 = 1*5 = 5`, and `5/2*3 = 2*3 = 6`."
                  }
                ]
              },
              "publicKey": "sj2vc2ls2ljifgosct23"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df3846069b93",
              "languages": [],
              "searchString": "Names names",
              "moduleId": "5ee733864024dfce7d069b70",
              "index": 1,
              "title": "Names",
              "description": "",
              "createdAt": "2019-11-01T11:14:06.355Z",
              "updatedAt": "2021-05-03T10:31:16.061Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbc1396416af395ed8d7da5",
                    "text": "In mathematics and physics, it’s quite common to use fixed symbols for variables and constants. Can you name a few examples? What is the advantage of using these standard names and symbols?",
                    "solution": "Examples of *constants* are $e$ and $\\pi$ in mathematics, and $c$ (the speed of light) and $g$ (gravity constant) in physics. These are numbers with a fixed value that are useful in certain areas.\n\nFor *variables*, it is common to use the symbol $x$ for a standard variable, $f$ for a function, and $\\phi$ or $\\theta$ for an angle. In physics, we often use $v$ for velocity, $a$ for acceleration, and $m$ for mass.\n\nIf everyone uses the same symbols for certain constants and variables, then it is much easier to communicate."
                  }
                ]
              },
              "publicKey": "emq6dt362cmr7mtszi0a"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df62e8069b97",
              "languages": [],
              "searchString": "Changing names changing names changingnames",
              "moduleId": "5ee733864024dfce7d069b70",
              "index": 5,
              "title": "Changing names",
              "description": "",
              "createdAt": "2019-11-01T11:29:23.725Z",
              "updatedAt": "2021-05-03T10:31:16.290Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbc1723416af31fbc8d7dad",
                    "text": "Look at the class `DiscoWorld` in Listing 4.1 in the book. Let’s say you want to change the name of this class into `TechnoWorld` (because your boss has said that disco is for old people). What would you have to change in the code then? And apart from these necessary changes, what is logical (but not required) to change as well?",
                    "solution": "We have to change the name of the class, the name of its constructor method, and the call to this constructor method from `Main`. Apart from that, it makes sense to change the name of the *.cs* file of your program, because it’s common to let the filename and the class name match. However, this is technically not necessary."
                  }
                ]
              },
              "publicKey": "lcxw48ax6wzojeciirj5"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df6f1c069b92",
              "languages": [],
              "searchString": "Reading material reading material readingmaterial",
              "moduleId": "5ee733864024dfce7d069b70",
              "index": 0,
              "title": "Reading material",
              "description": "",
              "createdAt": "2019-11-01T10:02:09.834Z",
              "updatedAt": "2021-05-03T10:31:16.328Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbc0fda416af3430a8d7da3",
                    "text": "Please read *Chapter 4: Creating a game world* from the textbook *Learning C# by Programming Games*."
                  }
                ]
              },
              "publicKey": "r4aodoasyczk77rbn2y6"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df03fb069b96",
              "languages": [],
              "searchString": "Statement versus instruction statement versus instruction statementversusinstruction",
              "moduleId": "5ee733864024dfce7d069b70",
              "index": 4,
              "title": "Statement versus instruction",
              "description": "",
              "createdAt": "2019-11-01T11:23:38.256Z",
              "updatedAt": "2021-05-03T10:31:16.390Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbc15ca416af35ee88d7dab",
                    "text": "Many programming books use the word ‘statement’ to indicate an instruction in a programming language. Why do you think we avoid that word in this book?",
                    "solution": "The word ‘statement’ can also mean something like a ‘remark’ or a ‘point of view’, or a quote that you can agree or disagree with. We use the word ‘instruction’ to emphasize that we give the computer a *command* to do something.\n\nFor example, a statement could be something like: “the grass is purple”. This is different from giving the computer a command or an instruction to *change* the color of grass into purple:\n\n```csharp\n    grass.Color = Color.Purple;\n```\n\nIn fact, the word ‘statement’ would actually make more sense for a *Boolean expression*, as you will discover later."
                  }
                ]
              },
              "publicKey": "c4gw7k05dvvnkyjpzi0n"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df23ce069b9d",
              "languages": [],
              "searchString": "Hours, minutes, seconds hours, minutes, seconds hours minutes seconds hoursminutesseconds",
              "moduleId": "5ee733864024dfce7d069b70",
              "index": 11,
              "title": "Hours, minutes, seconds",
              "description": "",
              "createdAt": "2019-11-01T15:49:36.323Z",
              "updatedAt": "2021-05-03T10:31:16.402Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbc543d416af324348d7dc5",
                    "text": "Suppose that the integer variable `time` contains a (possibly large) number of seconds. Write down a number of instructions that declares three new integer variables — `hours`, `minutes`, and `seconds`, corresponding to their meaning— and then fills these variables with the appropriate values. That is, `hours` should contain the number of whole hours contained in the time variable, `minutes` should contain the remaining number of whole minutes, and `seconds` should contain the remaining number of seconds. Note: the values of `minutes` and `seconds` should be smaller than 60. *Hint:* Use the `%` operator.",
                    "programmingLanguage": "csharp",
                    "solution": "The following instructions do the job:\n\n```csharp\nint hours = time / 3600;\nint minutes = (time % 3600) / 60;\nint seconds = time % 60;\n```"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbc54ca416af3bbe98d7dc6",
                    "text": "Next, write an instruction that performs the reverse operation. So, given three integer variables `hours`, `minutes`, and `seconds`, calculate the total number of seconds and store this in a new integer variable named `time`.",
                    "solution": "The reverse operation is easier:\n\n```csharp\ntime = 3600*hours + 60*minutes + seconds;\n```"
                  }
                ]
              },
              "isOptional": true,
              "difficulty": 4,
              "publicKey": "w67e0a4fpwdvdcxeo4lo"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df386f069b98",
              "languages": [],
              "searchString": "Playing with colors playing with colors playingwithcolors",
              "moduleId": "5ee733864024dfce7d069b70",
              "index": 6,
              "title": "Playing with colors",
              "description": "",
              "createdAt": "2019-11-01T11:36:58.222Z",
              "updatedAt": "2021-05-03T10:31:16.429Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbc18e6416af31f868d7daf",
                    "text": "In the `DiscoWorld` example, you’ve seen the `Color` data type, and its constructor with three parameters (for the R, G, and B components)."
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbc1921416af369a98d7db0",
                    "text": "Knowing this, what colors do the following variables represent?\n\n```csharp\nColor color1 = new Color(255, 0, 0);\nColor color2 = new Color(0, 255, 0);\nColor color3 = new Color(0, 0, 255);\nColor color4 = new Color(255, 255, 0);\nColor color5 = new Color(255, 0, 255);\nColor color6 = new Color(0, 255, 255);\nColor color7 = new Color(255, 255, 255);\nColor color8 = new Color(255, 160, 0);\nColor color9 = new Color(180, 180, 180);\n\n```",
                    "solution": "These colors are (from top to bottom) red, green, blue, yellow, magenta (a kind of purple), cyan, white, orange, and gray. Try them out in an example program!"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbc1ac9416af39f508d7db3",
                    "template": "protected override void Update(GameTime gameTime)\n{\n   int redComponent = gameTime.TotalGameTime.Milliseconds / 4;\n   background = new Color(redComponent, 0, 0);\n}",
                    "programmingLanguage": "csharp",
                    "text": "How would you change the `Update` method of the `DiscoWorld` program below, so that the color changes from black to blue instead of from black to red?",
                    "solution": "```csharp\nprotected override void Update(GameTime gameTime)\n{\n   int blueComponent = gameTime.TotalGameTime.Milliseconds / 4;\n   background = new Color(0, 0, blueComponent);\n}\n```"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbc1c40416af3334d8d7db7",
                    "text": "Now modify the method so that the color changes from black to purple.",
                    "template": "protected override void Update(GameTime gameTime)\n{\n   int redComponent = gameTime.TotalGameTime.Milliseconds / 4;\n   background = new Color(redComponent, 0, 0);\n}",
                    "programmingLanguage": "csharp",
                    "solution": "```csharp\nprotected override void Update(GameTime gameTime)\n{\n   int colorComponent = gameTime.TotalGameTime.Milliseconds / 4;\n   background = new Color(colorComponent, 0, colorComponent);\n}\n```"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbc1b7c416af3f05a8d7db5",
                    "text": "Can you also modify the program so that the color changes from purple to black?",
                    "template": "protected override void Update(GameTime gameTime)\n{\n   int redComponent = gameTime.TotalGameTime.Milliseconds / 4;\n   background = new Color(redComponent, 0, 0);\n}",
                    "programmingLanguage": "csharp",
                    "solution": "```csharp\nprotected override void Update(GameTime gameTime)\n{\n   int colorComponent = 255 - gameTime.TotalGameTime.Milliseconds / 4;\n   background = new Color(colorComponent, 0, colorComponent);\n}\n```"
                  }
                ]
              },
              "introduction": "In the `DiscoWorld` example, you’ve seen the `Color` data type, and its constructor with three parameters (for the R, G, and B components).",
              "publicKey": "7i2q21h0d9stfwasch95"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df9615069b9e",
              "languages": [],
              "searchString": "Reading material reading material readingmaterial",
              "moduleId": "5ee733864024dfa932069b71",
              "index": 0,
              "title": "Reading material",
              "description": "",
              "createdAt": "2019-11-01T10:02:09.834Z",
              "updatedAt": "2021-05-03T10:31:15.378Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbc559a416af36a988d7dc9",
                    "text": "Please read *Chapter 5: Showing what the player is doing* from the textbook *Learning C# by Programming Games*."
                  }
                ]
              },
              "publicKey": "lbvvhiid6mp8eho5gp7k"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df7117069b9f",
              "languages": [],
              "searchString": "Drawing sprites in different locations drawing sprites in different locations drawingspritesindifferentlocations",
              "moduleId": "5ee733864024dfa932069b71",
              "index": 1,
              "title": "Drawing sprites in different locations",
              "description": "",
              "createdAt": "2019-11-02T09:21:58.192Z",
              "updatedAt": "2021-05-03T10:31:15.730Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc13a77416af3d5d98d7e6b",
                    "text": "Describe the required modifications to the SpriteDrawing program so that three balloons are drawn: one in the top right corner of the screen, one in the bottom left corner of the screen, and one in the middle of the screen. *Hint:* use the `Width` and `Height` properties of the `Texture2D` class.",
                    "solution": "We won’t give you the full program here, but we do provide some hints. If your sprite is stored under the variable name `sprite`, then:\n\n* `GraphicsDevice.Viewport.Width - sprite.Width` is the $x$-coordinate of the rightmost balloon;\n* `GraphicsDevice.Viewport.Height - sprite.Height` is the $y$-coordinate of the bottom balloon;\n* `(GraphicsDevice.Viewport.Width - sprite.Width)/2` is the $x$-coordinate of the center balloon;\n* `(GraphicsDevice.Viewport.Height - sprite.Height)/2` is the $y$-coordinate of the center balloon."
                  }
                ]
              },
              "publicKey": "uwo2dghiozxklcso3224"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024dfc3eb069ba0",
              "languages": [],
              "searchString": "Flying balloons flying balloons flyingballoons",
              "moduleId": "5ee733864024dfa932069b71",
              "index": 2,
              "title": "Flying balloons",
              "description": "",
              "createdAt": "2019-11-02T09:25:09.615Z",
              "updatedAt": "2021-05-03T10:31:15.739Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc1664a416af321c88d7e70",
                    "text": "This programming assignment uses the FlyingSprites example as a basis. Modify the program in the followings steps:\n\n* First modify the program so that the balloon flies from the top to the bottom of the screen.\n* Next modify the program so that the balloon flies in circles around the point that indicates the center of the screen. Use the `Sin` or `Cos` methods that are available in the `Math` class. Define a constant that contains the speed at which the balloon turns around the center point. Also define a constant that contains the distance from the balloon to the center point (e.g. the radius of the circle).\n* Now change the program so that the balloon flies in circles around a point moving from the left to the right.\n* Finally change the program so that a second balloon also turns in circles around that point, but in the opposite direction, and with a bigger radius. Feel free to try a couple of other things as well such as: a balloon that flies in a circle around another flying balloon, or use another `Math` method to change the position of the balloon. Don’t go too crazy on this or you’ll end up with a headache!\n\nThis is a rather ‘open’ exercise with many possible answers. Try to find a solution yourself, but if you get lost in the details, don’t be afraid to just continue with Chapter 6 (or take a well-deserved break)."
                  }
                ]
              },
              "publicKey": "e2hp49b41p16uwg6xitq"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df1adc069ba5",
              "languages": [],
              "searchString": "Bouncing balloons bouncing balloons bouncingballoons",
              "moduleId": "5ee733864024df467a069b72",
              "index": 4,
              "title": "Bouncing balloons",
              "description": "",
              "createdAt": "2019-11-02T10:02:20.986Z",
              "updatedAt": "2021-05-03T10:31:15.443Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbd5452416af3309d8d7ddf",
                    "text": "In the FlyingSprites example from Chapter 5 of the book, a balloon sprite moves upward according to the game time.\n\nModify the program so that the balloon has a separate *velocity* vector (another `Vector2` member variable), indicating the balloon’s horizontal and vertical movement in pixels per second. Use this velocity to update the balloon’s position in the `Update` method. Verify that you can use different vector coordinates to let the balloon move in different directions.\n\nNext, modify the program so that the balloon bounces back when it touches the edge of the screen. *Hint:* use an `if` instruction to check for this, and change the $x$ or $y$ component of the balloon’s velocity when the `if`-check succeeds.",
                    "programmingLanguage": "csharp",
                    "solution": "In the later chapters of the book, you’ll see many examples like this. For example, in Chapter 8 (section 2), they will implement the movement of the ball subject to gravity. Have a look at that section for inspiration!"
                  }
                ]
              },
              "isOptional": true,
              "difficulty": 4,
              "publicKey": "ftms0evw52r1jo529a42"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df7e63069ba3",
              "languages": [],
              "searchString": "Strange usage of if and else strange usage of if and else strangeusageofifandelse",
              "moduleId": "5ee733864024df467a069b72",
              "index": 2,
              "title": "Strange usage of if and else",
              "description": "",
              "createdAt": "2019-11-02T09:39:32.447Z",
              "updatedAt": "2021-05-03T10:31:15.758Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbd4eef416af377418d7dd4",
                    "text": "Given two `int` variables (`a` and `b`), both with a meaningful value, what does the following code do?\n\n```csharp\nif (a != 0)\n    b = a;\nelse\n    b = 0;\n```",
                    "solution": "This code gives the variable `b` the same value as `a`. Unless `a` has a value of 0: in that case, the code explicitly sets `b` to 0, which is actually also the value of `a`."
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbd4f3c416af37f708d7dd5",
                    "text": "Can you write a shorter version of the program in the previous question?",
                    "programmingLanguage": "csharp",
                    "solution": "```csharp\nb = a;\n```"
                  }
                ]
              },
              "publicKey": "vbsursjdrkpacpt3pjla"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df320a069ba1",
              "languages": [],
              "searchString": "Reading material reading material readingmaterial",
              "moduleId": "5ee733864024df467a069b72",
              "index": 0,
              "title": "Reading material",
              "description": "",
              "createdAt": "2019-11-01T10:02:09.834Z",
              "updatedAt": "2021-05-03T10:31:15.923Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbd4d1c416af3e9e68d7dd0",
                    "text": "Please read *Chapter 6: Reacting to player input* from the textbook *Learning C# by Programming Games*."
                  }
                ]
              },
              "publicKey": "lgdzj6on1m32d5qi78v1"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024dfca3a069ba2",
              "languages": [],
              "searchString": "Enumerated types enumerated types enumeratedtypes",
              "moduleId": "5ee733864024df467a069b72",
              "index": 1,
              "title": "Enumerated types",
              "description": "",
              "createdAt": "2019-11-02T09:34:46.648Z",
              "updatedAt": "2021-05-03T10:31:15.933Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbd4dbd416af3e82a8d7dd2",
                    "text": "What is an enumerated type, and what are the advantages of using it instead of an integer?",
                    "solution": "An `enum`(erated type) is a data type with a fixed number of possible values. Each possible value is written as a word, which makes them more human-readable than integers in certain cases. Also, the compiler will prevent you from using values that you haven’t defined. "
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc166af416af35db48d7e72",
                    "programmingLanguage": "csharp",
                    "text": "Give a few examples of situations in which you could use an enumerated type (other than the examples you’ve already seen in the book).",
                    "solution": "Here’s an example:\n\n```csharp\nenum Direction { Left, Right, Up, Down };\n```\n\nThis example can be useful in a grid-based game where objects can move in only four directions. Instead of using integers with ‘magic values’ (1 for left, 2 for right, and so on), it is nicer to use such an `enum` here."
                  }
                ]
              },
              "publicKey": "2ag6yk69yjwjznymlkbm"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df5a29069ba4",
              "languages": [],
              "searchString": "Mixed seasoning mixed seasoning mixedseasoning",
              "moduleId": "5ee733864024df467a069b72",
              "index": 3,
              "title": "Mixed seasoning",
              "description": "",
              "createdAt": "2019-11-02T09:50:18.788Z",
              "updatedAt": "2021-05-03T10:31:16.006Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbd516a416af330618d7dd9",
                    "text": "Let’s say we have two `int` variables (`day` and `month`) that together represent a valid day of the year. The following code tries to draw a background sprite based on the *season* expressed by this day and month. For simplicity, we only look at spring and summer, so we assume that the value of month lies between 4 and 8 (meaning between April and August). Note: The (astronomical) summer season begins on June 21.\n\n```csharp\nif (month < 6)\n{\n    spriteBatch.Draw(backgroundSpring, Vector2.Zero, Color.White);\n}\nelse if (day < 21)\n{\n    spriteBatch.Draw(backgroundSpring, Vector2.Zero, Color.White);\n}\nelse\n{\n    spriteBatch.Draw(backgroundSummer, Vector2.Zero, Color.White);\n}\n```"
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbd51ed416af34e278d7dda",
                    "text": "Does this code always draw the correct background sprite? (*Hint:* no!) Find a combination of day and month that gives us the wrong answer.",
                    "solution": "Oops: this code also shows the spring background if `month > 6` and `day < 21`, for example on July 5 and August 10.",
                    "template": ""
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbd5216416af302ce8d7ddb",
                    "text": "Write a variant of this code that *does* work correctly for all dates (between April and August). Update the code below.",
                    "programmingLanguage": "csharp",
                    "solution": "Just rewrite the second `if` clause as follows:\n\n```csharp\nif (month < 6)\n{\n    spriteBatch.Draw(backgroundSpring, Vector2.Zero, Color.White);\n}\nelse if (month == 6 && day < 21)\n{\n    spriteBatch.Draw(backgroundSpring, Vector2.Zero, Color.White);\n}\nelse\n{\n    spriteBatch.Draw(backgroundSummer, Vector2.Zero, Color.White);\n}\n```",
                    "template": "if (month < 6)\n{\n    spriteBatch.Draw(backgroundSpring, Vector2.Zero, Color.White);\n}\nelse if (day < 21)\n{\n    spriteBatch.Draw(backgroundSpring, Vector2.Zero, Color.White);\n}\nelse\n{\n    spriteBatch.Draw(backgroundSummer, Vector2.Zero, Color.White);\n}"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbd5231416af3fef58d7ddc",
                    "text": "Extend your code to support autumn and winter as well. Update the code below.",
                    "programmingLanguage": "csharp",
                    "template": "if (month < 6)\n{\n    spriteBatch.Draw(backgroundSpring, Vector2.Zero, Color.White);\n}\nelse if (day < 21)\n{\n    spriteBatch.Draw(backgroundSpring, Vector2.Zero, Color.White);\n}\nelse\n{\n    spriteBatch.Draw(backgroundSummer, Vector2.Zero, Color.White);\n}",
                    "solution": "We’ll leave this for you to fill in. It’s the same idea, but with different months!"
                  }
                ]
              },
              "introduction": "Let’s say we have two `int` variables (`day` and `month`) that together represent a valid day of the year. The following code tries to draw a background sprite based on the *season* expressed by this day and month. For simplicity, we only look at spring and summer, so we assume that the value of month lies between 4 and 8 (meaning between April and August). Note: The (astronomical) summer season begins on June 21.\n\n```csharp\nif (month < 6)\n{\n    spriteBatch.Draw(backgroundSpring, Vector2.Zero, Color.White);\n}\nelse if (day < 21)\n{\n    spriteBatch.Draw(backgroundSpring, Vector2.Zero, Color.White);\n}\nelse\n{\n    spriteBatch.Draw(backgroundSummer, Vector2.Zero, Color.White);\n}\n```",
              "publicKey": "5trxj2m4jwl1wvupp76r"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df198a069ba8",
              "languages": [],
              "searchString": "Properties in Painter properties in painter propertiesinpainter",
              "moduleId": "5ee733864024dfbe20069b73",
              "index": 2,
              "title": "Properties in Painter",
              "description": "",
              "createdAt": "2019-11-02T19:01:10.637Z",
              "updatedAt": "2021-05-03T10:31:15.460Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbdd27b416af319d38d7deb",
                    "text": "This assignment lets you change the properties in the Painter program (and add new properties to it)."
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbdd2ba416af3289d8d7dec",
                    "text": "Look at the `Angle` property that you’ve added to the `Cannon` class. How could you change the setter of this property to only allow angles between $0$ and $2\\pi$ radians?",
                    "programmingLanguage": "csharp",
                    "solution": "If you want to give the `Angle` property custom behavior, you’ll have to fully write out the `get` and `set` parts again, and use a (private) member variable in the background:\n\n```csharp\nprivate float angle;\npublic float Angle\n{\n    get { return angle; }\n    set\n    {\n        if (value >= 0 && value <= 2*Math.PI) angle = value;\n    }\n}",
                    "template": "// You might need something here\npublic float Angle\n{\n    // Fill this in\n}"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbdd3e3416af30f428d7ded",
                    "programmingLanguage": "csharp",
                    "text": "Can you add a property to the `Cannon` class that allows reading the cannon barrel sprite?",
                    "solution": "Here’s how to do it with a read-only property:\n\n```csharp\npublic Texture2D BarrelSprite { get { return cannonBarrel; } }\n```\n\nAnother option would be to use a property with a private `set` part and a public `get` part. This allows you to get rid of the `cannonBarrel` member variable:\n\n```csharp\npublic Texture2D BarrelSprite { get; private set; }\n```\n\nBoth options are perfectly fine. The second is shorter, but bear in mind that it’s no longer possible if you ever want to give the `get` or `set` part any custom code, such as in the first question."
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbdd4aa416af375378d7dee",
                    "text": "Can you add a property to the `Painter` class that gives access to the `spriteBatch` object?",
                    "programmingLanguage": "csharp",
                    "solution": "Same story: either add a read-only property...\n\n```csharp\npublic SpriteBatch SpriteBatch { get { return spriteBatch; } }\n```\n\n...or replace the member variable by a property with two parts:\n\n```csharp\npublic SpriteBatch SpriteBatch { get; private set; }\n```"
                  }
                ]
              },
              "introduction": "This assignment lets you change the properties in the Painter program (and add new properties to it).",
              "publicKey": "y2gbsqg1y9f0la6jt4s5"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df340c069ba7",
              "languages": [],
              "searchString": "Keywords keywords",
              "moduleId": "5ee733864024dfbe20069b73",
              "index": 1,
              "title": "Keywords",
              "description": "",
              "createdAt": "2019-11-02T18:52:03.241Z",
              "updatedAt": "2021-05-03T10:31:15.905Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbdd05c416af375a18d7de5",
                    "text": "This question tests your knowledge of several C# keywords."
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbdd06a416af37e608d7de6",
                    "text": "What does the word `void` mean, and when do we need this keyword?",
                    "solution": "The word ‘void’ literally means ‘emptiness’. In C#, we use it to indicate that a method doesn’t have a return value."
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbdd083416af30f358d7de7",
                    "text": "What does the word `int` mean, and when do we need this keyword?",
                    "solution": "The word ‘int’ is an abbreviation of ‘integer’, which is used in C# to define the integer data type for storing whole numbers."
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbdd099416af33a448d7de8",
                    "text": "What does the word `return` mean in a C# instruction, and when do we need it?",
                    "solution": "The keyword `return` is used inside the body of a method to return a result. The program will then jump out of the method and return to the place where the method was called."
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbdd0b1416af36c2f8d7de9",
                    "text": "What does the word `this` mean in a C# instruction, and when do we need it?",
                    "solution": "The keyword `this` is used to indicate the object that we’re currently manipulating. We may need it on several occasions, for example to let an object pass itself as a parameter to a method, or to resolve a name conflict between a member variable and a local variable."
                  }
                ]
              },
              "introduction": "This assignment tests your knowledge of several C# keywords.",
              "publicKey": "opgzhvhotd4l5ihr6j60"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024dfaab7069baa",
              "languages": [],
              "searchString": "Methods about dividers methods about dividers methodsaboutdividers",
              "moduleId": "5ee733864024dfbe20069b73",
              "index": 4,
              "title": "Methods about dividers",
              "description": "",
              "createdAt": "2019-11-02T19:19:21.314Z",
              "updatedAt": "2021-05-03T10:31:16.015Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbdd6c9416af3b9dc8d7df4",
                    "text": "In this assignment, you’ll write several methods that take `int` parameters and return a `bool` value."
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbdd6ea416af31d0a8d7df5",
                    "text": "Write a method `Even` which indicates whether a number passed as a parameter is an even number. Determine what the best type is for the parameter and the return value.",
                    "programmingLanguage": "csharp",
                    "solution": "```csharp\nbool Even(int x)\n{\n    return x%2 == 0;\n}\n```"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbdd718416af3e1b88d7df6",
                    "programmingLanguage": "csharp",
                    "text": "Write a method `MultipleOfThree` that indicates whether its parameter is a multiple of three.",
                    "solution": "```csharp\nbool MultipleOfThree(int x)\n{\n    return x%3 == 0;\n}\n```",
                    "template": "bool MultipleOfThree(int x)\n{\n    // Fill this in\n}"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbdd73d416af327fc8d7df7",
                    "text": "Write a method `MultipleOf` with two parameters `x` and `y` that determines if `x` is a multiple of `y`.",
                    "programmingLanguage": "csharp",
                    "solution": "```csharp\nbool MultipleOf(int x, int y)\n{\n    return x%y == 0;\n}\n```",
                    "template": "bool MultipleOf(int x, int y)\n{\n    // Fill this in\n}"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbdd75a416af32e408d7df8",
                    "text": "Write a method `Divisible` with two parameter `x` and `y` that determines if `x` is divisible by `y` (so $x/y$ should have no remainder).",
                    "programmingLanguage": "csharp",
                    "solution": "This is actually the same question as the previous one. You could give the same answer, or you could let the `Divisible` method call the `MultipleOf` method, like this:\n\n\n```csharp\nbool Divisible(int x, int y)\n{\n    return MultipleOf(x,y);\n}\n```",
                    "template": "bool Divisible(int x, int y)\n{\n    // Fill this in\n}"
                  }
                ]
              },
              "isOptional": true,
              "difficulty": 4,
              "introduction": "In this assignment, you’ll write several methods that take `int` parameters and return a `bool` value.",
              "publicKey": "51l32w0ictkv0lu04bgm"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df867e069bab",
              "languages": [],
              "searchString": "Multiple flying balloons multiple flying balloons multipleflyingballoons",
              "moduleId": "5ee733864024dfbe20069b73",
              "index": 5,
              "title": "Multiple flying balloons",
              "description": "",
              "createdAt": "2019-11-02T19:28:11.467Z",
              "updatedAt": "2021-05-03T10:31:16.024Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbdd8e0416af3d32b8d7dfa",
                    "text": "In the previous module for Chapter 6, you’ve updated the FlyingSprites example such that the balloon bounces off the edge of the screen. Let’s improve this program by using classes and objects."
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbdd913416af3595e8d7dfb",
                    "text": "Move the behavior of the balloon to a separate `Balloon` class. Give the overall game class an instance of your `Balloon` class, and check that the game still behaves as expected.\n\nNext, modify the constructor of `Balloon` to include a starting position and a starting velocity.\n\nAnd finally, add multiple instances of `Balloon` to the game, with different starting positions and velocities. Do you notice how the `Balloon` class avoids a lot of copying and pasting of code?",
                    "programmingLanguage": "csharp",
                    "solution": "We’ll leave this to you. If you get stuck, have a look at how this chapter handles the `Cannon` class again, and try to see if/how the `Balloon` class is any different."
                  }
                ]
              },
              "isOptional": true,
              "difficulty": 4,
              "introduction": "In the previous module for Chapter 6, you’ve updated the FlyingSprites example such that the balloon bounces off the edge of the screen. Let’s improve this program by using classes and objects.",
              "publicKey": "8nn78bfqnsd5mujynr8m"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df89a4069ba9",
              "languages": [],
              "searchString": "Methods with a result methods with a result methodswitharesult",
              "moduleId": "5ee733864024dfbe20069b73",
              "index": 3,
              "title": "Methods with a result",
              "description": "",
              "createdAt": "2019-11-02T19:14:09.309Z",
              "updatedAt": "2021-05-03T10:31:16.107Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbdd58d416af399dc8d7df0",
                    "text": "In this assignment, you’ll write methods that take `float` parameters and return another `float` value."
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbdd5ad416af3e7b58d7df1",
                    "text": "Write a method `Circumference` that gives as a result the circumference of a rectangle, whose width and height are given as parameters.",
                    "programmingLanguage": "csharp",
                    "solution": "```csharp\ndouble Circumference(double height, double width)\n{\n    return 2*height + 2*width;\n}\n```",
                    "template": "double Circumference(double height, double width)\n{\n    // Fill this in\n}"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbdd5cf416af35b4f8d7df2",
                    "text": "Write a method `Diagonal` that gives as a result the length of the diagonal of a rectangle, whose width and height are given as parameters. *Hint:* Use the `Math.Sqrt` method for computing the square root of a number.",
                    "programmingLanguage": "csharp",
                    "solution": "```csharp\ndouble Diagonal(double height, double width)\n{\n    return Math.Sqrt(height*height + width*width);\n}\n```",
                    "template": "double Diagonal(double height, double width)\n{\n    // Fill this in\n}"
                  }
                ]
              },
              "introduction": "In this assignment, you’ll write methods that take `float` parameters and return another `float` value.\n",
              "publicKey": "56n9f4zhhg0yrt9srpsy"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df4795069ba6",
              "languages": [],
              "searchString": "Reading material reading material readingmaterial",
              "moduleId": "5ee733864024dfbe20069b73",
              "index": 0,
              "title": "Reading material",
              "description": "",
              "createdAt": "2019-11-01T10:02:09.834Z",
              "updatedAt": "2021-05-03T10:31:16.337Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbd6da2416af3afc88d7de3",
                    "text": "Please read *Chapter 7: Basic game objects* from the textbook *Learning C# by Programming Games*."
                  }
                ]
              },
              "publicKey": "zk1bmqlmevi1giq64g2j"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df05f8069bad",
              "languages": [],
              "searchString": "Memory models memory models memorymodels",
              "moduleId": "5ee733864024df63c5069b74",
              "index": 2,
              "title": "Memory models",
              "description": "",
              "createdAt": "2019-11-03T10:37:37.232Z",
              "updatedAt": "2021-05-03T10:31:15.397Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbeb227416af368648d7e03",
                    "text": "Assume that we have a class `MyObject` with a member variable `public int x`. Now, consider the following program fragment that uses the `MyObject` class:\n\n```csharp\nMyObject a;\na = new MyObject();\na = new MyObject();\na.x = 100;\nMyObject b = a;\nb.x = 8;\na = null;\nb = new MyObject();\n```"
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbeb294416af3fbd08d7e04",
                    "text": "For each of these instructions, indicate how the objects are stored in memory after that  instruction has been executed.",
                    "solution": "After the first instruction, the variable `a` does not point at anything yet.\n\nAfter the second instruction, `a` points to a `MyObject` instance.\n\nAfter the third instruction, `a` points to a new `MyObject` instance. The old `MyObject` instance has no more references to it, so it will eventually be removed via garbage collection.\n\nAfter the fourth instruction, the `x` member variable of the `MyObject` instance has changed to 100.\n\nAfter the fifth instruction, a second variable `b` points to the same `MyObject` instance as `a`. So there is no separate instance.\n\nAfter the sixth instruction, the `x` member variable of the `MyObject` instance (which is ‘shared’ by `a` and `b`) has changed to 8 (for both `a` and `b`).\n\nAfter the seventh instruction, `a` does not point to anything anymore, while `b` still points to the same object.\n\nAfter the final instruction, `b` points to a new `MyObject` instance, while `a` still points to nothing. The old `MyObject` instance has no more references to it, so it will eventually be removed via garbage collection."
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbeb332416af308978d7e05",
                    "text": "Now assume that `MyObject` is a `struct` instead of a class. How does this change your answer?",
                    "solution": "If `MyObject` is a struct instead of a class, then the fifth instruction (`MyObject b = a;`) creates a second instance of `MyObject`, which is a copy of the other instance. Then, `a` and `b` will point at different objects (both with an `x` value of 100). And of course, the sixth instruction (`b.x = 8;`) will change only one of those objects."
                  }
                ]
              },
              "introduction": "Assume that we have a class `MyObject` with a member variable `public int x`. Now, consider the following program fragment that uses the `MyObject` class:\n\n```csharp\nMyObject a;\na = new MyObject();\na = new MyObject();\na.x = 100;\nMyObject b = a;\nb.x = 8;\na = null;\nb = new MyObject();\n```",
              "publicKey": "dc50wadug7kpsbv8p4v8"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024dfa1b6069bac",
              "languages": [],
              "searchString": "Static static",
              "moduleId": "5ee733864024df63c5069b74",
              "index": 1,
              "title": "Static",
              "description": "",
              "createdAt": "2019-11-03T10:28:01.370Z",
              "updatedAt": "2021-05-03T10:31:15.951Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbeabb7416af31b188d7dfe",
                    "text": "In this chapter, you’ve learned about the keyword `static`."
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbeabc6416af378358d7dff",
                    "text": "What does that keyword `static` mean? In what contexts can you use it?",
                    "solution": "The keyword `static` can be used for member variables, methods, and properties in any class `MyClass`. If you mark such an element as `static`, it means that the element is shared by all instances of `MyClass`, so it does not manipulate (or use the data of) a specific instance."
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbeabea416af359358d7e00",
                    "template": "",
                    "text": "Give some examples of static properties in MonoGame that you’ve already seen.",
                    "solution": "MonoGame contains a lot of static (read-only) properties. For example, the `Color` class contains many static read-only properties for predefined colors, such as `Color.Red`. These pretty much act as constants, except that a new `Color` object is returned every time you call the property."
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbeac32416af3c9128d7e01",
                    "text": "Why can’t you use the keyword `this` inside a static method?",
                    "solution": "Because static methods don’t manipulate a specific object, the ‘current object being manipulated’ is not defined there. Thus, the keyword this has no meaning in a static method, and the compiler will forbid you to use it."
                  }
                ]
              },
              "introduction": "In this chapter, you’ve learned about the keyword `static`.",
              "publicKey": "07hlbwgq6ndeoaukbyig"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df44fd069bae",
              "languages": [],
              "searchString": "Random numbers random numbers randomnumbers",
              "moduleId": "5ee733864024df63c5069b74",
              "index": 3,
              "title": "Random numbers",
              "description": "",
              "createdAt": "2019-11-03T11:08:21.667Z",
              "updatedAt": "2021-05-03T10:31:15.978Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbeb532416af3a8748d7e07",
                    "text": "This assignment is about using the `System.Random` class. You can assume that your code has access to an object of type `Random` via a static property `Random`, just like how it was implemented for `Painter` in this chapter in the book."
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbeb54a416af320278d7e08",
                    "text": "Create a method `RandomDouble` that takes two double parameters (`min` and `max`) and that returns a random `double` between those two values. (You may assume that `max` is larger than `min`.)",
                    "solution": "To obtain a number between `min` and `max`, the trick is to get a random number between `0` and `max - min`, and to then add `min` to the result.\n\n```csharp\npublic double RandomDouble(double min, double max)\n{\n    return min + Random.NextDouble() * (max - min);\n}\n```",
                    "template": "public double RandomDouble(double min, double max)\n{\n    // Fill this in\n}",
                    "programmingLanguage": "csharp"
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbeb69c416af31c0a8d7e09",
                    "text": "Why is it common to use only one `System.Random` object that is shared by the entire program?",
                    "solution": "Getting random numbers is typically something you want to allow anywhere in your program. It’s a bit pointless to give each object its own random number generator, so it’s common to store that generator in a central place for all classes to use."
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbeb6b8416af34dab8d7e0a",
                    "text": "Can you think of examples in which you’d want to use multiple `System.Random` objects instead of one?",
                    "solution": "Sometimes, it’s useful to ensure that a game (or another program) always draws exactly the same random numbers. An example is a program that runs scientific experiments that you want to repeat in the exact same way. Another example is a game level where you want seemingly random events that the player can still learn by heart (by replaying the level many times). To enable this, simply give your `Random` object the same seed each time the program starts.\n\nIt can be good to use one `Random` object for those things that need to be the same every time, and a second `Random` object for the things that are allowed to change (such as explosions and other visual effects). You can then give the first `Random` object a fixed seed, and the second `Random` object an arbitrary one."
                  }
                ]
              },
              "introduction": "This assignment is about using the `System.Random` class. You can assume that your code has access to an object of type `Random` via a static property `Random`, just like how it was implemented for `Painter` in this chapter in the book.",
              "publicKey": "eqv3dsz48thfkdckidwq"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df4ff9069baf",
              "languages": [],
              "searchString": "Reading material reading material readingmaterial",
              "moduleId": "5ee733864024df63c5069b74",
              "index": 0,
              "title": "Reading material",
              "description": "",
              "createdAt": "2019-11-01T10:02:09.834Z",
              "updatedAt": "2021-05-03T10:31:16.116Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbeb80b416af3633b8d7e0d",
                    "text": "Please read *Chapter 8: Communication and interaction between objects* from the textbook *Learning C# by Programming Games*."
                  }
                ]
              },
              "publicKey": "596ysv10maxmozzyf5je"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df614d069bb3",
              "languages": [],
              "searchString": "Methods with loops methods with loops methodswithloops",
              "moduleId": "5ee733864024df0f4c069b75",
              "index": 3,
              "title": "Methods with loops",
              "description": "",
              "createdAt": "2019-11-03T13:26:06.255Z",
              "updatedAt": "2021-05-03T10:31:15.943Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbed580416af38dce8d7e19",
                    "text": "This assignment lets you write several methods that require a `for` or `while` loop."
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbed5b2416af305618d7e1a",
                    "text": "Write a method `RemainderAfterDivision` that takes two `int` parameters `x` and `y`, and returns the value of `x%y`, *without* using the `%` operator.",
                    "programmingLanguage": "csharp",
                    "solution": "The idea here is to keep subtracting `y` until it is no longer possible:\n\n```csharp\nint RemainderAfterDivision(int x, int y)\n{\n    int result = x;\n    while (result >= y)\n        result -= y;\n    return result;\n}\n```\n\nYou could also abuse the way in which integers are automatically rounded down. This gives a shorter program without any loops:\n\n```csharp\nint RemainderAfterDivision(int x, int y)\n{\n    return x - (x / y) * y;\n}\n```",
                    "template": "int RemainderAfterDivision(int x, int y)\n{\n    // Fill this in\n}"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbed5f3416af327768d7e1b",
                    "text": "Write a method `Total` with a number $n$ as a parameter that returns the total sum of the numbers from $0$ until $n$ as a result. If $n$ has a value smaller than or equal to $0$, the method should return $0$.\n",
                    "programmingLanguage": "csharp",
                    "template": "int Total(int n)\n{\n    // Fill this in\n}",
                    "solution": "```csharp\nint Total(int n)\n{\n    int result = 0;\n    for (int i=1; i<=n; i++)\n        result += i;\n    return result;\n}\n```\n\nBy the way, you can actually calculate the same result without using a `while`- or a `for`-instruction:\n\n```csharp\nint Total(int n)\n{\n    if (n <= 0) return 0;\n    return n * (n+1) / 2;\n}\n```"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbed631416af368b58d7e1c",
                    "text": "The *factorial* of a natural number is the result of the multiplication of all the numbers smaller than that number. For example, the factorial of $4$ equals $1 \\times 2 \\times 3 \\times 4 = 24$. Write a method `Factorial` which calculates the factorial of its parameter. You may assume that the parameter is always larger than or equal to $1$.",
                    "programmingLanguage": "csharp",
                    "template": "int Factorial(int n)\n{\n    // Fill this in\n}",
                    "solution": "This is basically the `Total` method, but with multiplication instead of addition. Make sure to start with a result of $1$ (instead of $0$), otherwise the method will always return zero!\n\n```csharp\nint Factorial(int n)\n{\n    int result = 1;\n    for (int t=1; t<=n; t++)\n        result *= t;\n    return result;\n}\n```"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbed6cb416af341328d7e1d",
                    "text": "Write a method `Power` that has two parameters: a number $x$ and an exponent $n$. The result should be $x^n$, so $x$ is multiplied $n$ times with itself. You may assume that $n$ is a positive integer. The method should also work if $n$ equals $0$, and if $x$ isn’t an integer number. *Hint:* use a variable for calculating the result, and don’t forget to give that variable an initial value! By the way, C# already has the method `Math.Pow` that does exactly the same. You are not allowed to use that method in this exercise; that would be way too easy :)",
                    "programmingLanguage": "csharp",
                    "template": "double Power(double x, int n)\n{\n    // Fill this in\n}",
                    "solution": "```csharp\ndouble Power(double x, int n)\n{\n    double result = 1;\n    for (int i=0; i<n; i++)\n        result *= x;\n    return result;\n}\n```"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbed7b1416af301e28d7e1e",
                    "text": "We can approximate the so-called *hyperbolic cosine* of a real number $x$ as follows:\n$$\n1 + x^2/2! + x^4/4! + x^6/6! + x^8/8! + x^{10}/10! + ...\n$$\nIn this case, the notation $6!$ means factorial of 6. Write a method `Coshyp` that calculates this approximation by summing $20$ of these terms and returning that value as a result. You can use the methods created in the previous questions.",
                    "programmingLanguage": "csharp",
                    "solution": "By reusing the `Power` and `Factorial` methods, we can write down this method as follows:\n\n```csharp\ndouble Coshyp(double x)\n{\n    double res=0;\n    for (int t=0; t<40; t+=2)\n        res += Power(x,t) / Factorial(t);\n    return res;\n}\n```",
                    "template": "double Coshyp(double x)\n{\n    // Fill this in\n}"
                  }
                ]
              },
              "introduction": "This assignment lets you write several methods that require a `for` or `while` loop.",
              "publicKey": "50p2eb78ars4abj635wc"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df2e51069bb1",
              "languages": [],
              "searchString": "Results of loops results of loops resultsofloops",
              "moduleId": "5ee733864024df0f4c069b75",
              "index": 1,
              "title": "Results of loops",
              "description": "",
              "createdAt": "2019-11-03T13:11:35.016Z",
              "updatedAt": "2021-05-03T10:31:15.988Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbed229416af320708d7e11",
                    "text": "Take a look at the following code fragments. In each code fragment, what is the value of the variable `x` after the loop has finished?"
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbed274416af36c088d7e13",
                    "editor": "number",
                    "text": "```csharp\nint x=0;\nfor (int i=0; i<10; i++)\n    x += i;\n```",
                    "solution": "The loop will give `x` the value 0 + 1 + 2 + ... + 9, which is 45."
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbed27a416af394f58d7e15",
                    "editor": "number",
                    "text": "```csharp\nint x=0;\nfor (int i=0; i<10; i++)\n    if (i % 2 == 0)\n        x += i;\n```",
                    "solution": "This loop is similar, but it only adds even numbers to the sum. So, `x` will get the value 0 + 2 + 4 + 6 + 8, which is 20."
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbed277416af361c38d7e14",
                    "editor": "number",
                    "text": "```csharp\nint x=1;\nwhile (x < 1000)\n    x *= 2;\n```",
                    "solution": "The third loop will keep doubling `x` until it is larger than 1000, which happens as soon as `x` becomes 1024."
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbed23b416af3de508d7e12",
                    "editor": "number",
                    "text": "```csharp\nint x=1;\nwhile (x > 50)\n    x++;\n```",
                    "solution": "The fourth loop is a nasty trick question. Here, `x` will remain 1, because the loop condition `x > 50` already doesn’t hold at the very beginning."
                  }
                ]
              },
              "introduction": "Take a look at the following code fragments. In each code fragment, what is the value of the variable `x` after the loop has finished?",
              "publicKey": "9kqcjgj0s41fivu5dw17"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df3ee0069bb2",
              "languages": [],
              "searchString": "An empty loop an empty loop anemptyloop",
              "moduleId": "5ee733864024df0f4c069b75",
              "index": 2,
              "title": "An empty loop",
              "description": "",
              "createdAt": "2019-11-03T13:21:02.174Z",
              "updatedAt": "2021-05-03T10:31:16.310Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbed45e416af3332b8d7e17",
                    "text": "Look at the following example:\n\n```csharp\nint val = 10;\nfor (; val >= 3; val -= 3) {}\n```\n\nThis (strange) `for` loop contains an empty body with zero instructions. Why is it still required to write curly braces here? What would happen if you removed those braces?",
                    "solution": "If you remove the braces after the loop’s header, then the compiler will think that this is a loop with one instruction inside it (and not zero). The first instruction that comes immediately *after* the loop will then be treated as if it is *inside* the loop. This will most likely give a compiler error. If you’re unlucky, though, the result might actually be (syntactically) correct code, and your program will behave very strangely."
                  }
                ]
              },
              "publicKey": "je6ccjqb0vtfks48b1yx"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024dfeb9f069bb4",
              "languages": [],
              "searchString": "Prime numbers prime numbers primenumbers",
              "moduleId": "5ee733864024df0f4c069b75",
              "index": 4,
              "title": "Prime numbers",
              "description": "",
              "createdAt": "2019-11-03T13:52:32.741Z",
              "updatedAt": "2021-05-03T10:31:16.363Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbedbfa416af362318d7e20",
                    "text": "Write a method `SmallestDivider` that determines the smallest integer number $\\geq 2$ by which the parameter can be divided. *Hint:* try all possible dividers one by one, and stop as soon as you’ve found one.",
                    "programmingLanguage": "csharp",
                    "solution": "Here’s one way to do it, via a `while` loop:\n\n```csharp\nint SmallestDivider(int x)\n{\n    int divider = 2;\n    while (x % divider != 0)\n        divider++;\n    return divider;\n}\n```",
                    "template": "int SmallestDivider(int x)\n{\n    // Fill this in\n}"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbedc2b416af31dc18d7e21",
                    "text": "Write a method that determines if a number is a prime number. A prime number is a number that’s only divisible by $1$ and by itself.",
                    "solution": "If you think about it, $x$ is a prime number if $x$ is its own smallest divider:\n\n```csharp\nbool IsPrimeNumber(int x)\n{\n    return SmallestDivider(x) == x;\n}\n```",
                    "template": "bool IsPrimeNumber(int x)\n{\n    // Fill this in\n}",
                    "programmingLanguage": "csharp"
                  }
                ]
              },
              "isOptional": true,
              "difficulty": 4,
              "publicKey": "93nfs8hlft9q9vsmyxmz"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024dfc905069bb0",
              "languages": [],
              "searchString": "Reading material reading material readingmaterial",
              "moduleId": "5ee733864024df0f4c069b75",
              "index": 0,
              "title": "Reading material",
              "description": "",
              "createdAt": "2019-11-01T10:02:09.834Z",
              "updatedAt": "2021-05-03T10:31:16.373Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbeb8ad416af325ed8d7e0f",
                    "text": "Please read *Chapter 9: A limited number of lives* from the textbook *Learning C# by Programming Games*."
                  }
                ]
              },
              "publicKey": "wlugqem4v4jejvlk9yxq"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024dfbf5b069bb8",
              "languages": [],
              "searchString": "Polymorphism polymorphism",
              "moduleId": "5ee733864024df2151069b76",
              "index": 3,
              "title": "Polymorphism",
              "description": "",
              "createdAt": "2019-11-03T16:08:13.885Z",
              "updatedAt": "2021-05-03T10:31:15.433Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbefb75416af37d1d8d7e2e",
                    "text": "Consider the following code:\n\n```csharp\nclass Animal\n{\n    public virtual void Speak() { Console.WriteLine(”???”); }\n}\n\nclass Dog : Animal\n{\n    public void Speak() { Console.WriteLine(”Woof!”); }\n}\n\nclass Cat : Animal\n{\n    public override void Speak() { Console.WriteLine(”Meow!”); }\n}\n```\n\nHere, `Console.WriteLine` writes the specified text to the console. Now, assume that you create instances of the classes like this:\n\n```csharp\nDog bingo = new Dog();\nAnimal bingo2 = new Dog();\nCat mittens = new Cat();\nAnimal mittens2 = new Cat();\n```"
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbefbfa416af3db708d7e2f",
                    "text": "For each of the following instructions, indicate what text gets printed on the screen.\n\n1. `bingo.Speak();`\n2. `bingo2.Speak();`\n3. `mittens.Speak();`\n4. `mittens2.Speak();`",
                    "solution": "The trick here is that `Cat` uses the keyword `override`, while `Dog` does not.\n\n1. This will print `Woof!` because `bingo` is of type `Dog`.\n2. This will print `???` because `bingo2` is of type `Animal`, and the `Dog` class does not properly `override` the `Speak` method. In this case, there is no way for the program to know that one method is meant as a more specific version of the other.\n3. This will print `Meow!` because `mittens` is of type `Cat`.\n4. This will print `Meow!` because `mittens2` is of type `Animal`, but the `Cat` class overrides the `Speak` method correctly. In this case, the program can find the more specific version of `Speak`. This is an example of polymorphism!\n\nThe differences between these four cases are pretty tricky, so watch out! If you’re confused, try reading the section in the book on polymorphism again."
                  }
                ]
              },
              "introduction": "Consider the following code:\n\n```csharp\nclass Animal\n{\n    public virtual void Speak() { Console.WriteLine(”???”); }\n}\n\nclass Dog : Animal\n{\n    public void Speak() { Console.WriteLine(”Woof!”); }\n}\n\nclass Cat : Animal\n{\n    public override void Speak() { Console.WriteLine(”Meow!”); }\n}\n```\n\nHere, `Console.WriteLine` writes the specified text to the console. Now, assume that you create instances of the classes like this:\n\n```csharp\nDog bingo = new Dog();\nAnimal bingo2 = new Dog();\nCat mittens = new Cat();\nAnimal mittens2 = new Cat();\n```",
              "publicKey": "h03mhp43yczr2u4j6s95"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df2d60069bb7",
              "languages": [],
              "searchString": "Access modifiers access modifiers accessmodifiers",
              "moduleId": "5ee733864024df2151069b76",
              "index": 2,
              "title": "Access modifiers",
              "description": "",
              "createdAt": "2019-11-03T15:51:47.605Z",
              "updatedAt": "2021-05-03T10:31:15.805Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbef7aa416af331518d7e28",
                    "text": "This question tests whether you understand the access modifiers `public`, `protected`, and `private`. Given are the following class definitions:\n\n\n```csharp\nclass A\n{\n    public float var1;\n    protected int var2;\n    private bool var3;\n\n    public int Var2\n    {\n        get { return var2; }\n        set { if (value > 0) var2 = value; }\n    }\n    \n    public void MethodInA()\n    {\n        ...\n    }\n}\n\nclass B : A\n{\n    public int var4;\n    private int var5;\n    public void MethodInB()\n    {\n        ...\n    }\n```"
                  },
                  {
                    "contentType": "multipleChoiceQuestion",
                    "choices": [
                      {
                        "id": "pbxqknpd",
                        "text": "`this.var1`",
                        "correct": true,
                        "label": "A"
                      },
                      {
                        "id": "pdrgpgtf",
                        "text": "`this.var2`",
                        "correct": true,
                        "label": "B"
                      },
                      {
                        "id": "qmrmplrl",
                        "text": "`this.var3`",
                        "correct": true,
                        "label": "C"
                      },
                      {
                        "id": "xlmwxlgx",
                        "text": "`this.var4`",
                        "correct": false,
                        "label": "D"
                      },
                      {
                        "id": "kdeqklsa",
                        "text": "`this.Var2`",
                        "correct": true,
                        "label": "E"
                      },
                      {
                        "id": "ndgndrmj",
                        "text": "`base.var1`",
                        "correct": false,
                        "label": "F"
                      }
                    ],
                    "actions": [],
                    "_id": "5dbefaa6416af3dfa48d7e2c",
                    "text": "Indicate which of the following expressions are allowed inside the `MethodInA` method.",
                    "multipleCorrect": true,
                    "solution": "See above for the correct answers."
                  },
                  {
                    "contentType": "multipleChoiceQuestion",
                    "choices": [
                      {
                        "id": "vqdjmfca",
                        "text": "`this.var1`",
                        "correct": true,
                        "label": "A"
                      },
                      {
                        "id": "rwlsussm",
                        "text": "`this.var2`",
                        "correct": true,
                        "label": "B"
                      },
                      {
                        "id": "vzrxtjkh",
                        "text": "`this.var3`",
                        "correct": false,
                        "label": "C"
                      },
                      {
                        "id": "cwlbnffx",
                        "text": "`this.var5`",
                        "correct": true,
                        "label": "D"
                      },
                      {
                        "id": "vlaitnmh",
                        "text": "`this.Var2`",
                        "correct": true,
                        "label": "E"
                      },
                      {
                        "id": "eueyfpzg",
                        "text": "`base.var1`",
                        "correct": true,
                        "label": "F"
                      },
                      {
                        "id": "zhtqkeqr",
                        "text": "`base.var2`",
                        "correct": true,
                        "label": "G"
                      },
                      {
                        "id": "zwwhribe",
                        "text": "`base.var3`",
                        "correct": false,
                        "label": "H"
                      },
                      {
                        "id": "cuklfjgk",
                        "text": "`base.Var2`",
                        "correct": true,
                        "label": "I"
                      }
                    ],
                    "actions": [],
                    "_id": "5dbef86e416af30be68d7e29",
                    "text": "Indicate which of the following expressions are allowed inside the `MethodInB` method.",
                    "multipleCorrect": true,
                    "solution": "See above for the many correct answers."
                  }
                ]
              },
              "introduction": "This assignment tests whether you understand the access modifiers `public`, `protected`, and `private`. Given are the following class definitions:\n\n\n```csharp\nclass A\n{\n    public float var1;\n    protected int var2;\n    private bool var3;\n\n    public int Var2\n    {\n        get { return var2; }\n        set { if (value > 0) var2 = value; }\n    }\n    \n    public void MethodInA()\n    {\n        ...\n    }\n}\n\nclass B : A\n{\n    public int var4;\n    private int var5;\n    public void MethodInB()\n    {\n        ...\n    }\n```",
              "publicKey": "ofolvrvan2b91imk920w"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df4cf2069bb6",
              "languages": [],
              "searchString": "Inheritance inheritance",
              "moduleId": "5ee733864024df2151069b76",
              "index": 1,
              "title": "Inheritance",
              "description": "",
              "createdAt": "2019-11-03T15:50:13.018Z",
              "updatedAt": "2021-05-03T10:31:16.271Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbef739416af33d738d7e26",
                    "text": "Explain in your own words what *inheritance* is in a C# program. What is the main reason for using inheritance?",
                    "solution": "Inheritance means that you specify that some classes are specific versions of other classes. The main reason is to avoid code duplication: all the shared code will be inside the parent class. This makes your life as a programmer much easier, especially when you have to change things in the code you already have."
                  }
                ]
              },
              "publicKey": "h4z7atnn7d8btq6wz0nh"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024dfe7e2069bb5",
              "languages": [],
              "searchString": "Reading material reading material readingmaterial",
              "moduleId": "5ee733864024df2151069b76",
              "index": 0,
              "title": "Reading material",
              "description": "",
              "createdAt": "2019-11-01T10:02:09.834Z",
              "updatedAt": "2021-05-03T10:31:16.355Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbef707416af348848d7e24",
                    "text": "Please read *Chapter 10: Organizing game objects* from the textbook *Learning C# by Programming Games*."
                  }
                ]
              },
              "publicKey": "3yukn4v7cpnk4cuugwwb"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df368f069bb9",
              "languages": [],
              "searchString": "Type checking type checking typechecking",
              "moduleId": "5ee733864024df2151069b76",
              "index": 4,
              "title": "Type checking",
              "description": "",
              "createdAt": "2019-11-03T16:17:35.610Z",
              "updatedAt": "2021-05-03T10:31:16.438Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dbefdb3416af3028a8d7e31",
                    "text": "Are the types of expressions checked during the compilation phase, or when the program is running? There is a exception to this rule. In which case is this? And why is that exception necessary?",
                    "solution": "Types are mostly checked during the compilation phase. The compiler has to check that you are using data types correctly. Here’s an example to prove it:\n\n```csharp\nclass A {...}\nclass B : A {...}\nclass C : A {...}\nclass Test\n{\n    void Main()\n    {\n        A a;\n        B b;\n        a = new B(); // this is allowed because B is a subclass of A\n        b = new A(); // this is not allowed: compiler error\n        b = a;       // also not allowed: compiler error\n        b = (B)a;    // this is allowed!\n    }\n}\n```\n\nWith the cast in the final instruction, you indicate (as a programmer) that you know that the assignment is safe. During run-time, there will be a final check to determine if the variable `a` indeed contains an object of type `B`. This check cannot be done at compile time, because (in theory) the variable `a` could also store an object of type `C`, which cannot be cast to a `B`."
                  }
                ]
              },
              "isOptional": true,
              "difficulty": 4,
              "publicKey": "p8c1dx348k1p7149slcd"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df7899069bba",
              "languages": [],
              "searchString": "Reading material reading material readingmaterial",
              "moduleId": "5ee733864024df7884069b77",
              "index": 0,
              "title": "Reading material",
              "description": "",
              "createdAt": "2019-11-01T10:02:09.834Z",
              "updatedAt": "2021-05-03T10:31:15.424Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc01976416af37b7c8d7e34",
                    "text": "Please read *Chapter 11: Finishing the game* from the textbook *Learning C# by Programming Games*."
                  }
                ]
              },
              "publicKey": "2bmeac6092ebxnei0pbf"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df1931069bbe",
              "languages": [],
              "searchString": "Extending the Painter game extending the painter game extendingthepaintergame",
              "moduleId": "5ee733864024df7884069b77",
              "index": 4,
              "title": "Extending the Painter game",
              "description": "",
              "createdAt": "2019-11-04T12:49:29.061Z",
              "updatedAt": "2021-05-03T10:31:15.961Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc01e73416af369ec8d7e41",
                    "text": "This challenge uses the Painter game as a basis. Here are a few suggestions of how you could make the Painter game more interesting. These are open programming exercises, so there’s not one correct solution. Be as creative as you want! Have fun and don’t be afraid to challenge yourself!\n\n* (\\*) Extend the game so that it costs points to shoot a ball. This challenges the player to use only as few shots as possible.\n* (\\*\\*) Extend the `ChooseRandomColor` method of `PaintCan` so that a paint can always receives a color that is not the target color. In other words, change the game so that all paint cans must be recolored by the player.\n* (\\*\\*\\*) Change the game so that the movement of the ball can be affected by a wind parameter. The wind can have a direction (left or right) and a magnitude. You can implement this by giving `GameWorld` one extra member variable of type float. Change the ball’s `Update` behavior so that it responds to the wind, but make sure that the game still stays playable! To show the current wind direction to the player, change the rotation of the paint cans as well. Also, make sure that the wind force changes a little bit over time.\n* (\\*\\*\\*\\*\\*) Make a two-player version of the game, where each player controls his/her own cannon. You could make a symmetrical game in which both players have to give the paint cans the right color, and the player that colors the most paint cans correctly wins the game. You could also make it an *asymmetrical game*, where the goal of one player is to correctly paint as many cans as possible, and the other player’s goal is to obstruct the first player as much as possible."
                  }
                ]
              },
              "publicKey": "6lmg5d5ywgydol6m3mmh"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df07af069bbd",
              "languages": [],
              "searchString": "Cuneiform cuneiform",
              "moduleId": "5ee733864024df7884069b77",
              "index": 3,
              "title": "Cuneiform",
              "description": "",
              "createdAt": "2019-11-04T12:39:37.912Z",
              "updatedAt": "2021-05-03T10:31:16.034Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc01c1b416af303d48d7e3d",
                    "text": "In this advanced question, you’ll create a method that uses loops and strings to convert a number to so-called ‘cuneiform notation’."
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc01c2d416af31b858d7e3e",
                    "text": "Write a method `Stripes` with a number as a parameter (you may assume that this parameter is $0$ or larger). The method should give as a result a string with as many vertical dashes as the parameter indicates. For example, the call `this.Stripes(5)` results in `\"|||||\"`.",
                    "programmingLanguage": "csharp",
                    "solution": "```csharp\nstring Stripes(int n)\n{\n    string s = \"\";\n    for (int t=0; t<n; t++)\n    s += \"|\";\n    return s;\n}\n```",
                    "template": "string Stripes(int n)\n{\n    // Fill this in\n}"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc01c74416af34c248d7e3f",
                    "programmingLanguage": "csharp",
                    "text": "Write a method `Cuneiform` with a number as a parameter. You may assume that this parameter will always be $1$ or bigger. The method should give as a result a string containing the number in a cuneiform notation. In that notation, every number is represented by vertical dashes and the digits are separated by a horizontal dash. Horizontal dashes are also placed at the beginning and at the end of the string. Here are a few examples:\n\n* `this.Cuneiform(25)` results in `\"-||-|||||-\"`\n* `this.Cuneiform(12345)` results in `\"-|-||-|||-||||-|||||-\"`\n* `this.Cuneiform(7)` results in `\"-|||||||-\"`\n* `this.Cuneiform(203)` results in `\"-||--|||-\"`\n\n*Hint:* deal with the last digit first and then repeat for the rest of the digits.",
                    "solution": "```csharp\nstring Cuneiform(int x)\n{\n    string s = \"\";\n    while (x > 0)\n    {\n        s = Stripes(x % 10) + \"-\" + s;\n        x = x / 10;\n    }\n    return \"-\" + s;\n}\n```",
                    "template": "string Cuneiform(int x)\n{\n    // Fill this in\n}"
                  }
                ]
              },
              "isOptional": true,
              "difficulty": 4,
              "introduction": "In this advanced assignment, you’ll create a method that uses loops and strings to convert a number to so-called ‘cuneiform notation’.",
              "publicKey": "tw739kqojjguy3rl4xs4"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df2246069bbc",
              "languages": [],
              "searchString": "Type conversions type conversions typeconversions",
              "moduleId": "5ee733864024df7884069b77",
              "index": 2,
              "title": "Type conversions",
              "description": "",
              "createdAt": "2019-11-04T12:36:13.537Z",
              "updatedAt": "2021-05-03T10:31:16.042Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc01b65416af370a98d7e3b",
                    "text": "Suppose that the following declarations have been made:\n\n```csharp\nint x;\nstring s;\ndouble d;\n```\n\nAssume that these three variables have a value, and that the variable of type string represents a number, like `\"13\"`. Now, let’s say we want to do type conversions between these variables. What should you add to the following lines of code, to make this work?",
                    "template": "x = d;\nx = s;\ns = x;\ns = d;\nd = x;\nd = s;",
                    "programmingLanguage": "csharp",
                    "solution": "```csharp\nx = (int)d;\nx = int.Parse(s);\ns = x.ToString();\ns = d.ToString();\nd = x; // no type conversion needed\nd = double.Parse(s);\n```"
                  }
                ]
              },
              "publicKey": "u7iuidegb25uxnk0zuwt"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df75db069bbb",
              "languages": [],
              "searchString": "Methods with loops and strings methods with loops and strings methodswithloopsandstrings",
              "moduleId": "5ee733864024df7884069b77",
              "index": 1,
              "title": "Methods with loops and strings",
              "description": "",
              "createdAt": "2019-11-04T12:29:24.529Z",
              "updatedAt": "2021-05-03T10:31:16.080Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc019b7416af385f28d7e36",
                    "text": "This question lets you work towards a method that uses loops and string concatenation."
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc019bc416af37c248d7e37",
                    "text": "Write a method `ThreeTimes` that returns three concatenated copies of a string passed as a parameter. For example, the method call `ThreeTimes(\"hurray!\")` should result in the string `\"hurray!hurray!hurray!\"`.",
                    "programmingLanguage": "csharp",
                    "solution": "```csharp\nstring ThreeTimes(string s)\n{\n    return s + s + s;\n}\n```",
                    "template": "string ThreeTimes(string s)\n{\n    // Fill this in\n}"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc019fa416af362b18d7e38",
                    "programmingLanguage": "csharp",
                    "text": "Write a method `SixtyTimes` that returns sixty concatenated copies of a string passed as a parameter. Try to limit the number of instructions in that method.\n",
                    "solution": "```csharp\nstring SixtyTimes(string s)\n{\n    string result = \"\";\n    for (int i=0; i<60; i++)\n        result += s;\n    return result;\n}\n```",
                    "template": "string SixtyTimes(string s)\n{\n    // Fill this in\n}"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc01a2c416af32c148d7e39",
                    "text": "Write a method `ManyTimes` that returns a number of concatenated copies of a string passed as a parameter, where that number is also passed as a parameter (you may assume that this number is $0$ or larger). For example, `ManyTimes(\"what?\", 4)` should result in `\"what?what?what?what?\"`.",
                    "programmingLanguage": "csharp",
                    "template": "string ManyTimes(string s, int nr)\n{\n    // Fill this in\n}",
                    "solution": "```csharp\nstring ManyTimes(string s, int nr)\n{\n    string result = \"\";\n    for (int i=0; i<nr; i++)\n        result += s;\n    return result;\n}\n```"
                  }
                ]
              },
              "introduction": "This assignment lets you work towards a method that uses loops and string concatenation.",
              "publicKey": "f1jxn24ejb3000s38qx5"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df479f069bc1",
              "languages": [],
              "searchString": "Side-scrolling games side-scrolling games side scrolling games sidescrollinggames",
              "moduleId": "5ee733864024dfcb2e069b78",
              "index": 2,
              "title": "Side-scrolling games",
              "description": "",
              "createdAt": "2019-11-04T13:24:56.197Z",
              "updatedAt": "2021-05-03T10:31:15.498Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc026b8416af38d518d7e48",
                    "text": "Many 2D games have a *side-scrolling* component to them. In side-scrolling games, a camera follows the player’s character as it moves through the game world. You see this a lot in *platform games* where the player needs to run and jump his/her way to a goal. When side-scrolling is involved, the game world is no longer scaled to fit on a single screen; instead, the camera always shows a certain *part* of the game world. This makes the conversion between screen and world coordinates more complicated."
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc02847416af3b7dc8d7e4b",
                    "text": "Assume that the game has another member variable, `Vector2 cameraPosition`, which indicates the top-left corner of the camera in world coordinates. How would you need to change the `ScreenToWorld` method below to take this into account?",
                    "template": "Vector2 ScreenToWorld(Vector2 screenPosition)\n{\n    Vector2 viewportTopLeft =\n        new Vector2(GraphicsDevice.Viewport.X, GraphicsDevice.Viewport.Y);\n    float screenToWorldScale = worldSize.X / (float)GraphicsDevice.Viewport.Width;\n    return (screenPosition - viewportTopLeft) * screenToWorldScale;\n}",
                    "programmingLanguage": "csharp",
                    "solution": "At the very least, the `ScreenToWorld` method should add `cameraPosition` to the final result. After all, this method currently calculates world coordinates relative to the camera’s top-left corner. And now that this top-left corner can have a different position than (0, 0), you should add it to the final position that you calculate. So, you should turn the final line of `ScreenToWorld` into this:\n\n```csharp\nreturn (screenPosition - viewportTopLeft) * screenToWorldScale + cameraPosition;\n```\n\nBut this version is probably incomplete: it assumes that the world is (still) scaled to fit on the screen. So, whenever the camera is not at (0, 0), part of the screen will show a blank background. Let’s move on to the next for the full version."
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc0278b416af397798d7e4a",
                    "text": "Now assume that the camera can also zoom in and out. Instead of a single position, there’s now a `Rectangle` member variable `cameraRectangle,` that describes the area of the game world that is currently shown on the screen. How would you need to change the `ScreenToWorld` method below now?",
                    "template": "Vector2 ScreenToWorld(Vector2 screenPosition)\n{\n    Vector2 viewportTopLeft =\n        new Vector2(GraphicsDevice.Viewport.X, GraphicsDevice.Viewport.Y);\n    float screenToWorldScale = worldSize.X / (float)GraphicsDevice.Viewport.Width;\n    return (screenPosition - viewportTopLeft) * screenToWorldScale;\n}",
                    "programmingLanguage": "csharp",
                    "solution": "When the camera’s view is described by a full `Rectangle`, one more thing changes. When computing `screenToWorldScale`, we should take into account that the camera shows only `cameraRectangle.Width` by `cameraRectangle.Height` world units on the screen, instead of the full game world. If we assume that the aspect ratio of `cameraRectangle` is always okay (that is: the game world does not get distorted horizontally or vertically), using `Width` is enough:\n\n```csharp\nVector2 ScreenToWorld(Vector2 screenPosition)\n{\n    Vector2 viewportTopLeft =\n        new Vector2(GraphicsDevice.Viewport.X, GraphicsDevice.Viewport.Y);\n    Vector2 cameraTopLeft = new Vector2(cameraRectangle.X, cameraRectangle.Y);\n    float screenToWorldScale =\n        cameraRectangle.Width / (float)GraphicsDevice.Viewport.Width;\n    return (screenPosition - viewportTopLeft) * screenToWorldScale + cameraTopLeft;\n}\n```"
                  }
                ]
              },
              "isOptional": true,
              "difficulty": 4,
              "introduction": "Many 2D games have a *side-scrolling* component to them. In side-scrolling games, a camera follows the player’s character as it moves through the game world. You see this a lot in *platform games* where the player needs to run and jump his/her way to a goal. When side-scrolling is involved, the game world is no longer scaled to fit on a single screen; instead, the camera always shows a certain *part* of the game world. This makes the conversion between screen and world coordinates more complicated.",
              "publicKey": "4ykqk15bz10razi5sxmc"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df8dfd069bc0",
              "languages": [],
              "searchString": "Coordinate conversion coordinate conversion coordinateconversion",
              "moduleId": "5ee733864024dfcb2e069b78",
              "index": 1,
              "title": "Coordinate conversion",
              "description": "",
              "createdAt": "2019-11-04T13:22:45.772Z",
              "updatedAt": "2021-05-03T10:31:16.318Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc0262d416af341848d7e46",
                    "text": "What is the difference between *screen* coordinates and *world* coordinates? When do you need to convert between these two types? Try to give an explanation in your own words.",
                    "solution": "Screen coordinates indicate a pixel position on the screen. World coordinates indicate a position in the game world. These two coordinate systems may be the same in simple games, but they can be different if your game needs to be adapted to different screen sizes, or if your game has a camera that can zoom and/or pan.\n\nConversion from world to screen coordinates needs to happen when you draw the game world on the screen. Conversion from screen to world coordinates needs to happen when you handle user interaction, such as mouse clicks."
                  }
                ]
              },
              "publicKey": "5ler8fqv4j7vk4szllpn"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df7e05069bbf",
              "languages": [],
              "searchString": "Reading material reading material readingmaterial",
              "moduleId": "5ee733864024dfcb2e069b78",
              "index": 0,
              "title": "Reading material",
              "description": "",
              "createdAt": "2019-11-01T10:02:09.834Z",
              "updatedAt": "2021-05-03T10:31:16.382Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc0204f416af334668d7e44",
                    "text": "Please read *Chapter 12: Dealing with different screen sizes* from the textbook *Learning C# by Programming Games*."
                  }
                ]
              },
              "publicKey": "lc0rcekuc5wyoicx8g3m"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024dfe1b8069bc8",
              "languages": [],
              "searchString": "Searching in arrays searching in arrays searchinginarrays",
              "moduleId": "5ee733864024df1a0f069b79",
              "index": 6,
              "title": "Searching in arrays",
              "description": "",
              "createdAt": "2019-11-04T15:12:43.836Z",
              "updatedAt": "2021-05-03T10:31:15.478Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc03ff1416af3d6b68d7e62",
                    "text": "In this assignment, you’ll write several methods that each take an array of `double`s as a parameter. You can assume the array is not empty."
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc0404a416af3109f8d7e66",
                    "programmingLanguage": "csharp",
                    "template": "double Largest(double[] a)\n{\n    // Fill this in\n}",
                    "text": "Write a method `Largest` that returns the largest value that occurs in the array.",
                    "solution": "```csharp\ndouble Largest(double[] a)\n{\n    double result = a[0];\n    for (int t=1; t<a.Length; t++)\n        if (a[t] > result)\n            result = a[t];\n    return result;\n}\n```"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc04047416af31c3b8d7e65",
                    "programmingLanguage": "csharp",
                    "template": "double IndexLargest(double[] a)\n{\n    // Fill this in\n}",
                    "text": "Write a method `IndexLargest` that returns the *array index* of the largest value in the array. If this largest value occurs more than once in the array, the method should return the index of the first occurrence.",
                    "solution": "```csharp\ndouble IndexLargest(double[] a)\n{\n    int result = 0;\n    for (int t=1; t<a.Length; t++)\n        if (a[t] > a[result])\n            result = t;\n    return result;\n}\n```"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc04044416af386368d7e64",
                    "programmingLanguage": "csharp",
                    "template": "double IndexOf(double[] a, double val)\n{\n    // Fill this in\n}",
                    "text": "Write a method `IndexOf` that takes two parameters: an array of `double`s and another `double` value. This method should return the array index at which the given `double` value occurs for the first time. For example, given the following array:\n\n```\ndouble[] values = {9,12,9,7,12,7,8,25,7};\n```\n\nthe method call `IndexOf(values, 12)` should return the value $1$, because the number $12$\nfirst occurs at index $1$ of the array.",
                    "solution": "This is basically the `FirstPosition` method that you wrote for strings a few assignments ago.\n\n```csharp\ndouble IndexOf(double[] a, double val)\n{\n    for (int t=0; t<a.Length; t++)\n        if (a[t] == val)\n            return t;\n    return -1;\n}\n```"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc0400f416af3008f8d7e63",
                    "programmingLanguage": "csharp",
                    "template": "int HowManySmallest(double [] a)\n{\n    // Fill this in\n}",
                    "text": "Write a method `HowManySmallest` that returns how often the smallest value of the array occurs inside that array. For example, given the following array:\n\n```\ndouble[] values = {9,12,9,7,12,7,8,25,7};\n```\n\nthe method call `HowManySmallest(values)` should return the value 3, because the smallest value (7) occurs three times in the array.",
                    "solution": "This one may be a bit tricky to get right. Keep track of the smallest number and how often you’ve found it. Whenever you find a number that is even smaller, restart your counting.\n\n```csharp\nint HowManySmallest(double [] a)\n{\n    int result = 1;\n    double smallest = a[0];\n    for (int t=1; t<a.Length; t++)\n    {\n        if (a[t] < smallest)\n        {\n            result = 1;\n            smallest = a[t];\n        }\n        else if (a[t] == smallest)\n            result++;\n    }\n    return result;\n}\n```"
                  }
                ]
              },
              "introduction": "In this assignment, you’ll write several methods that each take an array of `double`s as a parameter. You can assume the array is not empty.",
              "publicKey": "ac4fjq63th9f10mcrp9r"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024dfea7e069bc3",
              "languages": [],
              "searchString": "Lists lists",
              "moduleId": "5ee733864024df1a0f069b79",
              "index": 1,
              "title": "Lists",
              "description": "",
              "createdAt": "2019-11-04T13:54:14.213Z",
              "updatedAt": "2021-05-03T10:31:15.517Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc02d92416af372f28d7e51",
                    "text": "Consider the following code:\n\n```csharp\nList<int> numbers = new List<int>();\nnumbers.Add(5);\nnumbers.Add(4);\nnumbers.Add(3);\nnumbers.Add(2);\nnumbers.Add(1);\nnumbers.RemoveAt(0);\nnumbers.RemoveAt(1);\nnumbers.RemoveAt(2);\n```\n\nWhat does the list `numbers` look like at the end of these instructions? Go over the instructions one by one, and keep track of the contents of the list as you go along.",
                    "solution": "After the five insertions, the list contains `5,4,3,2,1`.\n\nAfter the first removal, the list contains `4,3,2,1` (we’ve removed the first element).\n\nAfter the second removal, the list contains `4,2,1` (we’ve removed the second element).\n\nAfter the third removal, the list contains `4,2` (we’ve removed the third element)."
                  }
                ]
              },
              "publicKey": "dqi7e21r6cf6rs21vgt5"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df21b2069bc9",
              "languages": [],
              "searchString": "Sorting and searching sorting and searching sortingandsearching",
              "moduleId": "5ee733864024df1a0f069b79",
              "index": 7,
              "title": "Sorting and searching",
              "description": "",
              "createdAt": "2019-11-04T15:46:41.934Z",
              "updatedAt": "2021-05-03T10:31:15.786Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc047e8416af3832a8d7e68",
                    "text": "In this assignment, you’ll use the solution of the previous assignment to do more advanced things. *Warning:* this is a difficult exercise! It’s actually more related to data structures and algorithms, and not so much to programming."
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc04815416af3997d8d7e69",
                    "programmingLanguage": "csharp",
                    "text": "Write a method `Sort` that takes an array of `double`s as input, and returns an array in which the values of the input array have been *sorted from smallest to largest*.\n\n*Hint:* First find the largest value in the array, using `IndexLargest` from the previous exercise. Swap this value with the value at the end of the array. After doing that, the largest value is already and the end of the array where it belongs. Then, find the largest value in the rest of the array and swap that value with the second-to-last value in the array. Continue like this until the entire array has been sorted.",
                    "solution": "It’s useful to first create a variant of `IndexLargest` with a second parameter, indicating\nthe array index at which the search should stop:\n\n```csharp\nint IndexLargest(double [] a, int n)\n{\n    int result = 0;\n    for (int t=1; t<n; t++)\n        if (a[t] > a[result])\n            result = t;\n    return result;\n}\n```\n\nWith this method, you can implement Sort as follows:\n\n```csharp\nvoid Sort(double [] a)\n{\n    for (int t=a.Length; t>0; t--)\n    {\n        int p = IndexLargest(a,t);\n        double backup = a[t-1];\n        a[t-1] = a[p];\n        a[p] = backup;\n    }\n}\n```\n\nThis way of sorting is called *bubble sort*, because the array elements are shifted (‘bubbled’) one by one to the right position. There are many other ways to sort an array (including more efficient ways!), but discussing that would go too far for this book.",
                    "template": "void Sort(double [] a)\n{\n    // Fill this in\n}"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc04885416af3fe5d8d7e6a",
                    "programmingLanguage": "csharp",
                    "text": "If you know that an array is already sorted, it is possible to create a smarter version of the `IndexOf` method (for finding a certain value in an array).\n\nInstead of going through the whole array from start to finish, you can now start by looking at the *middle element* of the array. If that element is smaller than the value you’re looking for, you know for sure that the left half of the array cannot contain your value either (because the left half contains only smaller numbers). So you can continue by looking at the *right half* of the array. But if the middle element is larger than (or equal to) the value you’re looking for, you need to look further at the *left half* of the array. You can continue like this (splitting the interesting part of the array in half) until you’ve found the correct value, or until you’re sure that the desired value does not occur in the array. Searching like this is much more efficient than going through the entire array (but it only works if the array is sorted!).\n\nWrite this improved `IndexOf` method. Use two integers to keep track of the boundaries of the piece of array that you’re searching in.",
                    "solution": "If you follow the question’s instructions very closely, you should end up with something like this:\n\n```csharp\nint IndexOf(double [] a, double x)\n{\n    int low = 0;\n    int high = a.Length;\n    while (high > low)\n    {\n        int mid = (low+high)/2;\n        if (a[mid]==x)\n            return mid;\n        else if (a[mid]<x)\n            low = mid+1;\n        else\n            high = mid;\n    } \n    return -1;\n}\n```\n\nThis way of searching is called *binary search*, because you always look at the middle element and then decide between one of the two halves (which is a ‘binary’ decision). If you think this was an interesting puzzle, have you considered a career in computer science?",
                    "template": "int IndexOf(double [] a, double x)\n{\n    // Fill this in\n}"
                  }
                ]
              },
              "difficulty": 4,
              "isOptional": true,
              "introduction": "In this assignment, you’ll use the solution of the previous assignment to do more advanced things. *Warning:* this is a difficult exercise! It’s actually more related to data structures and algorithms, and not so much to programming.",
              "publicKey": "cc593ptib6o1bzv2vbv9"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df1c0a069bc4",
              "languages": [],
              "searchString": "Methods with arrays methods with arrays methodswitharrays",
              "moduleId": "5ee733864024df1a0f069b79",
              "index": 2,
              "title": "Methods with arrays",
              "description": "",
              "createdAt": "2019-11-04T13:56:26.228Z",
              "updatedAt": "2021-05-03T10:31:15.970Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc02e16416af3052d8d7e53",
                    "text": "This assignment lets you write methods that loop over arrays."
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc02e1b416af36a508d7e54",
                    "programmingLanguage": "csharp",
                    "text": "Write a method `CountZeros` that has an array of integers as its parameter. The method should return the number of zeros in the array.",
                    "solution": "```csharp\nint CountZeros(int[] arr)\n{\n    int counter = 0;\n    for (int i=0; i<arr.Length; i++)\n        if (arr[i] == 0)\n            counter++;\n    return counter;\n}\n```",
                    "template": "int CountZeros(int[] arr)\n{\n    // Fill this in\n}"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc02e35416af384d38d7e55",
                    "programmingLanguage": "csharp",
                    "text": "Write a method `AddArrays` that has two integer arrays as its parameters. You may assume that both arrays have the same length. The method should return another array of that length, where each value is the sum of the values of the input arrays. So, for each position `i`, the result array should contain the sum of element `i` of the first array and element `i` of the second array.\n\nFor example, given `int[] array1 = {0, 3, 8, -4}` and `int[] array2 = {10, 2, -8, 8}`, the result of the method call `AddArrays(array1, array2)` will be another array with the contents `{10, 5, 0, 4}`.",
                    "template": "int[] AddArrays(int[] arr1, int[] arr2)\n{\n    // Fill this in\n}",
                    "solution": "```csharp\nint[] AddArrays(int[] arr1, int[] arr2)\n{\n    int[] res = new int[arr1.Length];\n    for (int i=0; i<arr1.Length; i++)\n        res[i] = arr1[i] + arr2[i];\n    return res;\n}\n```"
                  }
                ]
              },
              "introduction": "This assignment lets you write methods that loop over arrays.",
              "publicKey": "w9cqgk39nbkuv5targm3"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df4eb4069bc6",
              "languages": [],
              "searchString": "More string methods more string methods morestringmethods",
              "moduleId": "5ee733864024df1a0f069b79",
              "index": 4,
              "title": "More string methods",
              "description": "",
              "createdAt": "2019-11-04T14:11:46.721Z",
              "updatedAt": "2021-05-03T10:31:16.070Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc031b9416af33bf28d7e5b",
                    "text": "Actually, the `String` class already has many built-in methods, such as `ToLower`. In this assignment, we’ll look at a few other useful methods of the `String` class — but again, you will write them yourself."
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc03204416af34f4c8d7e5e",
                    "programmingLanguage": "csharp",
                    "text": "Write a method `FirstPosition` which has two parameters: a `string` and a `char`. The method should return the position in the string at which the `char` parameter first occurs. If the character doesn’t occur in the string, the method should return -1. For example:\n\n* `FirstPosition(\"wouter\", 'j')` should return -1.\n* `FirstPosition(\"arjan\", 'j')` should return 2.\n* `FirstPosition(\"jeroen\", 'j')` should return 0.",
                    "solution": "Here’s a version with a while loop:\n\n```csharp\nint FirstPosition(string s, char c)\n{\n    int pos = 0;\n    while (pos < s.Length)\n    {\n        if (s[pos] == c)\n            return pos;\n        pos++;\n    }\n    return -1;\n}\n```\n\nOf course, you can do it with a for loop as well:\n\n```csharp\nint FirstPosition(string s, char c)\n{\n    for (int pos=0; pos < s.Length; pos++)\n    {\n        if (s[pos] == c)\n            return pos;\n    }\n    return -1;\n}\n```",
                    "template": "int FirstPosition(string s, char c)\n{\n    // Fill this in\n}"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc03202416af3c8888d7e5d",
                    "programmingLanguage": "csharp",
                    "text": "Write a method `Replace` that takes three parameters: a string and two characters. This method should return a new string in which each occurrence of the first `char` has been replaced by the second `char`. For example:\n\n* `Replace(\"Good morning\", 'o', 'u')` should return `\"Guud murning\"`.\n* `Replace(\"Choose your character\", 'o', 'e')` should return `\"Cheese yeur character\"`.\n* `Replace(\"A+2+#?\", '+', '9')` should return `\"A929#?\"`.",
                    "template": "public string Replace(string s, char x, char y)\n{\n    // Fill this in\n}",
                    "solution": "```csharp\npublic string Replace(string s, char x, char y)\n{\n    string result = \"\";\n    for (int pos = 0; pos < s.Length; pos++)\n    {\n        if (s[pos]==x)\n            result += y;\n        else\n            result += s[pos];\n    }\n    return result;\n}\n```"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc031f7416af310d38d7e5c",
                    "programmingLanguage": "csharp",
                    "text": "Write a method `EndsWith` that takes two parameters of type `string`. This method should return whether or not the first string ends with the second string. For example:\n\n* `EndsWith(\"All your base are belong to us\", \"long to us\")` should return `true`.\n* `EndsWith(\"Can you hear the echo?\", \"the echo?\")` should return `true`.\n* `EndsWith(\"abcdefg\", \"abcdefghijk\")` should return `false`.\n\nIn your implementation, you’re allowed to use existing methods in the `string` class. For an extra challenge, try to create a version that does not use the `Substring` method.",
                    "template": "public bool EndsWith(string full, string part)\n{\n    // Fill this in\n}",
                    "solution": "Here’s our solution. If `part` is longer than `full`, then we know the answer immediately. Otherwise, we loop over all characters in `part` and check if they match the corresponding character in `full`. Make sure to use the right offset value for this!\n\n```csharp\npublic bool EndsWith(string full, string part)\n{\n    if (part.Length > full.Length)\n        return false;\n    int offset = full.Length - part.Length;\n    for (int pos=0; n<part.Length; pos++)\n    {\n        if (part[pos] != full[pos + offset])\n            return false;\n    }\n    return true;\n}\n```"
                  }
                ]
              },
              "introduction": "Actually, the `String` class already has many built-in methods, such as `ToLower`. In this assignment, we’ll look at a few other useful methods of the `String` class — but again, you will write them yourself.",
              "publicKey": "loytbbydukjs4vvnlm15"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df7f0a069bc2",
              "languages": [],
              "searchString": "Reading material reading material readingmaterial",
              "moduleId": "5ee733864024df1a0f069b79",
              "index": 0,
              "title": "Reading material",
              "description": "",
              "createdAt": "2019-11-01T10:02:09.834Z",
              "updatedAt": "2021-05-03T10:31:16.088Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc02ad8416af30d248d7e4f",
                    "text": "Please read *Chapter 13: Arrays and collections* from the textbook *Learning C# by Programming Games*."
                  }
                ]
              },
              "publicKey": "qfips0n8q75blzrb9fep"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024dfd658069bc7",
              "languages": [],
              "searchString": "Collections collections",
              "moduleId": "5ee733864024df1a0f069b79",
              "index": 5,
              "title": "Collections",
              "description": "",
              "createdAt": "2019-11-04T15:06:18.747Z",
              "updatedAt": "2021-05-03T10:31:16.345Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc03e72416af38cde8d7e60",
                    "programmingLanguage": "csharp",
                    "text": "Write a method `RemoveDuplicates` which receives as `List<int>` as its parameter. The method should remove all duplicate numbers in the given list. For example, if the list contains the numbers `0, 1, 3, 2, 1, 5, 2`, this method should change the list so that it only contains `0, 1, 3, 2, 5`.\n\nWatch out: this method should change the input list itself, and *not* return a whole new list.",
                    "solution": "For this question, we use a helper method `IndexOf` from the `List` class. This helper method is pretty easy to program yourself, though: it’s essentially the `FirstPosition` method of the previous assignment, and the `IndexOf` method that will appear in the next assignment.\n\n```csharp\nvoid RemoveDuplicates(List<int> list)\n{\n    for (int i=list.Count-1; i>=0; i--)\n    {\n        int pos = list.IndexOf(list[i]);\n        if (pos != -1 && pos < i)\n            list.RemoveAt(i);\n    }\n}\n```\n\nThis version of `RemoveDuplicates` is not extremely efficient, by the way. Can you see why? And can you think of a faster version?",
                    "template": "void RemoveDuplicates(List<int> list)\n{\n    // Fill this in\n}"
                  }
                ]
              },
              "publicKey": "vv6iiwiz2yuualadz2ds"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df9727069bc5",
              "languages": [],
              "searchString": "Uppercase and lowercase uppercase and lowercase uppercaseandlowercase",
              "moduleId": "5ee733864024df1a0f069b79",
              "index": 3,
              "title": "Uppercase and lowercase",
              "description": "",
              "createdAt": "2019-11-04T14:03:54.602Z",
              "updatedAt": "2021-05-03T10:31:16.421Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc02fcf416af3ed608d7e57",
                    "text": "In Chapter 11, you’ve seen a Boolean expression that checks whether a `char` value represents an uppercase letter. Let’s apply this to entire strings."
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc02fed416af3171b8d7e58",
                    "text": "Write a method `IsAllUppercase` that takes a string as an argument, and that returns whether or not this string consists completely of uppercase characters.",
                    "programmingLanguage": "csharp",
                    "solution": "Here’s a method that checks if all characters in a string are uppercase letters. Note that we can stop as soon as we’ve found a wrong character!\n\n```csharp\nbool IsAllUppercase(string str)\n{\n    for (int n=0; n<str.Length; n++)\n    {\n        char c = str[n];\n        if (c < 'A' || c > 'Z')\n            return false;\n    }\n    return true;\n}\n````",
                    "template": "bool IsAllUppercase(string str)\n{\n    // Fill this in\n}"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc0300d416af340e28d7e59",
                    "programmingLanguage": "csharp",
                    "text": "Write a method `ToLowercase` that takes a string as an argument, and that returns a new string in which all uppercase letters have been replaced by their lowercase version. For example, the method call `ToLowercase(\"HELLO World! :)\")` should return the string `\"hello world! :)\"`. *Hint:* Loop over the characters in the input string, and build your result one character at a time. Be aware that not all characters are letters from the alphabet!",
                    "template": "string ToLowercase(string str)\n{\n    // Fill this in\n}",
                    "solution": "To turn an uppercase letter into a lowercase letter, you should ‘move it forward’ in the ASCII table, by adding the difference between lowercase and uppercase letters. This difference is a fixed number, and you can calculate it as `'a' - 'A'`. Combined with a loop, we get the following:\n\n```csharp\nstring ToLowercase(string str)\n{\n    string result;\n    for (int n=0; n<str.Length; n++)\n    {\n        char c = str[n];\n        if (c >= 'A' && c <= 'Z')\n            result += (char)(c + ('a' - 'A'));\n        else\n            result += c;\n    }\n    return result;\n}\n```\n\nNote that a character simply stays the same if it is not an uppercase letter."
                  }
                ]
              },
              "introduction": "In Chapter 11, you’ve seen a Boolean expression that checks whether a `char` value represents an uppercase letter. Let’s apply this to entire strings.",
              "publicKey": "kqlb9nlsqkap2lcfb37x"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df4f1c069bca",
              "languages": [],
              "searchString": "Reading material reading material readingmaterial",
              "moduleId": "5ee733864024df7104069b7a",
              "index": 0,
              "title": "Reading material",
              "description": "",
              "createdAt": "2019-11-01T10:02:09.834Z",
              "updatedAt": "2021-05-03T10:31:15.526Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc1708c416af3cedb8d7e75",
                    "text": "Please read *Chapter 14: Game objects in a structure* from the textbook *Learning C# by Programming Games*."
                  }
                ]
              },
              "publicKey": "onwo3hr22fuamylzty0x"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024dfd3cf069bcc",
              "languages": [],
              "searchString": "Global positions without recursion global positions without recursion globalpositionswithoutrecursion",
              "moduleId": "5ee733864024df7104069b7a",
              "index": 2,
              "title": "Global positions without recursion",
              "description": "",
              "createdAt": "2019-11-05T13:56:52.495Z",
              "updatedAt": "2021-05-03T10:31:15.553Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc17fb6416af34c548d7e79",
                    "programmingLanguage": "csharp",
                    "text": "The `GlobalPosition` property currently uses recursion to go all the way to the top of the game-object hierarchy. You could implement the same property *without* using recursion, by replacing the recursive part by a `while` loop.\n\nWrite this non-recursive version of the `GlobalPosition` property.",
                    "solution": "With a `while` loop, the idea is to add up the `LocalPosition` of all objects that lie (hierarchically)\nbetween this object and the root. Use a helper variable that points to the object you’re currently looking at, and keep using the Parent property to go up and up:\n\n```csharp\nVector2 GlobalPosition\n{\n    get\n    {\n        Vector2 result = LocalPosition;\n        GameObject p = Parent;\n        while (p != null)\n        {\n            result += p.LocalPosition;\n            p = p.Parent;\n        }\n    }\n}\n```\n\nWatch out: do not use `GlobalPosition` inside `GlobalPosition`! This would make the property (sort of) recursive again, which is not what we asked for in this question.",
                    "template": "Vector2 GlobalPosition\n{\n    get\n    {\n        // Fill this in\n    }\n}"
                  }
                ]
              },
              "publicKey": "536vmje1w6ob3t7d28x1"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df05f6069bce",
              "languages": [],
              "searchString": "Recursive reversal recursive reversal recursivereversal",
              "moduleId": "5ee733864024df7104069b7a",
              "index": 4,
              "title": "Recursive reversal",
              "description": "",
              "createdAt": "2019-11-05T14:33:29.604Z",
              "updatedAt": "2021-05-03T10:31:15.584Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc18847416af333638d7e7f",
                    "text": "In this assignment you will write a recursive method `string Reverse(string s)` that returns the reversed version of a given string. For example, the method call `Reverse(\"Hello World!\")` should return the string `\"!dlroW olleH\"`."
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc18885416af3db4b8d7e80",
                    "text": "For a first version, you can use the `Substring` method from the `String` class.",
                    "programmingLanguage": "csharp",
                    "solution": "Assume that the string `s` has at least 2 characters. Let’s use the term ‘middle part’ for the part of `s` that excludes the first and last character. The reversed version of `s` can be described recursively as: the last character of `s`, plus the reversed version of the middle part, plus the first character of `s`.\n\nIf `s` has zero or one characters, then the reversed version of `s` is simply `s` itself! This is the base case of our recursion. In total, this gives the following method:\n\n```csharp\nstring Reverse(string s)\n{\n    if (s.Length < 2)\n        return s;\n    string middlePart = s.Substring(1, s.Length-2);\n    return s[s.Length-1] + Reverse(middlePart) + s[0];\n}\n```\n\nNote that you could also just place the last character in front and reverse the rest.",
                    "template": "string Reverse(string s)\n{\n    // Fill this in\n}"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc188a3416af3c6f28d7e81",
                    "programmingLanguage": "csharp",
                    "text": "If you’re up for a challenge, try writing a version that doesn’t use substrings. *Hint:* You can give your method extra `int` parameters that represent the current position in the input string. The recursive calls will only change those `int` parameters and not the `string` parameter.",
                    "template": "string Reverse2(string s, int first, int last)\n{\n    // Fill this in\n}\n\nstring Reverse(string s)\n{\n    return Reverse2(s, 0, s.Length-1);\n}",
                    "solution": "The previous version of `Reverse` uses the `Substring` method in every recursive step, so it basically makes many copies of (smaller and smaller parts of) the input string. To prevent this, give the Reverse method two `int` parameters that denote the index of the first and last character that we’re currently looking at. Instead of passing a smaller string to the recursive call, we just make the values of first and last grow towards each other. The recursive part looks like this: \n\n```csharp\nreturn s[last] + Reverse2(s, first+1, last-1) + s[first];\n```\n\nOne annoying detail is that we now have two base cases. If first and last are exactly the same, then we’re interested in a substring of length 1, and we should return exactly that character. If first is larger than last, then we’ve handled all characters of `s`, and we should return an empty string. Here is the full recursive method:\n\n```csharp\nstring Reverse2(string s, int first, int last)\n{\n    if (first > last)\n        return \"\";\n    if (first == last)\n        return s[first].ToString();\n    return s[last] + Reverse2(s, first+1, last-1) + s[first];\n}\n```"
                  }
                ]
              },
              "isOptional": true,
              "difficulty": 4,
              "introduction": "In this assignment you will write a recursive method `string Reverse(string s)` that returns the reversed version of a given string. For example, the method call `Reverse(\"Hello World!\")` should return the string `\"!dlroW olleH\"`.",
              "publicKey": "bad67t1kev5dj1vn6jkm"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df310a069bcf",
              "languages": [],
              "searchString": "Recursive searching recursive searching recursivesearching",
              "moduleId": "5ee733864024df7104069b7a",
              "index": 5,
              "title": "Recursive searching",
              "description": "",
              "createdAt": "2019-11-05T14:51:13.277Z",
              "updatedAt": "2021-05-03T10:31:15.622Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc18c81416af34d238d7e83",
                    "text": "For this challenging exercise, it’s useful to first do the exercise ‘Sorting and searching’ from the module on Chapter 13, which lets you write a method `int IndexOf(double[] a, double val)` that finds the first position of a value `val` in an array.\n\nNow write a *recursive* version of that method. *Hint:* Give the method extra `int` parameters that indicate the part of the array in which you’re looking.",
                    "solution": "```csharp\nint IndexOfRecursive(double[] a, double val, int low, int high)\n{\n    if (high <= low)\n        return -1;\n    int mid = (low+high)/2;\n    if (a[mid]==x)\n        return mid;\n    if (a[mid]<x)\n        return IndexOfRecursive(a, val, mid+1, high);\n    return IndexOfRecursive(a, val, low, mid);\n}\n\nint IndexOf(double[] a, double val)\n{\n    return IndexOfRecursive(a, val, 0, a.Length);\n}\n```",
                    "template": "int IndexOfRecursive(double[] a, double val, int low, int high)\n{\n    // Fill this in\n}\n\nint IndexOf(double[] a, double val)\n{\n    return IndexOfRecursive(a, val, 0, a.Length);\n}",
                    "programmingLanguage": "csharp"
                  }
                ]
              },
              "isOptional": true,
              "difficulty": 4,
              "publicKey": "jmmojyt6n69ibtk7fx7b"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024dffbf0069bcb",
              "languages": [],
              "searchString": "Hierarchies and hierarchies hierarchies and hierarchies hierarchiesandhierarchies",
              "moduleId": "5ee733864024df7104069b7a",
              "index": 1,
              "title": "Hierarchies and hierarchies",
              "description": "",
              "createdAt": "2019-11-05T12:53:37.389Z",
              "updatedAt": "2021-05-03T10:31:15.694Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc17ed8416af35aab8d7e77",
                    "text": "What is the difference between a *class* hierarchy and a *game-object* hierarchy? For both concepts, give an example that we haven’t already given in this book. Why is it important to *not* confuse one concept with the other?",
                    "solution": "A class hierarchy has to do with *inheritance*: it’s a tree-like structure that shows how classes are subclasses of each other. For example, you could have a `Food` class for describing all kinds of food, and subclasses `Fruit`, `Vegetable`, and so on for the more specific types of food that exist.\n\nA game-object hierarchy has to do with objects containing other objects in a (usually recursive) way. For example, a garage can contain several cars, and each car contains an engine, wheels, and so on.\n\nIt’s a common (beginner’s) mistake to confuse the concepts of inheritance and containment, for example by making `Car` a subclass of `Garage`, and `Wheel` a subclass of `Car`. We’ll leave it to you to imagine the horrible consequences this could have..."
                  }
                ]
              },
              "publicKey": "7219001fwu87xb2akrr4"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df3aa5069bcd",
              "languages": [],
              "searchString": "Loops and recursion loops and recursion loopsandrecursion",
              "moduleId": "5ee733864024df7104069b7a",
              "index": 3,
              "title": "Loops and recursion",
              "description": "",
              "createdAt": "2019-11-05T14:01:20.098Z",
              "updatedAt": "2021-05-03T10:31:15.702Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc180b7416af381f58d7e7b",
                    "text": "Earlier you wrote a method `int Faculty(int n)` that calculates the *factorial* of a number `n`. As a reminder, the factorial of $5$ (often written with an exclamation mark as $5!$) is defined as $5 \\times 4 \\times 3 \\times 2 \\times 1$, which is $120$.\n\nIn this question, you’ll write the same method in a different way. Again, you may assume that the value of `n` is at least $1$."
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc186c7416af3a4598d7e7c",
                    "programmingLanguage": "csharp",
                    "text": "Write the `Factorial` method using a `for` loop from $1$ to `n`. (Note: this is the same question\nas you did before, but it is worth revisiting now).",
                    "solution": "```csharp\nint Factorial(int n)\n{\n    int result = 1;\n    for (int t=1; t<=n; t++)\n        result *= t;\n    return result;\n}\n```",
                    "template": "int Factorial(int n)\n{\n    // Fill this in\n}"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc186f4416af37eae8d7e7d",
                    "programmingLanguage": "csharp",
                    "text": "Write the `Factorial` method using *recursion*. *Hint:* First create a recursive definition of the factorial operator.",
                    "solution": "The key observation here is that $n!$ is the same as $(n-1)! \\times n$. Once you get that far, the recursive version is very similar to `SumRecursive` from this chapter of the book. Have a look at the explanation there if you get confused.\n\n```csharp\nint Factorial(int n)\n{\n    if (n == 1)\n        return n;\n    return Factorial(n-1) * n;\n}\n```",
                    "template": "int Factorial(int n)\n{\n    // Fill this in\n}"
                  }
                ]
              },
              "introduction": "Earlier you wrote a method `int Faculty(int n)` that calculates the *factorial* of a number `n`. As a reminder, the factorial of $5$ (often written with an exclamation mark as $5!$) is defined as $5 \\times 4 \\times 3 \\times 2 \\times 1$, which is $120$.\n\nIn this question, you’ll write the same method in a different way. Again, you may assume that the value of `n` is at least $1$.",
              "publicKey": "rjtc5zi48jztuq36kisv"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df1b64069bd0",
              "languages": [],
              "searchString": "Reading material reading material readingmaterial",
              "moduleId": "5ee733864024df9dd8069b7b",
              "index": 0,
              "title": "Reading material",
              "description": "",
              "createdAt": "2019-11-01T10:02:09.834Z",
              "updatedAt": "2021-05-03T10:31:15.562Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc19a1a416af311608d7e86",
                    "text": "Please read *Chapter 15: Gameplay programming* from the textbook *Learning C# by Programming Games*."
                  }
                ]
              },
              "publicKey": "j4cpo9ubqrri7pyy0s5t"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df6994069bd1",
              "languages": [],
              "searchString": "Playing with a grid playing with a grid playingwithagrid",
              "moduleId": "5ee733864024df9dd8069b7b",
              "index": 1,
              "title": "Playing with a grid",
              "description": "",
              "createdAt": "2019-11-05T15:50:10.689Z",
              "updatedAt": "2021-05-03T10:31:15.602Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc19a3a416af316168d7e88",
                    "text": "In this question, you’ll write the logic of a simple grid-based game. Take a look at the following class that contains a 2D array of integers:\n\n```csharp\nclass GameGrid\n{\n    int[,] numbers;\n    public GameGrid(int width, int height)\n    {\n        numbers = new int[width,height];\n    }\n}\n```"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc19a78416af32e1a8d7e89",
                    "text": "Extend the constructor so that it fills the numbers array with random numbers between 1 and 5.",
                    "template": "public GameGrid(int width, int height)\n{\n    numbers = new int[width,height];\n    // Extend this\n}\n",
                    "programmingLanguage": "csharp",
                    "solution": "In this question, it’s unclear where the game’s `Random` object is. If there is no global version you should create one yourself inside the constructor. Next you fill the grid with a nested loop.\n\n\n```csharp\npublic GameGrid(int width, int height)\n{\n    Random r = new Random();\n    numbers = new int[width,height];\n    for (int x=0; x<width; x++)\n        for (int y=0; y<height; y++)\n            numbers[x,y] = r.Next(1, 6);\n}\n```\n"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc19ba7416af3f0458d7e8a",
                    "text": "Add a method `Increment` that takes a grid position (`Point pos`) as its parameter, and that increases the number at that position by 1. If the result is 6, the number should be lowered to 1 again.",
                    "programmingLanguage": "csharp",
                    "solution": "We’ll assume that `pos` indicates a position that actually exists. (Otherwise, you can add some initial if checks to handle special cases.)\n\n```csharp\nvoid Increment(Point pos)\n{\n    numbers[pos.X, pos.Y]++;\n    if (numbers[pos.X, pos.Y] > 5)\n        numbers[pos.X, pos.Y] = 0;\n}\n```",
                    "template": "void Increment(Point pos)\n{\n    // Fill this in\n}"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc19c2a416af348898d7e8b",
                    "text": "Add a method `AllZeros` that checks whether the grid contains the number 0 in all grid cells. Use `return` to let the method stop as soon as you know the answer.",
                    "programmingLanguage": "csharp",
                    "solution": "```csharp\nbool AllZeros()\n{\n    for (int x=0; x<numbers.GetLength(0); x++)\n        for (int y=0; y<numbers.GetLength(1); y++)\n            if (numbers[x, y] != 0)\n                return false;\n    return true;\n}\n```",
                    "template": "bool AllZeros()\n{\n    // Fill this in\n}"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc19cd2416af396428d7e8c",
                    "text": "Add a method `RemoveIsland` that takes a grid position (`Point pos`) as its parameter. This method should replace the number $n$ at that grid position by a 0. After that, all horizontal and vertical neighbors that store an $n$ should also be replaced by 0. This process should continue until the entire ‘island’ of connected $n$’s has been removed. *Hint:* Use recursion.",
                    "programmingLanguage": "csharp",
                    "solution": "Here, the easiest approach is to use recursion! Set the current grid cell to 0, but keep its old value $n$ as a back-up. If $n$ was already zero, then we’ve already visited this cell, and the recursion should stop here.\n\nIf $n$ was not zero yet, we should check all four neighbors, taking into account that you may have reached the edge of the grid. For every valid neighbor, visit that neighbor recursively by calling `RemoveIsland` for that position. The result looks like this:\n\n```csharp\nvoid RemoveIsland(Point pos)\n{\n    int n = numbers[pos.X, pos.Y];\n    if (n == 0)\n        return;\n    numbers[pos.X, pos.Y] = 0;\n    if (pos.X > 0 && number[pos.X-1, pos.Y] == n)\n        RemoveIsland(new Point(pos.X-1, pos.Y));\n    if (pos.X+1 < numbers.GetLength(0) && number[pos.X+1, pos.Y] == n)\n        RemoveIsland(new Point(pos.X+1, pos.Y));\n    if (pos.Y > 0 && number[pos.X, pos.Y-1] == n)\n        RemoveIsland(new Point(pos.X, pos.Y-1));\n    if (pos.Y+1 < numbers.GetLength(1) && number[pos.X, pos.Y+1] == n)\n        RemoveIsland(new Point(pos.X, pos.Y+1));\n}\n```",
                    "template": "void RemoveIsland(Point pos)\n{\n    // Fill this in\n}"
                  },
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc19f0d416af3c1d38d7e8d",
                    "text": "Now embed this class in a game where the player can use the left mouse button to call `Increment` (on the grid cell that the mouse currently points at), and the right mouse button to call `RemoveIsland`. Make sure that cells with a 0 cannot be clicked. Keep track of how many clicks the player has made. The goal is to fill the grid with zeros in as few clicks as possible."
                  }
                ]
              },
              "introduction": "In this assignment, you’ll write the logic of a simple grid-based game. Take a look at the following class that contains a 2D array of integers:\n\n```csharp\nclass GameGrid\n{\n    int[,] numbers;\n    \n    public GameGrid(int width, int height)\n    {\n        numbers = new int[width,height];\n    }\n}\n```",
              "publicKey": "xy5xm2p7gdcngucofrna"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df324d069bd5",
              "languages": [],
              "searchString": "Other grid-based games other grid-based games other grid based games othergridbasedgames",
              "moduleId": "5ee733864024dfbf31069b7c",
              "index": 3,
              "title": "Other grid-based games",
              "description": "",
              "createdAt": "2019-11-05T16:24:53.656Z",
              "updatedAt": "2021-05-03T10:31:15.544Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc1a260416af387378d7e96",
                    "text": "Below are a few suggestions of other grid-based games that you can now create. For each game, we’ll give you a couple of hints to help you get started.\n\n* **Minesweeper**: a single-player game featuring a grid with randomly placed mines. If the player clicks on a grid cell that contains a mine, the game is over. If the player clicks on an empty cell with at least 1 neighboring mine, that cell will show the number of neighboring mines. If the player clicks on an empty cell with no neighboring mines, an entire ‘island’ of empty cells is revealed. *Hints:* First calculate the number of neighboring mines for each grid cell, but don’t show it to the player yet. For revealing an ‘island’ of empty cells, take a look at the assignment of Chapter 15.\n\n* **Reversi**: a game where two players take turns to add a stone of their color to the grid. A player can ‘capture’ the stones of the opponent by horizontally, vertically, or diagonally enclosing them by his/her own stones. If this happens, the captured stones will switch their color. The game continues until the entire grid is full. Then, the player with the most stones wins. (This game is sometimes also called Othello.) *Hint:* The overall set-up of this game (with players taking turns) is very similar to\nTic-Tac-Toe. Only the game logic is very different.\n\n* **Chess**: another turn-based game for two players, this time with different chess pieces that have different moves. *Hints:* Create a subclass for each type of chess piece, and give them each their own\nversion of a method that checks whether a move is valid. Can you add a hint functionality that shows all possible moves for a piece?\n\n* **Tetris**: the famous puzzle game in which blocks fall down, and players need to stack these up nicely to keep the grid from overflowing. In this game, there’s always one block that’s falling down, and a grid of (possibly broken) blocks that have already fallen. *Hints:* It’s useful to create a separate `Block` class, and to give that class methods for moving and rotating the block. Also consider adding subclasses for the different types of blocks that exists. Finally, it’s useful to not immediately add the falling block to the grid. Only add the block to the grid when it has reached its stopping position."
                  }
                ]
              },
              "isOptional": true,
              "difficulty": 4,
              "publicKey": "44wmxljg3je31eeh6vxo"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df7736069bd4",
              "languages": [],
              "searchString": "Tic-Tac-Toe tic-tac-toe tic tac toe tictactoe",
              "moduleId": "5ee733864024dfbf31069b7c",
              "index": 2,
              "title": "Tic-Tac-Toe",
              "description": "",
              "createdAt": "2019-11-05T16:20:12.351Z",
              "updatedAt": "2021-05-03T10:31:15.571Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc1a142416af33b498d7e94",
                    "text": "With your knowledge of building Jewel Jam, you now have the tools and experience to create lots of other grid-based games. A simple example of such a game is Tic-Tac-Toe. This game features a $3 \\times 3$ grid, and two players take turns to place a cross or a circle in that grid. A player wins if his or her symbol occurs three times in the same row, column, or diagonal. This assignment helps you build this game step by step, but you’ll need to figure out the details yourself. Try to reuse the ‘game engine’ you’ve created so far, and always try to avoid duplicate code as much as possible.\n\n* Start by looking up some nice sprites that you can use for this game. In any case, you’ll need a sprite for the cross and a sprite for the circle.\n* Make a first version of the game that only displays circles or crosses on a $3 \\times 3$ grid on the screen. Here, you can reuse some of the classes that you’ve built for the Jewel Jam game.\n* Next, add player input to the game. When the player clicks in the screen, a cross or circle should appear at that position in the grid. Make sure that players can only click on grid positions that are still free. Also, remember that this is a two-player game where players take turns. Therefore, you should keep track of whose turn it is, so that you can add the right element (cross or circle) to the grid.\n* Next, write the code that checks whether there are three symbols of the same type in a row, column, or diagonal. You can do this by using a couple of `for` loops that check each of the possible combinations. Use this to determine if one of the players has won.\n* Finally, handle the different game states: indicate on the screen whose turn it is, show an overlay if the game has been finished, and (if the game is over) allow the players to restart the game.\n* If you’re up for a challenge, try adding a game mode where a single player plays against the computer. You can start by letting the computer always choose a random non-empty position in the grid. After that, you can try to make the computer player more intelligent. Feel free to search the internet for assistance!"
                  }
                ]
              },
              "publicKey": "cjm4lkdk1aao1ntxbd09"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024dfdcee069bd2",
              "languages": [],
              "searchString": "Reading material reading material readingmaterial",
              "moduleId": "5ee733864024dfbf31069b7c",
              "index": 0,
              "title": "Reading material",
              "description": "",
              "createdAt": "2019-11-01T10:02:09.834Z",
              "updatedAt": "2021-05-03T10:31:15.612Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc19fa7416af347658d7e90",
                    "text": "Please read *Chapter 16: Finishing the game* from the textbook *Learning C# by Programming Games*."
                  }
                ]
              },
              "publicKey": "rsafpxze3skajowgfo6q"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df4087069bd3",
              "languages": [],
              "searchString": "Extending the Jewel Jam game extending the jewel jam game extendingthejeweljamgame",
              "moduleId": "5ee733864024dfbf31069b7c",
              "index": 1,
              "title": "Extending the Jewel Jam game",
              "description": "",
              "createdAt": "2019-11-05T16:14:14.372Z",
              "updatedAt": "2021-05-03T10:31:15.676Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc19fe3416af3a5bf8d7e92",
                    "text": "Here are a few suggestions of things you could add to the Jewel Jam game, ordered from easy to difficult. Again, you’re free to implement these things however you want, and there usually is no such thing as a ‘best’ answer. Good luck, and have fun!\n\n* (\\*) The game is now quite easy: players can get far by simply bashing the arrow keys and the spacebar. To make things more interesting, give the player a penalty whenever there are *no* valid combinations if he/she presses the spacebar. You could give the player negative points, or you could push the jewel cart forward.\n* (\\*\\*) Give the player the option to give all jewels in the grid a new random color. This is useful if the player doesn’t see any valid combinations anymore. Of course, this action should come with a price: for example, you could give negative points again, or only allow a reset if the player has earned enough points since the last reset.\n* (\\*\\*\\*) Add a fourth color of jewels to the game: a *‘rainbow’ color*. This color serves as a ‘wildcard’ that you can interpret as any of the three other colors. This changes how you should check for valid combinations of jewels. Make sure that the rainbow jewels are very rare: don’t add them to the grid too often.\n* (\\*\\*\\*) Add more *visual effects* for when the player scores a valid combination of jewels. For example, you could let the three jewels shrink or fly out of the screen. Note: this will probably mean that a grid of jewels alone is no longer enough. Some jewels will have to ‘stay alive’ a bit longer without being part of the grid.\n* (\\*\\*\\*\\*) Give each jewel a small chance to contain a *power-up*. When a jewel with a power-up gets removed from the grid, a special bonus effect should occur. For example, an entire row or column gets cleared, all jewels of a certain type get removed, or the jewel cart gets pushed back by an extra distance. If a jewel contains a power-up, draw a small icon in the corner of that jewel, so that the player understands what’s going on.\n* (\\*\\*\\*\\*\\*) Add a *hint system* to the game. If the player hasn’t scored any combinations for some time, a ‘hint’ button should appear. When the player presses this button, the game will automatically highlight three jewels in the grid that can form a valid combination. Note: these jewels may not be in the middle column yet! Finding such a combination automatically is pretty difficult. Think carefully about how you implement it."
                  }
                ]
              },
              "publicKey": "0udn6cn95sifbftod37o"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df773e069bda",
              "languages": [],
              "searchString": "Loading game states dynamically loading game states dynamically loadinggamestatesdynamically",
              "moduleId": "5ee733864024df7a3f069b7d",
              "index": 4,
              "title": "Loading game states dynamically",
              "description": "",
              "createdAt": "2019-11-06T09:26:29.087Z",
              "updatedAt": "2021-05-03T10:31:15.638Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc291f0416af344b18d7ea1",
                    "text": "Our example code in the book fills the `GameStateManager` at the very beginning of the game. If you have a game with many game states, this may be a bit too much. It would be nicer if you could add a game state as soon as you need it. For example, there’s no need to load the full options menu if the player never opens it.\n\nHow can you change the code to make this possible?",
                    "solution": "This is not a big change. Nothing’s stopping you from calling `AddGameState` much later in the game! A nice addition would be a helper method that returns if the game state with a given name already exists:\n\n```csharp\nbool GameStateExists(string id)\n{\n    return GetGameState(id) != null;\n}\n```\n\nThat way, you’ll know when you need to call `AddGameState` first.\n\nAnd if you’re on it anyway, it’s a good idea to also allow the unloading of game states, by adding a method `void RemoveGameState(string id)`. Try to fill in the details of this yourself.",
                    "template": ""
                  }
                ]
              },
              "publicKey": "c7ig486nzw2zffzrmybi"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df5b3b069bd6",
              "languages": [],
              "searchString": "Reading material reading material readingmaterial",
              "moduleId": "5ee733864024df7a3f069b7d",
              "index": 0,
              "title": "Reading material",
              "description": "",
              "createdAt": "2019-11-01T10:02:09.834Z",
              "updatedAt": "2021-05-03T10:31:15.657Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc28a08416af394208d7e99",
                    "text": "Please read *Chapter 17: Better game state management* from the textbook *Learning C# by Programming Games*."
                  }
                ]
              },
              "publicKey": "hezy8206u0bbdqm5cn9c"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df9c37069bd7",
              "languages": [],
              "searchString": "Abstract classes and interfaces (1) abstract classes and interfaces (1) abstract classes and interfaces 1 abstractclassesandinterfaces1",
              "moduleId": "5ee733864024df7a3f069b7d",
              "index": 1,
              "title": "Abstract classes and interfaces (1)",
              "description": "",
              "createdAt": "2019-11-06T08:54:04.623Z",
              "updatedAt": "2021-05-03T10:31:15.668Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc28a68416af3baec8d7e9b",
                    "text": "What is the difference between an abstract class and an interface? Give an example of a situation in which you would use an abstract class. Give another example of a situation in which you would use an interface.",
                    "solution": "An abstract class is a class of which you cannot create any instances; it is purely used for other classes to inherit from. An interface is a list of method headers that other classes can implement; it does not contain any implementations itself. Also, a class can only inherit from one class, but it can implement multiple interfaces.\n\nThere are countless examples that you could give for both concepts. If you cannot come up with anything, consider reading this chapter from the book again."
                  }
                ]
              },
              "publicKey": "414l1p4k985sabdi0829"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df2c75069bd9",
              "languages": [],
              "searchString": "Abstract classes: What is allowed? abstract classes: what is allowed? abstract classes what is allowed abstractclasseswhatisallowed",
              "moduleId": "5ee733864024df7a3f069b7d",
              "index": 3,
              "title": "Abstract classes: What is allowed?",
              "description": "",
              "createdAt": "2019-11-06T09:04:08.872Z",
              "updatedAt": "2021-05-03T10:31:15.686Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "multipleChoiceQuestion",
                    "choices": [
                      {
                        "id": "twrtxnxi",
                        "text": "```csharp\nA obj;\n```",
                        "correct": true,
                        "label": "A"
                      },
                      {
                        "id": "kljwohbd",
                        "text": "```csharp\nobj = new A();\n```",
                        "correct": false,
                        "label": "B"
                      },
                      {
                        "id": "wizlqbtn",
                        "text": "```csharp\nobj = new B();\n```",
                        "correct": true,
                        "label": "C"
                      },
                      {
                        "id": "ymgyvgfs",
                        "text": "```csharp\nobj.Method1();\n```",
                        "correct": true,
                        "label": "D"
                      },
                      {
                        "id": "zcxadifi",
                        "text": "```csharp\nobj.Method2();\n```",
                        "correct": true,
                        "label": "E"
                      },
                      {
                        "id": "trejsmsx",
                        "text": "```csharp\nobj.Method3(obj);\n```",
                        "correct": false,
                        "label": "F"
                      },
                      {
                        "id": "gpzyktvo",
                        "text": "```csharp\nB otherObject = (B)(new A());\n```",
                        "correct": false,
                        "label": "G"
                      },
                      {
                        "id": "mkjqtsfg",
                        "text": "```csharp\nA yetAnotherObject = (A)obj;\n```",
                        "correct": true,
                        "label": "H"
                      },
                      {
                        "id": "rlazpvio",
                        "text": "```csharp\nobj.Method3(otherObject);\n```",
                        "correct": false,
                        "label": "I"
                      },
                      {
                        "id": "qvdvsstb",
                        "text": "```csharp\nA[] list;\n```",
                        "correct": true,
                        "label": "J"
                      },
                      {
                        "id": "ewmdeiss",
                        "text": "```csharp\nlist = new A[10];\n```",
                        "correct": true,
                        "label": "K"
                      },
                      {
                        "id": "ssisnmri",
                        "text": "```csharp\nlist[0] = new A();\n```",
                        "correct": false,
                        "label": "L"
                      },
                      {
                        "id": "pbqoydai",
                        "text": "```csharp\nlist[1] = new B();\n```",
                        "correct": true,
                        "label": "M"
                      },
                      {
                        "id": "gowngdkl",
                        "text": "```csharp\nList<A> oList = new List<A>();\n```",
                        "correct": true,
                        "label": "N"
                      }
                    ],
                    "actions": [],
                    "_id": "5dc28c94416af34d948d7e9f",
                    "text": "Given are the following classes:\n\n```csharp\nabstract class A\n{\n    public abstract void Method1();\n    public void Method2() { }\n}\n\nclass B : A\n{\n    public override void Method1() { }\n    public void Method3(A a) { a.Method1(); }\n}\n```\n\nIndicate which of the following instructions are allowed (when put in a single program):",
                    "multipleCorrect": true,
                    "solution": "See the comments for the answers.\n\n```csharp\nA obj;                         // Yes, declaring a reference is always allowed\nobj = new A();                 // No, you cannot create instances of A, because it’s an abstract class\nobj = new B();                 // Yes, you can create instances of a non􀀀abstract subclass\nobj.Method1();                 // Yes, the compiler know that any subclass will have this method\nobj.Method2();                 // Yes, all subclasses of A inherit this method, and it is public\nobj.Method3(obj);              // No, the compiler can’t verify that obj has this method\nB otherObject = (B)(new A());  // No, (again) you cannot create instances of A\nA yetAnotherObject = (A)obj;   // Yes, casting to a type higher in the hierarchy is allowed\nobj.method3(otherObject);      // No, (again) the compiler can’t verify that obj has this method\nA[] list;                      // Yes, you’re not creating the specific array elements yet\nlist = new A[10];              // Yes, you’re not creating the specific array elements yet\nlist[0] = new A();             // No, (again) you cannot create instances of A\nlist[1] = new B();             // Yes, (again) you can create instances of a non􀀀abstract subclass\nList<A> oList = new List<A>(); // Yes, again no instances of A are created here\n```"
                  }
                ]
              },
              "publicKey": "mirlakx50fiqnvx104r4"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df28cf069bdb",
              "languages": [],
              "searchString": "Lists and interfaces lists and interfaces listsandinterfaces",
              "moduleId": "5ee733864024df7a3f069b7d",
              "index": 5,
              "title": "Lists and interfaces",
              "description": "",
              "createdAt": "2019-11-06T09:34:31.095Z",
              "updatedAt": "2021-05-03T10:31:15.721Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc293cc416af385c58d7ea5",
                    "text": "For this assignment, you should know that the `Lis`t class implements an interface `IList`."
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc293eb416af355418d7ea6",
                    "text": "Below are three lines of code, each combining a declaration and an assignment. Only one of these lines is correct. Which one is that, and why are the other two incorrect?\n\n```csharp\nList<int> a = new IList<int>();  // version 1\nIList<int> b = new List<int>();  // version 2\nIList<int> c = new IList<int>(); // version 3\n```",
                    "solution": "Version 2 is the only correct one.\n\nVersions 1 and 3 are incorrect. We try to create an instance of IList, but this is not allowed because IList is an interface and not a class.\n\nVersion 2 is correct, because the List class implements the IList interface, so it may be assigned to a variable of the type IList."
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc2940e416af32e308d7ea7",
                    "text": "By the way, the following line is also correct:\n\n```csharp\nList<int> d = new List<int>(); // version 4\n```\n\nDescribe a situation in which the correct line that you chose in the previous question (version 1/2/3) has an advantage over version 4.",
                    "solution": "Version 2 may be better than version 4 if you want to keep the possibility to choose another implementation of the `IList` interface at a later stage. By using the interface, you make sure that you do not accidentally use methods or properties from `List` that are not specified in `IList`."
                  }
                ]
              },
              "introduction": "For this assignment, you should know that the `List` class implements an interface `IList`.",
              "publicKey": "qigfrbvoemnmj5awqypj"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df8976069bd8",
              "languages": [],
              "searchString": "Abstract classes and interfaces (2) abstract classes and interfaces (2) abstract classes and interfaces 2 abstractclassesandinterfaces2",
              "moduleId": "5ee733864024df7a3f069b7d",
              "index": 2,
              "title": "Abstract classes and interfaces (2)",
              "description": "",
              "createdAt": "2019-11-06T08:56:44.652Z",
              "updatedAt": "2021-05-03T10:31:15.747Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "multipleChoiceQuestion",
                    "choices": [
                      {
                        "id": "omwesetf",
                        "text": "A. An abstract class must have at least one abstract method.",
                        "correct": false,
                        "label": "A"
                      },
                      {
                        "id": "qwxaplfd",
                        "text": "B. An abstract class cannot have any private methods.",
                        "correct": false,
                        "label": "B"
                      },
                      {
                        "id": "mwdqrdto",
                        "text": "C. An abstract method can never be private.",
                        "correct": true,
                        "label": "C"
                      },
                      {
                        "id": "rszeksol",
                        "text": "D. The methods of an abstract class can never have a body.",
                        "correct": false,
                        "label": "D"
                      },
                      {
                        "id": "mpgizrhq",
                        "text": "E. The methods of an interface can never have a body.",
                        "correct": true,
                        "label": "E"
                      },
                      {
                        "id": "kwclfimn",
                        "text": "F. A class can inherit from only one class, but from multiple interfaces.",
                        "correct": true,
                        "label": "F"
                      }
                    ],
                    "actions": [],
                    "_id": "5dc28ad4416af31df08d7e9d",
                    "multipleCorrect": true,
                    "text": "Below are a few statements about abstract classes and interfaces. Which of them are true?",
                    "solution": "A. False: an abstract class could have all of its methods filled in already. It makes sense if at least one method is *virtual* (so that it can be overwritten by a subclass), but even this is not mandatory.\n\nB. False: an abstract class can contain private methods that are ‘helpers’ for other (nonprivate) methods. Sure, subclasses cannot call such a method directly, but it can still be used in the abstract class itself.\n\nC. True: an abstract method *must* be filled in by subclasses, and the keyword `private` would prevent this from being possible.\n\nD. False: an abstract class can contain non-abstract methods that are already filled in.\n\nE. True: by definition, an interface is just a list of method headers.\n\nF. True. multiple class inheritance is not supported but multiple interface inheritance is no problem."
                  }
                ]
              },
              "publicKey": "erbanu3mh81vv4loiyyb"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df9231069bde",
              "languages": [],
              "searchString": "Pressing a level button pressing a level button pressingalevelbutton",
              "moduleId": "5ee733864024df6ef4069b7e",
              "index": 2,
              "title": "Pressing a level button",
              "description": "",
              "createdAt": "2019-11-06T09:54:54.020Z",
              "updatedAt": "2021-05-03T10:31:15.593Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc29878416af36f1d8d7eae",
                    "text": "In our example code in the book, the `LevelMenuState` keeps checking if a level button has been pressed. You could also do this differently, by letting the level button itself check if it has been pressed, and (if so) sending the `LevelMenuState` a message that a level needs to be loaded.\n\nHow can you change the code to make this possible?",
                    "solution": "One solution is to give each level button a reference to the `LevelMenuState` that contains it, and to give `LevelMenuState` a public method (such as `LevelButtonClicked(int index)`) that a level button can call when it is pressed."
                  }
                ]
              },
              "publicKey": "a25r6x4jr3to8eopbmxk"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df2e57069bdc",
              "languages": [],
              "searchString": "Reading material reading material readingmaterial",
              "moduleId": "5ee733864024df6ef4069b7e",
              "index": 0,
              "title": "Reading material",
              "description": "",
              "createdAt": "2019-11-01T10:02:09.834Z",
              "updatedAt": "2021-05-03T10:31:15.649Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc2952e416af332808d7eaa",
                    "text": "Please read *Chapter 18: User interfaces and menus* from the textbook *Learning C# by Programming Games*."
                  }
                ]
              },
              "publicKey": "kpmiyn1zdhicds8ebriz"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024dfa147069bdd",
              "languages": [],
              "searchString": "More UI elements more ui elements moreuielements",
              "moduleId": "5ee733864024df6ef4069b7e",
              "index": 1,
              "title": "More UI elements",
              "description": "",
              "createdAt": "2019-11-06T09:51:52.945Z",
              "updatedAt": "2021-05-03T10:31:15.712Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc297cf416af35f6b8d7eac",
                    "text": "Can you think of other UI elements besides buttons, switches, and sliders? Name a few of them. Next, choose one of these UI elements and create a class for it. Test your class by adding an instance of it to the options menu.",
                    "solution": "Some examples of other UI elements are scrollbars, drop-down menus, and radio buttons. This last option is probably the easiest to implement."
                  }
                ]
              },
              "publicKey": "z70plb1ir5xh0t3mfztb"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733864024df4f8a069bdf",
              "languages": [],
              "searchString": "Better buttons better buttons betterbuttons",
              "moduleId": "5ee733864024df6ef4069b7e",
              "index": 3,
              "title": "Better buttons",
              "description": "",
              "createdAt": "2019-11-06T09:57:22.420Z",
              "updatedAt": "2021-05-03T10:31:15.766Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc29920416af32cdc8d7eb0",
                    "text": "The `Button` class from this chapter is rather simple. For many applications, it’s useful to have slightly ‘smarter’ buttons that can respond to both *press* and *release* actions. \n\nExtend the `Button` class (for example by creating a subclass `ExtendedButton`) so that it does the following:\n\n* Instead of a single bool member variable, add an `enum ButtonState` with four states: `Normal`, `Hover`, `Pressed`, and `Released`. Give the `Button` class a member variable of that type. The default state should be `Normal`.\n* When the mouse pointer hovers over the button, the state should go to `Hover`.\n* When the player clicks the left mouse button while the mouse pointer is on the `Button`, the state should go to `Pressed`.\n* When the player releases the left mouse button, the `Button` class should check if the mouse pointer is still inside the button’s bounding box. If so, the state should go to `Released`. If not, the state should go to `Normal`.\n\nIt’s common to show a different image for each button state. Allow your extended `Button` class to accept up to 4 different images, where the ‘normal’ images is mandatory and the other images are optional. Change the class so that when the button’s state changes, the sprite gets updated as well. Make sure that your code still works if some of the sprites are missing.\n\nIn many games, you’ll also want to *disable* a button temporarily. Extend the `Button` class with an Enabled property that other objects can get and set. When a button is not enabled, it should not respond to any mouse interaction, and it should (again) show a different sprite."
                  }
                ]
              },
              "isOptional": true,
              "difficulty": 4,
              "publicKey": "a2o59soatay2z7t06525"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733874024df2509069be1",
              "languages": [],
              "searchString": "File reading file reading filereading",
              "moduleId": "5ee733864024dfe4cb069b7f",
              "index": 1,
              "title": "File reading",
              "description": "",
              "createdAt": "2019-11-06T10:21:08.668Z",
              "updatedAt": "2021-05-03T10:31:16.126Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc29ea0416af356378d7eb5",
                    "programmingLanguage": "csharp",
                    "text": "Write a method `ReadSum` that takes a filename as its argument. You may assume that the file with that filename contains integers separated by spaces. Your method should read that file, calculate the sum of the numbers in the file, and return that sum.\n\nFor example, if the file *numbers.txt* contains the following text:\n\n```other\n4 8 15 16 23 42\n```\n\nthe method call `ReadSum(\"numbers.txt\")` should return the number 108.\n\n*Hint:* Split the string into separate numbers first, and then convert each part to an integer.",
                    "solution": "```csharp\nint ReadSum(string filename)\n{\n    // read the file’s single line\n    StreamReader r = new StreamReader(filename);\n    string line = r.ReadLine();\n    r.close();\n\n    // get the separate numbers\n    string[] numbers = r.Split(' ');\n\n    // convert to integers and keep track of the total\n    int total = 0;\n    foreach (string number in numbers)\n        total += int.Parse(number);\n    return total;\n}\n```",
                    "template": "int ReadSum(string filename)\n{\n    // Fill this in\n}"
                  }
                ]
              },
              "publicKey": "61l2bm8lq0ujicfmnyd1"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733874024df5035069be0",
              "languages": [],
              "searchString": "Reading material reading material readingmaterial",
              "moduleId": "5ee733864024dfe4cb069b7f",
              "index": 0,
              "title": "Reading material",
              "description": "",
              "createdAt": "2019-11-01T10:02:09.834Z",
              "updatedAt": "2021-05-03T10:31:16.135Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc29e63416af3814e8d7eb3",
                    "text": "Please read *Chapter 19: Loading levels from files* from the textbook *Learning C# by Programming Games*."
                  }
                ]
              },
              "publicKey": "2x0he141hf1zybe5fb61"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733874024df7318069be3",
              "languages": [],
              "searchString": "Closing a reader or writer closing a reader or writer closingareaderorwriter",
              "moduleId": "5ee733864024dfe4cb069b7f",
              "index": 3,
              "title": "Closing a reader or writer",
              "description": "",
              "createdAt": "2019-11-06T10:30:46.574Z",
              "updatedAt": "2021-05-03T10:31:16.161Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc2a0dc416af3b38b8d7eb9",
                    "text": "The `Close` method of a `StreamReader` or `StreamWriter` object will automatically be called when the object goes out of scope. Why is it still a good idea to call the `Close` method yourself?",
                    "solution": "As soon as you close a reader or writer, the associated stream is no longer ‘locked’ and the target can be used by other programs (or by other parts of your own program). So, closing a stream as soon as possible is considered good practice because it stops your code from keeping the stream all to itself.\n\nAlso, sometimes it’s not entirely clear when a C# object goes out of scope. It’s easy if you create the reader/writer locally inside a method, but what if your method gives the reader/writer back as a result? Who should be in charge of ‘deleting’ it then? If you don’t watch out, you may end up locking a file without knowing it— unless you properly use the `Close` method."
                  }
                ]
              },
              "publicKey": "gm7ovbtqt147z6gl04ht"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733874024df3267069be2",
              "languages": [],
              "searchString": "File writing file writing filewriting",
              "moduleId": "5ee733864024dfe4cb069b7f",
              "index": 2,
              "title": "File writing",
              "description": "",
              "createdAt": "2019-11-06T10:25:34.908Z",
              "updatedAt": "2021-05-03T10:31:16.206Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc29fa8416af3374c8d7eb7",
                    "programmingLanguage": "csharp",
                    "text": "Write a method `WriteMississippi` that takes two arguments: a filename and a positive integer. This method should create a new text file with the given filename and fill it with the text ‘1 Mississippi’, ‘2 Mississippi’, ... and so on, up to the given number. Each number should start on a new line.\n\nFor example, the method call `WriteMississippi(\"count.txt\", 5)` should result in a file *count.txt* with the following text:\n\n```other\n1 Mississippi\n2 Mississippi\n3 Mississippi\n4 Mississippi\n5 Mississippi\n```",
                    "solution": "```csharp\nvoid WriteMississippi(string filename, int n)\n{\n    StreamWriter w = new StreamWriter(filename);\n    for (int i=1; i<=n; i++)\n        w.WriteLine(i + \" Mississippi\");\n    w.close();\n}\n```",
                    "template": "void WriteMississippi(string filename, int n)\n{\n    // Fill this in\n}"
                  }
                ]
              },
              "publicKey": "h14kr2rj8x10m544otpl"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733874024df1c66069be4",
              "languages": [],
              "searchString": "Making the switch making the switch makingtheswitch",
              "moduleId": "5ee733864024dfe4cb069b7f",
              "index": 4,
              "title": "Making the switch",
              "description": "",
              "createdAt": "2019-11-06T10:33:18.129Z",
              "updatedAt": "2021-05-03T10:31:16.244Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc2a186416af337768d7ebb",
                    "text": "In the code in the book of Penguin Pairs so far, are there any other places where a `switch` instruction would make sense? A good example is the `getSpriteNameForStatus` method in `LevelButton`. In this method replace the `if` and `else` instructions by a `switch` block.",
                    "programmingLanguage": "csharp",
                    "solution": "Basically, look for any situation where several simple `if` and `else` instructions appear in a row, with each instruction checking the same variable. Here is the updated `getSpriteNameForStatus` method in `LevelButton`. With a switch instruction, it could look like this:\n\n```csharp\nstatic string getSpriteNameForStatus(LevelStatus status)\n{\n    switch (status)\n    {\n        case LevelStatus.Locked:\n            return \"Sprites/UI/spr level locked\";\n        case LevelStatus.Unlocked:\n            return \"Sprites/UI/spr level unsolved\";\n        default:\n            return \"Sprites/UI/spr level solved@6\";\n    }\n}\n```",
                    "template": "static string getSpriteNameForStatus(LevelStatus status)\n{\n    if (status == LevelStatus.Locked)\n        return \"Sprites/UI/spr level locked\";\n    if (status == LevelStatus.Unlocked)\n        return \"Sprites/UI/spr level unsolved\";\n    return \"Sprites/UI/spr level solved@6\";\n}"
                  }
                ]
              },
              "publicKey": "xvox08scmhzzx5fajqjt"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733874024df0416069be6",
              "languages": [],
              "searchString": "The keyword ‘is’ the keyword ‘is’ the keyword is thekeywordis the keyword is",
              "moduleId": "5ee733864024df3d3d069b80",
              "index": 1,
              "title": "The keyword ‘is’",
              "description": "",
              "createdAt": "2019-11-06T10:44:46.928Z",
              "updatedAt": "2021-05-03T10:31:16.252Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc2a429416af3a9678d7ec0",
                    "text": "Assume that we have a game with an abstract class `Animal`, and several classes that inherit from it: `Dog`, `Cat`, and `Fox`. Now consider the following method, which takes a list of `Animal` objects and lets all animals in that list say something.\n\n```csharp\npublic void LetAnimalsSpeak(List<Animal> animals)\n{\n    foreach (Animal animal in animals)\n    {\n        // ...\n    }\n}\n```\n\nIn this question, you’ll fill in this method in two different ways."
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc2a482416af38a028d7ec1",
                    "text": "Inside the `foreach` loop, add code that checks if the current animal in the loop is a `Dog`, a `Cat`, or a `Fox`. Use the keyword `is` that was introduced in this chapter. For each type of animal, write a different line of text to the console, using the `Console.WriteLine` method. For example, you could print the text `\"Woof!\"` if the animal is a `Dog`, `\"Meow!\"` if the animal is a `Cat`, and `\"Ring ding ding ding!\"` when it is a `Fox` (where does that come from?).",
                    "programmingLanguage": "csharp",
                    "template": "public void LetAnimalsSpeak(List<Animal> animals)\n{\n    foreach (Animal animal in animals)\n    {\n        // Fill this in\n    }\n}",
                    "solution": "```csharp\npublic void LetAnimalsSpeak(List<Animal> animals)\n{\n    foreach (Animal animal in animals)\n    {\n        if (animal is Dog)\n            Console.WriteLine(\"Woof!\");\n        else if (animal is Cat)\n            Console.WriteLine(\"Meow!\");\n        else // it’s a fox\n            Console.WriteLine(\"Ring ding ding ding!\");\n    }\n}\n```"
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc2a65c416af364fc8d7ec2",
                    "text": "Another solution is to give the `Animal` class an abstract method `Speak` that each specific animal needs to override. Describe how to implement this solution.",
                    "solution": "Add this in the `Animal` class:\n\n```csharp\npublic abstract void Speak();\n```\n\nAnd fill it in all subclasses, such as like this in `Dog`:\n\n```csharp\npublic void Speak() { Console.WriteLine(\"Woof!\"); }\n```\n\nThe body of the `foreach` loop in `LetAnimalsSpeak` then becomes easy:\n\n```csharp\nanimal.Speak();\n```"
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc2a726416af3054b8d7ec3",
                    "text": "From a software design point of view, why is the second solution better than the first?",
                    "solution": "The second approach is better for several reasons. First, it delegates the concept of ‘speaking’ to each specific animal, which is conceptually nicer. Second, if you ever add another `Animal` subclass (such as `Elephant`), then this class is obliged to implement the `Speak` method too, and this new `Speak` implementation will automatically be supported in the `foreach` loop, thanks to polymorphism!\n\nBy contrast, the first approach would force you to add another else if instruction to the loop— otherwise, elephants would accidentally make fox noises! And trust us, that is not a world you want to live in."
                  }
                ]
              },
              "introduction": "Assume that we have a game with an abstract class `Animal`, and several classes that inherit from it: `Dog`, `Cat`, and `Fox`. Now consider the following method, which takes a list of `Animal` objects and lets all animals in that list say something.\n\n```csharp\npublic void LetAnimalsSpeak(List<Animal> animals)\n{\n    foreach (Animal animal in animals)\n    {\n        // ...\n    }\n}\n```\n\nIn this question, you’ll fill in this method in two different ways.",
              "publicKey": "pf89oon2k6ns6gnw05yl"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733874024df3ea2069be5",
              "languages": [],
              "searchString": "Reading material reading material readingmaterial",
              "moduleId": "5ee733864024df3d3d069b80",
              "index": 0,
              "title": "Reading material",
              "description": "",
              "createdAt": "2019-11-01T10:02:09.834Z",
              "updatedAt": "2021-05-03T10:31:16.263Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc2a3b8416af374558d7ebe",
                    "text": "Please read *Chapter 20: Gameplay programming* from the textbook *Learning C# by Programming Games*."
                  }
                ]
              },
              "publicKey": "zlwkfjg8k2ddpzl63d0x"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733874024dfc181069beb",
              "languages": [],
              "searchString": "Exceptions exceptions",
              "moduleId": "5ee733864024dffaea069b82",
              "index": 1,
              "title": "Exceptions",
              "description": "",
              "createdAt": "2019-11-06T12:41:33.471Z",
              "updatedAt": "2021-05-03T10:31:16.144Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc2bf85416af317b08d7ed2",
                    "text": "What is an *exception* in a C# program? Name a few scenarios in which exceptions are useful.",
                    "solution": "An exception is an ‘unexpected’ event that a program encounters at run-time. This can have many different causes. Simple examples include trying to use an object that is null, or trying to access an array index that doesn’t exist. Other examples are a failing network connection, a file that cannot be found, or a file with an incorrect format that cannot be read properly.\n\nIt’s good practice to use exception handling *only* for things that happen beyond the programmer’s control, such as in the second category of examples we just mentioned."
                  }
                ]
              },
              "publicKey": "opdt9olxcpdp62honhog"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733874024df0323069bea",
              "languages": [],
              "searchString": "Reading material reading material readingmaterial",
              "moduleId": "5ee733864024dffaea069b82",
              "index": 0,
              "title": "Reading material",
              "description": "",
              "createdAt": "2019-11-01T10:02:09.834Z",
              "updatedAt": "2021-05-03T10:31:16.171Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc2b67e416af354268d7ed0",
                    "text": "Please read *Chapter 22: Creating the main game structure* from the textbook *Learning C# by Programming Games*."
                  }
                ]
              },
              "publicKey": "nij2gpkxxtt9668qsm2u"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733874024df8b2f069bec",
              "languages": [],
              "searchString": "Exceptions and file reading exceptions and file reading exceptionsandfilereading",
              "moduleId": "5ee733864024dffaea069b82",
              "index": 2,
              "title": "Exceptions and file reading",
              "description": "",
              "createdAt": "2019-11-06T12:43:55.531Z",
              "updatedAt": "2021-05-03T10:31:16.180Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc2c017416af34bdb8d7ed4",
                    "text": "This assignment starts with a simple file I/O method and then gradually lets you add exception handling."
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc2c029416af336698d7ed5",
                    "programmingLanguage": "csharp",
                    "text": "Write a method `ReadSum` that reads a file with a given filename. Each line of this file should contain an integer. The method should calculate and return the sum of all these integers. Give an example of a piece of code that calls `ReadSum` and does something with the result.",
                    "solution": "```csharp\nint ReadSum(string filename)\n{\n    int result = 0;\n    StreamReader r = new StreamReader(filename);\n    string line = r.ReadLine();\n    while (line != null)\n    {\n        result += int.Parse(line);\n        line = r.ReadLine();\n    }\n    return result;\n}\n```",
                    "template": "int ReadSum(string filename)\n{\n    // Fill this in\n}"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc2c0a5416af37e828d7ed6",
                    "programmingLanguage": "csharp",
                    "text": "Improve the method so that when the given file does not exist, a message is printed to the console and a value of 0 is returned.\n\nAlso improve the method so that it ignores all lines for which the int.Parse method fails.\n\n(You might want to copy your answer from the previous question first.)",
                    "template": "int ReadSum(string filename)\n{\n    // Fill this in\n}",
                    "solution": "```csharp\nint ReadSum(string filename)\n{\n    int result = 0;\n    StreamReader r;\n    try { r = new StreamReader(filename); }\n    catch (Exception e)\n    {\n        Console.WriteLine(\"The file does not exist.\");\n        return 0;\n    }\n    string line = r.ReadLine();\n    while (line != null)\n    {\n        try { result += int.Parse(line); }\n        catch (Exception e) { }\n        line = r.ReadLine();\n    }\n    return result;\n}\n```"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc2c0bd416af3059e8d7ed7",
                    "text": "Now change the method so that it throws a custom `InvalidLineException` as soon as there’s an invalid line. You may assume that the `InvalidLineException` class already exists, and that it’s a subclass of `Exception`. (You might want to copy your answer from the previous question first.)",
                    "programmingLanguage": "csharp",
                    "template": "int ReadSum(string filename)\n{\n    // Fill this in\n}",
                    "solution": "```csharp\nint ReadSum(string filename)\n{\n    int result = 0;\n    StreamReader r;\n    try { r = new StreamReader(filename); }\n    catch (Exception e)\n    {\n        Console.WriteLine(\"The file does not exist.\");\n        return 0;\n    }\n    string line = r.ReadLine();\n    while (line != null)\n    {\n        try { result += int.Parse(line); }\n        catch (Exception e) { throw new InvalidLineException(); }\n        line = r.ReadLine();\n    }\n    return result;\n}\n```"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc2c0c3416af3ed008d7ed8",
                    "solution": "In general, if you want to prevent your program from crashing at all times, you should use `try` and `catch` whenever you call a method that may cause exceptions without already handling them itself.\n\nIn the case of `ReadSum`, this ‘outer’ exception handling could look like this:\n\n```csharp\ntry\n{\n    int sum = ReadSum(\"someFile.txt\");\n    Console.WriteLine(\"The sum is \" + sum + \"!\");\n}\ncatch (Exception e)\n{\n    Console.WriteLine(\"Something went wrong!\");\n}\n```\n\nYou can make it more specific by dealing with `InvalidLineException` in a special way:\n\n```csharp\ntry\n{\n    int sum = ReadSum(\"someFile.txt\");\n    Console.WriteLine(\"The sum is \" + sum + \"!\");\n}\ncatch (InvalidLineException e)\n{\n    Console.WriteLine(\"One of the lines was invalid.\");\n}\ncatch (Exception e) // something else went wrong\n{\n    Console.WriteLine(e.Message);\n}\n```",
                    "text": "Consider the following usage of `ReadSum`. How should you change this code so that it handles your new `InvalidLineException`?",
                    "template": "int sum = ReadSum(\"someFile.txt\");\nConsole.WriteLine(\"The sum is \" + sum + \"!\");",
                    "programmingLanguage": "csharp"
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc2c0d5416af369328d7eda",
                    "text": "Which version of `ReadSum` is your favorite? To what extent do you think exception handling is useful here?",
                    "solution": "This is a matter of taste. It really depends on your application, too. If you’re writing software for a bank, and there’s a wrong line in a file with transactions, what should you do? If you stop reading as soon as something goes wrong, then you’ll skip the remaining (and possibly valid!) lines, which could mean that people do not receive their money.\n\nThe bottom line is: there are many possible approaches, so try to think of the consequences of each approach, and then determine the nicest one."
                  }
                ]
              },
              "introduction": "This assignment starts with a simple file I/O method and then gradually lets you add exception handling.",
              "publicKey": "udfjuzs407xpd874g4w4"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733874024df1997069bed",
              "languages": [],
              "searchString": "Using the new engine with Penguin Pairs using the new engine with penguin pairs usingthenewenginewithpenguinpairs",
              "moduleId": "5ee733864024dffaea069b82",
              "index": 4,
              "title": "Using the new engine with Penguin Pairs",
              "description": "",
              "createdAt": "2019-11-08T10:42:24.586Z",
              "updatedAt": "2021-05-03T10:31:16.216Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc546a501f3487dd15a49f6",
                    "text": "With the new version of the Engine library in the book, you can also improve the code of Penguin Pairs (the game from the previous chapters).\n\nUpdate the PenguinPairsFinal project so that it uses the new version of Engine. Most importantly, the `PenguinPairs` class should inherit from `ExtendedGameWithLevels`, and the `PlayingState` class should implement the `IPlayingState` interface. Are there more parts of the code that you can clean up now?"
                  }
                ]
              },
              "isOptional": true,
              "difficulty": 4,
              "publicKey": "b0s10puq1rd8hkv9a25u"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733874024dfb7e5069bee",
              "languages": [],
              "searchString": "Exceptions in Tick Tick exceptions in tick tick exceptionsinticktick",
              "moduleId": "5ee733864024dffaea069b82",
              "index": 3,
              "title": "Exceptions in Tick Tick",
              "description": "",
              "createdAt": "2019-11-08T10:44:12.802Z",
              "updatedAt": "2021-05-03T10:31:16.281Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc5471301f348805a5a49f8",
                    "text": "Can you identify some places in the Engine and TickTick1 projects where exception handling could be useful? Give at least three examples, and explain why exception handling would make sense there.",
                    "solution": "In Tick Tick, exceptions can be useful for handling unexpected events such as level files not being available, level files containing invalid content, or the progress file not being accessible for writing. Note that these three examples are all related to file I/O. This is a common area for exception handling!"
                  }
                ]
              },
              "publicKey": "7am92os3wenmf84h9adb"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733874024df5a4b069bef",
              "languages": [],
              "searchString": "Reading material reading material readingmaterial",
              "moduleId": "5ee733864024df0688069b83",
              "index": 0,
              "title": "Reading material",
              "description": "",
              "createdAt": "2019-11-01T10:02:09.834Z",
              "updatedAt": "2021-05-03T10:31:16.153Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc5477901f348030b5a49fb",
                    "text": "Please read *Chapter 23: Animated game objects* from the textbook *Learning C# by Programming Games*."
                  }
                ]
              },
              "publicKey": "0ig6d6xdto3mh4tf4x5f"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733874024dfb6c1069bf0",
              "languages": [],
              "searchString": "Class hierarchy of the engine class hierarchy of the engine classhierarchyoftheengine",
              "moduleId": "5ee733864024df0688069b83",
              "index": 1,
              "title": "Class hierarchy of the engine",
              "description": "",
              "createdAt": "2019-11-08T10:47:06.300Z",
              "updatedAt": "2021-05-03T10:31:16.198Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc547b401f348cd1c5a49fd",
                    "text": "With the `Animation` and `AnimatedGameObject` classes, the structure of our game engine has become a bit more complicated again.\n\nTo get a good overview, draw a diagram of the `GameObject` class and its subclasses. Use arrows to connect classes that inherit from each other, just like in the ‘vehicles’ example from Chapter 10.",
                    "solution": "```\nGameObject\n^\n|-- GameObjectList\n|   ^\n|   |-- Slider\n|   \n|-- SpriteGameObject\n|   ^\n|   |-- AnimatedGameObject\n|   |\n|   |-- Button\n|   |   ^\n|   |   |-- LevelButton\n|   |   |\n|   |   |-- Switch\n|\n|-- TextGameObject\n|\n|-- VisibilityTimer\n```",
                    "template": "GameObject\n^\n|---  GameObjectList\n|      ^\n|      |\n\n*Fill in further*   "
                  }
                ]
              },
              "publicKey": "t56gzhdswjnob29f6zs5"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733874024df4131069be9",
              "languages": [],
              "searchString": "Extending the Penguin Pairs game extending the penguin pairs game extendingthepenguinpairsgame",
              "moduleId": "5ee733864024df9e61069b81",
              "index": 2,
              "title": "Extending the Penguin Pairs game",
              "description": "",
              "createdAt": "2019-11-06T11:58:28.763Z",
              "updatedAt": "2021-05-03T10:31:16.189Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc2b56c416af351498d7ecd",
                    "text": "Below are some suggestions for extending the Penguin Pairs game. As usual, we’ve sorted the suggestions by difficulty, based on how much they require your program to change. Again, you’re completely free to think of your own extensions as well!\n\n* (\\*) Currently, the level menu consists of a single page displaying a maximum of fifteen levels. Extend the game so that multiple pages of levels are allowed. Add two buttons to the level menu screen to be able to navigate through the different pages.\n\n* (\\*) Add a menu option that lets the player reset his/her progress. When the player clicks that button, the first level should get marked as ‘unlocked’, and all other levels should get marked as ‘locked’.\n\n* (\\*\\*) If you’re a quick player, it’s currently possible to move multiple animals at the same time. This is not really what the levels were designed for. Extend the game so that the player cannot make any moves as long as an animal is moving.\n\n* (\\*\\*) Allow levels to specify a maximum number of moves, so that the player can only click on arrows a limited number of times. If the player runs out of moves, he/she loses and should restart the level.\n\n* (\\*\\*\\*) Add a ‘booster’ tile to the game that changes the direction of an animal that moves over it. For example, if a penguin is moving upward, and then enters a booster tile of the type ‘right’, the penguin should change its direction so that it continues moving to the right. Add a few more levels to the game that use this tile.\n\n* (\\*\\*\\*\\*) Extend the game so that it also contains polar bears that can be moved by the player. Whenever a penguin or seal collides with a polar bear, the penguin or seal gets so scared that it immediately starts moving away from the bear. Design a few levels around this concept.\n\n* (\\*\\*\\*\\*\\*) Add ‘teleporter’ objects to the game. Teleporters should always come in pairs. Whenever a penguin or seal enters one teleporter, it should disappear and then re-appear in the *other* teleporter, and it should continue moving in the same direction that it had before. Make it possible to have *multiple* pairs of teleporters in one level. Think carefully about how you represent teleporters in your text files. How can you tell the game which teleporters are ‘connected’ to each other?"
                  }
                ]
              },
              "publicKey": "370sxl1ethcixxsv9uao"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733874024df5034069be7",
              "languages": [],
              "searchString": "Reading material reading material readingmaterial",
              "moduleId": "5ee733864024df9e61069b81",
              "index": 0,
              "title": "Reading material",
              "description": "",
              "createdAt": "2019-11-01T10:02:09.834Z",
              "updatedAt": "2021-05-03T10:31:16.225Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc2a7ed416af333558d7ec6",
                    "text": "Please read *Chapter 21: Finishing the game* from the textbook *Learning C# by Programming Games*."
                  }
                ]
              },
              "publicKey": "35nbl37j39nwtuqb1w7z"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733874024df59ef069be8",
              "languages": [],
              "searchString": "Classes and access modifiers classes and access modifiers classesandaccessmodifiers",
              "moduleId": "5ee733864024df9e61069b81",
              "index": 1,
              "title": "Classes and access modifiers",
              "description": "",
              "createdAt": "2019-11-06T11:51:16.444Z",
              "updatedAt": "2021-05-03T10:31:16.235Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc2b3c1416af37d438d7ec8",
                    "text": "Here are two questions about access modifiers for classes."
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc2b3c5416af357c78d7ec9",
                    "text": "What is the difference between an internal class and a public class?",
                    "solution": "A public class can be used everywhere, whereas an internal class can only be used inside the same assembly. This is relevant when a program includes another codebase, for example as a library."
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc2b3de416af38e398d7eca",
                    "text": "By default, a C# class is treated as if it has the access modifier `internal`. Can you think of a reason why is this the default access modifier for classes, instead of `public`?",
                    "solution": "In general, it’s a good assumption that classes will not be used by other programs. The only exception to this rule is when you deliberately write a library that other programs are *supposed* to use."
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc2b3ed416af384dd8d7ecb",
                    "text": "In the Engine project in the book, any of the classes can't be marked as private or protected. Why is this? By the way, it *is* possible to use these keywords for a class in some cases. Can you imagine how?",
                    "solution": "Well, this goes a bit too far for this course, but it is technically possible to write nested classes like this:\n\n```csharp\nclass Outer\n{\n    class Inner { ... }\n{\n```\n\nwhere the `Inner` class is defined ‘inside’ the `Outer` class. This can be useful if the functionality of `Inner` has so much to do with `Outer` that it isn’t really relevant anywhere else. In such cases, you can define the class `Inner` as `protected` or `private`, to define whether any subclasses of `Outer` can also use `Inner`.\n\nBut for any class that is not nested inside another class, it is simply not possible in C# to mark them as protected or private."
                  }
                ]
              },
              "introduction": "Here are two questions about access modifiers for classes.",
              "publicKey": "wtdaxq7rs9rbs2gmujux"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733874024df226c069bf1",
              "languages": [],
              "searchString": "Reading material reading material readingmaterial",
              "moduleId": "5ee733864024df5513069b84",
              "index": 0,
              "title": "Reading material",
              "description": "",
              "createdAt": "2019-11-01T10:02:09.834Z",
              "updatedAt": "2021-05-03T10:31:15.813Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc54a0d01f3481e665a4a00",
                    "text": "Please read *Chapter 24: Game physics* from the textbook *Learning C# by Programming Games*."
                  }
                ]
              },
              "publicKey": "m2ijzjwc858o3vlubakr"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733874024df6dbd069bf3",
              "languages": [],
              "searchString": "Collision detection between rectangles collision detection between rectangles collisiondetectionbetweenrectangles",
              "moduleId": "5ee733864024df5513069b84",
              "index": 2,
              "title": "Collision detection between rectangles",
              "description": "",
              "createdAt": "2019-11-08T10:59:01.236Z",
              "updatedAt": "2021-05-03T10:31:15.823Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc54a7c01f3483b0a5a4a04",
                    "text": "Implement your own method for collision detection between two (axis-aligned) rectangles. That is, write your own code instead of calling the `Intersects` method of `Rectangle`. *Hint:* two rectangles overlap when they are overlapping in the $x$-direction and in the $y$-direction.",
                    "programmingLanguage": "csharp",
                    "solution": "Here’s our version. As indicated, this version assumes that we are writing inside the `Rectangle` class itself, but you could also easily create a version with two rectangles as parameters.\n\n```csharp\npublic bool Intersects(Rectangle other)\n{\n    bool xOverlap = (this.Left <= other.Right && this.Right >= other.Left);\n    bool yOverlap = (this.Top <= other.Bottom && this.Bottom >= other.Top);\n    return xOverlap && yOverlap;\n}\n```",
                    "template": "// This method is assumed to be inside the Rectangle class\npublic bool Intersects(Rectangle other)\n{\n    // Fill this in\n}"
                  }
                ]
              },
              "publicKey": "h6q11lb6kqcwdj4ruk6q"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733874024dfe60a069bf2",
              "languages": [],
              "searchString": "Bounding volumes bounding volumes boundingvolumes",
              "moduleId": "5ee733864024df5513069b84",
              "index": 1,
              "title": "Bounding volumes",
              "description": "",
              "createdAt": "2019-11-08T10:58:01.392Z",
              "updatedAt": "2021-05-03T10:31:15.832Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc54a3e01f34859855a4a02",
                    "text": "What is a bounding volume? What are the main advantages and disadvantages of using bounding volumes for game physics?",
                    "solution": "A bounding volume is a simplified representation of a game object. It can be used for physics calculations such as collision detection. The main advantage of bounding volumes is that they make those calculations easier and therefore faster. The main disadvantage is that they are not perfect versions of your actual game objects, which may have consequences for the gameplay."
                  }
                ]
              },
              "publicKey": "63428uewgbtu85lg3c00"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733874024df16d1069bf5",
              "languages": [],
              "searchString": "Improving the class hierarchy improving the class hierarchy improvingtheclasshierarchy",
              "moduleId": "5ee733864024dfbc27069b85",
              "index": 1,
              "title": "Improving the class hierarchy",
              "description": "",
              "createdAt": "2019-11-08T16:20:32.590Z",
              "updatedAt": "2021-05-03T10:31:15.840Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc595dc01f3484ef75a4a09",
                    "text": "There are quite some similarities between the different enemies of Tick Tick. It’s time to improve the code, and to train your skills with inheritance again."
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc5965901f348cb275a4a0a",
                    "text": "Add an abstract class `Enemy` that will become the superclass of all specific enemies. Give this class the code that all enemies currently have in common. Note: as usual, you can fill in the details in many different ways, and there’s not a single ‘best’ answer.",
                    "programmingLanguage": "csharp",
                    "solution": "Ah, another open programming exercise. You know what to do!"
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc5966c01f3483a7b5a4a0b",
                    "text": "If you think about it, there are actually also similarities between enemies and the `Player` class. What are these similarities, and how could you encode this ‘overlap’ in the program?",
                    "solution": "You could create a `GameCharacter` class that becomes the superclass of both `Player` and `Enemy`. This class could take care of most things that happen in the constructor: storing a reference to the level, storing the start position, and loading an animation.\n\nIf you ever want to create enemies that can jump (and that should therefore experience gravity and handle collisions with tiles), you could move more Player code into the `GameCharacter` class, and give `GameCharacter` member variables that denote if (and how strongly) a character should respond to gravity and collisions."
                  }
                ]
              },
              "introduction": "There are quite some similarities between the different enemies of Tick Tick. It’s time to improve the code, and to train your skills with inheritance again.",
              "publicKey": "66so4s71eeyf7us9qd4o"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733874024dfc448069bf4",
              "languages": [],
              "searchString": "Reading material reading material readingmaterial",
              "moduleId": "5ee733864024dfbc27069b85",
              "index": 0,
              "title": "Reading material",
              "description": "",
              "createdAt": "2019-11-01T10:02:09.834Z",
              "updatedAt": "2021-05-03T10:31:15.850Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc54b7701f3487e885a4a07",
                    "text": "Please read *Chapter 25: Intelligent enemies* from the textbook *Learning C# by Programming Games*."
                  }
                ]
              },
              "publicKey": "vgx03udc0a71cwn9uplk"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733874024df7607069bf7",
              "languages": [],
              "searchString": "Adding side scrolling to Tick Tick adding side scrolling to tick tick addingsidescrollingtoticktick",
              "moduleId": "5ee733864024df4fe6069b86",
              "index": 1,
              "title": "Adding side scrolling to Tick Tick",
              "description": "",
              "createdAt": "2019-11-08T16:27:50.146Z",
              "updatedAt": "2021-05-03T10:31:15.859Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc5978c01f34876795a4a10",
                    "text": "The goal of this exercise is to extend the Tick Tick game so that levels can be larger than a single screen. You’ll work towards a version of Tick Tick in which levels can have any size. There will be a camera object that shows a certain part of the level, and this camera should follow the bomb character.\n\n* The first step is to extend the game engine so that you can define a *camera*. This camera defines which part of the world is currently being shown on the screen. Add a Camera class to the Engine library that decides which part of the world is currently being shown, for example by using a Rectangle. When drawing objects on the screen, you’ll now also have to take the position of the camera into account. To test your camera, try to run the program with a few different values for the camera position. Make sure that the camera works correctly in full-screen mode as well.\n\n* The next step is to allow levels to have any width and height, just like the puzzles from Penguin Pairs. Extend the game so that this works without problems. You may assume that a level is never smaller than the levels we already have.\n\n* Finally, to really add side scrolling behavior, the camera should *follow* the bomb character. There are a few different possibilities here. One option is to always (try to) show the character in the center of the screen. Another option is to keep the camera steady until the character crosses a certain boundary, such as at one-third and two-thirds of the visible screen. Extend the game so that the camera does one of these two things. Make sure that the camera never reaches outside the game world: for example, if the character runs into the far edges of the level or falls into a hole below the level, the camera shouldn’t move too far along with it.\n\n* Make sure that some objects are *not* sensitive to the camera’s position. For example, the UI elements drawn on the foreground should always stay in place, no matter where the camera is located. You may also want to create two different versions of the method that translates screen coordinates to world coordinates: one that uses the camera’s position and one that ignores it. Make sure that the player can still correctly click on objects that are clickable.\n\n* Since our levels can now be much bigger, 30 seconds may not be enough time for the player to reach the exit. Extend the game so that each level (file) specifies the number of seconds that the player has when the level starts. Create a few different levels that use this ability.\n\n* To create the illusion that the game is three-dimensional, it’s fun to let objects in the background ‘scroll more slowly’ than objects in the foreground. This effect is called *parallax scrolling*: look up some videos on the internet to see what we mean. Implement a parallax scrolling effect for the mountains in the background. The depth of a mountain should determine how slowly the mountain moves along with the camera."
                  }
                ]
              },
              "isOptional": true,
              "difficulty": 4,
              "publicKey": "kt3lcxvr2r2tn359xum2"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733874024dfef2c069bf8",
              "languages": [],
              "searchString": "Other extensions for Tick Tick other extensions for tick tick otherextensionsforticktick",
              "moduleId": "5ee733864024df4fe6069b86",
              "index": 2,
              "title": "Other extensions for Tick Tick",
              "description": "",
              "createdAt": "2019-11-08T16:32:13.370Z",
              "updatedAt": "2021-05-03T10:31:15.869Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc598a101f34822845a4a12",
                    "text": "Below are more suggestions for things you could add to the Tick Tick game. We’ve ranked them by difficulty.\n\n* (\\*) Extend the Rocket class so that when the bomb character jumps onto the rocket, the rocket dies.\n\n* (\\*\\*) Add an object to the game that makes the bomb character walk much faster or slower for a while. This object could be a tile or an item that can be picked up.\n\n* (\\*\\*) Add a health indicator for the player. Every time the bomb character touches an enemy, or if the character falls down from more than three tiles high, their health gets reduced by a certain amount. If the health reaches zero, the player dies. Add health packs to the game, so that the player can restore part of their health again.\n\n* (\\*\\*) Add a ‘shield’ item to the game that (temporarily) protects the player from taking damage.\n\n* (\\*\\*\\*) Add shooting behavior to the player. For example, you could allow the bomb character to shoot a bullet straight forward. If this bullet touches an enemy, the bullet disappears and the enemy dies. *Hint:* It’s easiest to allow only one bullet at a time, and to make this bullet visible and invisible at the right moments.\n\n* (\\*\\*\\*\\*) Try to make some of the enemies smarter. For example, can you add behavior to the flames so that they can jump from one platform to another? Or can you make the rockets smarter so that they sometimes follow the player?\n\n* (\\*\\*\\*\\*) Add hidden levels to the game. By going to a particular position in a level, the player can enter a hidden level. Of course, hidden levels should also be read from a file, just like normal levels. Programming-wise, think of a good class design where these hidden levels fit in. Gameplay-wise, think of a fun way to add secret entrances to the game. Will a secret entrance be completely invisible, or will you sometimes show a hint about its location?\n\n* (\\*\\*\\*\\*\\*) Add moving platforms to the game. If a character (the bomb or an enemy) is standing on a moving platform, he should move along with that platform. A moving platform should move back and forth between two points in the level. Extend your level files so that you can specify these two endpoints. This extension is quite difficult because you have to make some tough design choices. Is a moving platform a tile, or something else? And what consequence does this have for collision detection?\n\n* (\\*) Games often contain extras that don’t really add anything to the gameplay, but that just make the game more fun. An example of such an ‘easter egg’ is that a character says something ridiculous when you click on it. Extend the game such that when you click on the bomb character, the character says something funny, randomly selected from a set of sound files. You can use existing sound fragments, but you could also go crazy and record your own sounds with a microphone."
                  }
                ]
              },
              "isOptional": true,
              "difficulty": 4,
              "publicKey": "cnqigo8gskg98x9sk8x9"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733874024df5985069bf9",
              "languages": [],
              "searchString": "Deleting objects from the game world deleting objects from the game world deletingobjectsfromthegameworld",
              "moduleId": "5ee733864024df4fe6069b86",
              "index": 3,
              "title": "Deleting objects from the game world",
              "description": "",
              "createdAt": "2019-11-08T16:36:50.238Z",
              "updatedAt": "2021-05-03T10:31:15.886Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc599a601f348213a5a4a14",
                    "text": "In the game engine you’ve developed throughout this book, we can’t really *delete* objects from the game world yet. So far, whenever we wanted an object to disappear, we simply made it invisible. This is good enough for some games, but not for all of them.\n\nIn this final assignment of the course, you’ll experiment with deleting objects during the game. You’ll notice that this is pretty difficult to get right!\n\n* Give an example of a situation in which the ‘invisibility trick’ is not good enough. In other words: think of a game where it’s crucial that objects can truly be added and removed from the game world at any time.\n\n* Give the GameObjectList class a method with the following header: \n\n ```csharp\n public void RemoveChild(GameObject o)\n ```\n\n This method should remove the given object from the list of children, and it should reset the ‘parent’ reference of that object to null. An object with a parent should now be able to write the following: \n \n ```csharp\n (Parent as GameObjectList).RemoveChild(this);\n ```\n\n to remove itself from the game-object hierarchy.\n\n* In Tick Tick, use this new method to remove a `WaterDrop` object when the player touches it. Compile and run the game again: what happens now when you collect a water drop?\n\n* The problem is that we’re trying to remove an object from a list *during a loop through that same list*. In C#, if you try to do this during a `foreach` loop, an exception will be thrown. To solve this, change the `Update` method of `GameObjectList` so that it uses a regular for loop instead.\n\n* Now that objects can remove themselves, it’s better if the `Update` method loops through the list of children *backwards*, just like in the `HandleInpu`t method. Why is that?\n\n* There’s one more catch: the `Level` class still stores an *extra reference* to all `WaterDrop` objects. The water drops that have removed themselves from the hierarchy will still appear in this list. Can you think of a way to fix this problem? (As usual, there are multiple possibilities.)\n\nAs you can see, as soon as you allow objects to disappear from the game world, there are many extra things that you need to pay attention to. This is exactly why we’ve always been using the ‘invisibility trick’ instead: it was the best way to keep things simple, so that we could focus on teaching you programming concepts."
                  }
                ]
              },
              "isOptional": true,
              "difficulty": 4,
              "publicKey": "02bdqetr9wbiq5irgvdw"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5ee733874024dfc77f069bf6",
              "languages": [],
              "searchString": "Reading material reading material readingmaterial",
              "moduleId": "5ee733864024df4fe6069b86",
              "index": 0,
              "title": "Reading material",
              "description": "",
              "createdAt": "2019-11-01T10:02:09.834Z",
              "updatedAt": "2021-05-03T10:31:15.896Z",
              "__v": 1,
              "files": [],
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5dc5975301f3486cb55a4a0e",
                    "text": "Please read *Chapter 26: Finishing the game* from the textbook *Learning C# by Programming Games*."
                  }
                ]
              },
              "publicKey": "vz42wwjuob2egy6y4inl"
            }
          ]
        }
      ],
      "analyticsBlocks": [
        "5fc4d439e2e1c17b1026ec52",
        "5fc4d439e2e1c17b1026ec51",
        "5fc4d439e2e1c17b1026ec53",
        "5fc4d439e2e1c17b1026ec54",
        "5fc4d439e2e1c17b1026ec58",
        "5fc4d439e2e1c17b1026ec59",
        "5fc4d439e2e1c17b1026ec55",
        "5fc4d439e2e1c17b1026ec5a",
        "5fc4d439e2e1c17b1026ec56",
        "5fc4d439e2e1c17b1026ec57",
        "5fc4d439e2e1c17b1026ec5b"
      ],
      "archived": false,
      "demo": false,
      "visible": true,
      "_id": "5ee733864024dffe8b069b6c",
      "demoCourse": false,
      "closed": false,
      "organizationId": "5d78b2c29c536b0012658aec",
      "title": "Learning C# by Programming Games",
      "code": "version 2",
      "description": "This course contains all assignments and solutions from the book \"Learning C# by Programming Games\", second edition, by Wouter van Toll, Arjan Egges, and Jeroen Fokker.",
      "createdAt": "2019-10-31T21:27:59.450Z",
      "updatedAt": "2021-04-08T14:27:50.658Z",
      "__v": 1,
      "startDate": null,
      "endDate": null,
      "selectedImage": "lines",
      "publicCode": "MON3HZ"
    },
    {
      "modules": [
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "5f96e17eb94b9f90658ae907",
              "searchString": "Exercises II exercises ii exercisesii",
              "moduleId": "5f96e17eb94b9f10aa8ae900",
              "index": 2,
              "title": "Exercises II",
              "isOptional": false,
              "difficulty": 2,
              "files": [],
              "createdAt": "2020-08-28T08:51:19.145Z",
              "updatedAt": "2021-05-03T10:31:20.031Z",
              "__v": 1,
              "introduction": "This second block of exercises doesn't differ much from the previous block. You need to write five simple functions. The solutions will be available again. But this time you have to write the function definitions yourself. \n\nNote: \n* Stick to the _given function names and input parameter names_! Otherwise the checks will fail, even if your function works properly.\n* Your solutions may differ from mine. That's okay, as long as the functions return the correct values.\n\nNote II: __make a copy of the initial code in the 'Your answer' block__. You might lose it if you start submitting (wrong) solutions.\n",
              "publicKey": "7of1x81y327mrrtg39ph"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5f96e17eb94b9f43ae8ae906",
              "searchString": "Exercises I exercises i exercisesi",
              "moduleId": "5f96e17eb94b9f10aa8ae900",
              "index": 1,
              "title": "Exercises I",
              "isOptional": false,
              "difficulty": 1,
              "files": [],
              "createdAt": "2020-08-27T17:10:25.480Z",
              "updatedAt": "2021-05-03T10:31:20.051Z",
              "__v": 1,
              "introduction": "You've worked your way through Notebook 1 and now it's time to put your knowledge into practice. It's time to build some 'muscle memory'. \n\nBelow you will find six simple exercises. Every exercise, except the first one, contains a part of a function. Your job is to make sure they work like they are supposed to. It will only take 1 or 2 lines of code.\n\nNote: your solutions may differ from mine. That's okay, as long as the functions return the correct values.\n\nNote II: __make a copy of the initial code in the 'Your answer' block__. You might lose it if you start submitting (wrong) solutions.",
              "forceBlockOrder": false,
              "needsAssessment": true,
              "publicKey": "20i033pbnsrzafhohevi"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5f96e17eb94b9f885b8ae905",
              "searchString": "Materials materials",
              "moduleId": "5f96e17eb94b9f10aa8ae900",
              "index": 0,
              "title": "Materials",
              "isOptional": false,
              "difficulty": 0,
              "files": [
                {
                  "_id": "5f96e17eb94b9fcd6a8ae926",
                  "label": "notebook_cheat_sheet",
                  "mimetype": "application/pdf",
                  "extension": ".pdf",
                  "createdAt": "2020-09-24T18:29:33.246Z",
                  "updatedAt": "2020-09-24T18:29:33.246Z"
                },
                {
                  "_id": "5f96e17eb94b9f29d68ae927",
                  "label": "notebook_1",
                  "mimetype": "application/octet-stream",
                  "extension": ".ipynb",
                  "createdAt": "2020-10-05T19:39:08.317Z",
                  "updatedAt": "2020-10-05T19:39:08.317Z"
                }
              ],
              "createdAt": "2020-08-11T10:17:46.092Z",
              "updatedAt": "2021-05-06T15:41:03.750Z",
              "__v": 1,
              "introduction": "",
              "publicKey": "jic71jjqvz69lfcuzzjc"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5f96e17eb94b9f94f48ae904",
              "searchString": "Exercises III exercises iii exercisesiii",
              "moduleId": "5f96e17eb94b9f10aa8ae900",
              "index": 3,
              "title": "Exercises III",
              "isOptional": false,
              "difficulty": 4,
              "files": [
                {
                  "_id": "5f96e17eb94b9f79498ae91d",
                  "label": "hollow_cylinder",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 735,
                  "cropWidth": 559,
                  "createdAt": "2020-09-07T19:42:00.658Z",
                  "updatedAt": "2020-09-07T19:42:00.658Z"
                }
              ],
              "createdAt": "2020-08-28T17:26:54.959Z",
              "updatedAt": "2021-05-03T10:31:20.134Z",
              "__v": 1,
              "introduction": "The next three exercises are going to be a bit more difficult. Programming is about 'divide and conquer': you dissect a problem into smaller sub-problems and write code to address these sub-problems. It often comes down to writing 1 or more functions per sub-problem. That's different than the 1-function problems that you have seen so far. Juggling with more than one function is something that you should get used to. That's the main goal of these exercises.\n\nAs with the previous exercises, the solutions are available. These may differ from your code.\n\nNote: __make a copy of the initial code in the 'Your answer' block__. You might lose it if you start submitting (wrong) solutions.",
              "publicKey": "gn36r35ob4p0wer9qtv3"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "5f96e17eb94b9f3c928ae909",
              "searchString": "Materials materials",
              "moduleId": "5f96e17eb94b9fa3e48ae901",
              "index": 0,
              "title": "Materials",
              "isOptional": false,
              "difficulty": 0,
              "files": [
                {
                  "_id": "5f96e17eb94b9f4b6b8ae912",
                  "label": "notebook_2",
                  "mimetype": "application/octet-stream",
                  "extension": ".ipynb",
                  "createdAt": "2020-10-11T18:58:56.545Z",
                  "updatedAt": "2020-10-11T18:58:56.545Z"
                }
              ],
              "createdAt": "2020-08-31T17:16:30.877Z",
              "updatedAt": "2021-05-03T10:31:20.043Z",
              "__v": 1,
              "introduction": "",
              "publicKey": "y3id5qqu3qlxc7nptsg4"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5f96e17eb94b9f56b98ae908",
              "searchString": "Exercises I exercises i exercisesi",
              "moduleId": "5f96e17eb94b9fa3e48ae901",
              "index": 1,
              "title": "Exercises I",
              "isOptional": false,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-10-11T08:33:11.281Z",
              "updatedAt": "2021-05-03T10:31:20.061Z",
              "__v": 1,
              "introduction": "This is a short test to check whether certain concepts are understood. Look at the code examples and tell me if they are well constructed or not. I have deliberately kept the possible answers very short. 'Wrong' can have 2 meanings: the code may not work, or it may be poorly programmed. The short variable names are not part of the problem if there is one.\n\n\nYou either see it, or you don't! Good luck.",
              "publicKey": "yjv12ikotkqenmg8htvm"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5f96e17eb94b9f3d678ae90a",
              "searchString": "Exercises II exercises ii exercisesii",
              "moduleId": "5f96e17eb94b9fa3e48ae901",
              "index": 2,
              "title": "Exercises II",
              "isOptional": false,
              "difficulty": null,
              "files": [],
              "createdAt": "2020-08-31T17:16:01.369Z",
              "updatedAt": "2021-05-03T10:31:20.078Z",
              "__v": 1,
              "introduction": "I hope you know the drill by now. In this block of exercises I will test your abilities to write functions, apply __default arguments__ and use (sometimes nested) __conditionals__. Solutions will be provided. Your solutions might differ from mine.\n\nNote: __make a copy of the initial code in the 'Your answer' block__. You might lose it if you start submitting (wrong) solutions.",
              "publicKey": "2bsnmql8hx6laz4le34l"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "5f96e17eb94b9f1ad18ae90c",
              "searchString": "Materials materials",
              "moduleId": "5f96e17eb94b9f780e8ae902",
              "index": 0,
              "title": "Materials",
              "isOptional": false,
              "difficulty": 0,
              "files": [
                {
                  "_id": "5f96e17eb94b9f274e8ae914",
                  "label": "notebook_3",
                  "mimetype": "application/octet-stream",
                  "extension": ".ipynb",
                  "createdAt": "2020-10-21T11:07:03.689Z",
                  "updatedAt": "2020-10-21T11:07:03.689Z"
                }
              ],
              "createdAt": "2020-09-04T10:09:06.541Z",
              "updatedAt": "2021-05-03T10:31:20.088Z",
              "__v": 1,
              "introduction": "Here's this week's Notebook:\n\n```button\nlabel: notebook_3\ntext: Download Jupyter Notebook 3\nposition:left\n```\n\nThis week's videos:\n\n1. [Lists (8 mins)](https://drive.google.com/file/d/16htjT6vkCXK6I3geCw4FJurE6pGg47Jt/view?usp=sharing)\n2. [List operators and functions (8 mins)](https://drive.google.com/file/d/1A0Q8fxw5ICljpwhKxjwzT2O0cB5vsujt/view?usp=sharing)\n3. [List mutability (3 mins)](https://drive.google.com/file/d/1SW2uRlmsFFc8fTOBiRnGZU11k3ehxRLT/view?usp=sharing)\n4. [For-loops (12 mins)](https://drive.google.com/file/d/1JcqpXRC39hFLh9OnxgBn22qqL00S11lb/view?usp=sharing)\n\nIt's also possible to access the entire video folder [by using this link](https://drive.google.com/drive/folders/1Ez2SpHDn0Sf5uY2QfwYP5Lnim4deRiq5?usp=sharing)",
              "publicKey": "yiunt1jch5q0rdnqowc4"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5f96e17eb94b9f9fca8ae90b",
              "searchString": "Exercises II exercises ii exercisesii",
              "moduleId": "5f96e17eb94b9f780e8ae902",
              "index": 2,
              "title": "Exercises II",
              "isOptional": false,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-09-04T10:10:24.459Z",
              "updatedAt": "2021-05-03T10:31:20.115Z",
              "__v": 1,
              "needsAssessment": true,
              "introduction": "These exercises are meant to assess your ability to work with lists. Your solutions might differ from mine.\n\nNote: __make a copy of the initial code in the 'Your answer' block__. You might lose it if you start submitting (wrong) solutions.",
              "publicKey": "ne6ld8wu98tn39bd23io"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5f96e17eb94b9f2f2e8ae90d",
              "searchString": "Exercises III exercises iii exercisesiii",
              "moduleId": "5f96e17eb94b9f780e8ae902",
              "index": 3,
              "title": "Exercises III",
              "isOptional": false,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-09-04T10:10:49.357Z",
              "updatedAt": "2021-05-03T10:31:20.142Z",
              "__v": 1,
              "introduction": "These exercises are meant to assess your ability to work with lists _and_ for-loops. Your solutions might differ from mine.\n\nNote: __make a copy of the initial code in the 'Your answer' block__. You might lose it if you start submitting (wrong) solutions.",
              "publicKey": "utu71kudjx3ib6w8tvxs"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5f96e17eb94b9f94cd8ae90e",
              "searchString": "Exercises I exercises i exercisesi",
              "moduleId": "5f96e17eb94b9f780e8ae902",
              "index": 1,
              "title": "Exercises I",
              "isOptional": false,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-10-14T14:49:22.177Z",
              "updatedAt": "2021-05-03T10:31:20.152Z",
              "__v": 1,
              "introduction": "Like in the previous week we start with a short test to check whether certain concepts are understood.",
              "publicKey": "zvaeelwejcrh9nr5ow2d"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "5f96e17eb94b9f3d2c8ae910",
              "searchString": "Exercises II, Pandas exercises ii, pandas exercises ii pandas exercisesiipandas",
              "moduleId": "5f96e17eb94b9f9db88ae903",
              "index": 2,
              "title": "Exercises II, Pandas",
              "isOptional": false,
              "difficulty": 0,
              "files": [
                {
                  "_id": "5f96e17eb94b9f1c628ae916",
                  "label": "MTB",
                  "mimetype": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                  "extension": ".xlsx",
                  "createdAt": "2020-09-09T17:21:34.344Z",
                  "updatedAt": "2020-09-09T17:21:34.344Z"
                }
              ],
              "createdAt": "2020-09-07T18:09:14.854Z",
              "updatedAt": "2021-05-03T10:31:20.070Z",
              "__v": 1,
              "needsAssessment": true,
              "forceBlockOrder": true,
              "introduction": "This set of exercises is about the basic use of Pandas. The goal here is to get comfortable with the examples in this week's Notebook. We are going to use a CSV file ('MTB.csv') that can be found on Github. This file contains Mountain Bike (MTB) data: distance, heart rates, maximum speed, etc. It can be found here:\n\n\n'https://raw.githubusercontent.com/cskaandorp/python_ws_quarterfall/master/data/MTB.csv'\n\n\nYou need to import Pandas and read the Excel sheet into a DataFrame! The first time, you have to do this yourself. After the first exercise, I will provide code-snippets that will take care of this. These snippets won't be necessary if you are using a Notebook; having the import and read statements in your first Notebook cell is enough. I need them for testing purposes, and some people might need them if they use a different Python environment.\n\nHere is a short description of the most relevant columns in MTB.csv:\n\n1. `Distance`: Distance of MTB session\n2. `Time`: Duration of a MTB session \n3. `Aerobic TE`: Training effect, a value between 1 (no impact) and 5 (overachieving)\n4. `Avg HR`: Average heart rate during session\n5. `Max HR`: Maximum heart rate during session\n6. `Avg Speed`: Average speed\n7. `Max Speed`: Maximum speed\n\nNote: __make a copy of the initial code in the 'Your answer' block__. You might lose it if you start submitting (wrong) solutions.",
              "publicKey": "lz7z708he9f81qwr47dp"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5f96e17eb94b9f37cd8ae911",
              "searchString": "Exercises I exercises i exercisesi",
              "moduleId": "5f96e17eb94b9f9db88ae903",
              "index": 1,
              "title": "Exercises I",
              "isOptional": false,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-09-05T12:54:19.767Z",
              "updatedAt": "2021-05-03T10:31:20.097Z",
              "__v": 1,
              "introduction": "This block of exercises is again intended to assess whether you can work with lists and for loops. One assignment requires importing the `math` module. Do I need to mention that your solutions might differ from mine?\n\nNote: __make a copy of the initial code in the 'Your answer' block__. You might lose it if you start submitting (wrong) solutions.",
              "publicKey": "w8be80icobdwlc7suzr3"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5f96e17eb94b9f0f408ae90f",
              "searchString": "Materials materials",
              "moduleId": "5f96e17eb94b9f9db88ae903",
              "index": 0,
              "title": "Materials",
              "isOptional": false,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-09-05T12:54:03.399Z",
              "updatedAt": "2021-05-03T10:31:20.107Z",
              "__v": 1,
              "publicKey": "yldshbc4jiprdwhexk0f"
            }
          ]
        }
      ],
      "analyticsBlocks": [
        "5fc4d43ae2e1c17b1026ed9b",
        "5fc4d43ae2e1c17b1026ed9c",
        "5fc4d43ae2e1c17b1026ed9d",
        "5fc4d43ae2e1c17b1026eda1",
        "5fc4d43ae2e1c17b1026eda2",
        "5fc4d43ae2e1c17b1026eda4",
        "5fc4d43ae2e1c17b1026eda0",
        "5fc4d43ae2e1c17b1026eda3",
        "5fc4d43ae2e1c17b1026ed9e",
        "5fc4d43ae2e1c17b1026ed9f",
        "5fc4d43ae2e1c17b1026eda5"
      ],
      "archived": false,
      "demo": false,
      "visible": false,
      "_id": "5f96e17eb94b9f55f08ae8ff",
      "organizationId": "5db2f52467230ad36e8c3cdc",
      "title": "Introduction to Python (from Casper Kaandorp, ICT Beta)",
      "description": "The basics of Python",
      "createdAt": "2020-08-11T10:12:49.709Z",
      "updatedAt": "2021-03-06T13:17:40.718Z",
      "__v": 1,
      "selectedImage": "tiles",
      "publicCode": "OAVMNB"
    },
    {
      "modules": [
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "600febd8f6ceaa6460a35204",
              "languages": [],
              "searchString": "Download Times download times downloadtimes",
              "moduleId": "600febd8f6ceaa8601a351fe",
              "index": 1,
              "title": "Download Times",
              "createdAt": "2019-12-11T10:12:33.329Z",
              "updatedAt": "2021-05-03T10:31:35.537Z",
              "__v": 1,
              "files": [
                {
                  "_id": "600febd8f6ceaa575aa3520c",
                  "label": "Downloads",
                  "mimetype": "image/jpeg",
                  "extension": ".jpg",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 201,
                  "cropWidth": 348,
                  "createdAt": "2020-06-12T09:43:12.700Z",
                  "updatedAt": "2020-06-12T09:43:12.700Z"
                }
              ],
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [
                      {
                        "id": "feputvzddfwoswbj",
                        "type": "feedback",
                        "condition": "answer == 3",
                        "text": "That's correct."
                      },
                      {
                        "id": "rkoubufihlzrfaed",
                        "type": "feedback",
                        "condition": "answer != 3",
                        "text": "That's not correct. Try again."
                      }
                    ],
                    "_id": "5df0c1184fd2a7738af6711e",
                    "text": "When downloading multiple files from the internet at the same time, the downloads share the capacity of the connection between them, each getting the same share. For example, when downloading 10 files at the same time, each of the downloads can use 1/10 of the capacity. Downloading a single file would be ten times as fast.\n\nNow consider the following situation: A user is downloading 4 files at the same time. For each file the remaining download time is displayed as follows:\n\n```image\nlabel: Downloads\nsize: small\n```\n\nThis time is calculated based on the capacity of the Internet connection (which stays the same all the time). How many minutes will it take until all 4 files have finished downloading?",
                    "solution": "The correct answer is *3 minutes*.\n\nAfter 1 minute, downloads 1 and 3 are finished, and the downloads 2 and 4 have 6 and 2 minutes remaining, respectively. Instead of sharing the available capacity among 4, they only share it among 2 now, so the download is twice as fast, so they have 3 and 1 minutes remaining. Thus, after 1 more minute, download 4 is finished and download 2 has 2 minutes left. It can now use the full capacity and is again twice as fast as before, so it finishes after just another minute.",
                    "editor": "number"
                  }
                ]
              },
              "publicKey": "4gkumxupb72a862rcru7"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "600febd8f6ceaa86bea35203",
              "languages": [],
              "searchString": "Filter filter",
              "moduleId": "600febd8f6ceaa8601a351fe",
              "index": 5,
              "title": "Filter",
              "createdAt": "2019-12-11T10:23:46.254Z",
              "updatedAt": "2021-05-03T10:31:35.545Z",
              "__v": 1,
              "files": [
                {
                  "_id": "600febd8f6ceaa931aa3520e",
                  "label": "Filter_procedure",
                  "mimetype": "image/jpeg",
                  "extension": ".jpg",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 126,
                  "cropWidth": 194,
                  "createdAt": "2020-06-12T09:43:12.702Z",
                  "updatedAt": "2020-06-12T09:43:12.702Z"
                },
                {
                  "_id": "600febd8f6ceaaeaa7a3520f",
                  "label": "Filter_input",
                  "mimetype": "image/jpeg",
                  "extension": ".jpg",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 89,
                  "cropWidth": 95,
                  "createdAt": "2020-06-12T09:43:12.702Z",
                  "updatedAt": "2020-06-12T09:43:12.702Z"
                },
                {
                  "_id": "600febd8f6ceaaf27da35210",
                  "label": "Filter_answer_a",
                  "mimetype": "image/jpeg",
                  "extension": ".jpg",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 89,
                  "cropWidth": 88,
                  "createdAt": "2020-06-12T09:43:12.702Z",
                  "updatedAt": "2020-06-12T09:43:12.702Z"
                },
                {
                  "_id": "600febd8f6ceaa4a3ea35211",
                  "label": "Filter_answer_b",
                  "mimetype": "image/jpeg",
                  "extension": ".jpg",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 91,
                  "cropWidth": 90,
                  "createdAt": "2020-06-12T09:43:12.702Z",
                  "updatedAt": "2020-06-12T09:43:12.702Z"
                },
                {
                  "_id": "600febd8f6ceaa5961a35212",
                  "label": "Filter_answer_c",
                  "mimetype": "image/jpeg",
                  "extension": ".jpg",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 86,
                  "cropWidth": 87,
                  "createdAt": "2020-06-12T09:43:12.702Z",
                  "updatedAt": "2020-06-12T09:43:12.702Z"
                },
                {
                  "_id": "600febd8f6ceaa6c59a35213",
                  "label": "Filter_answer_d",
                  "mimetype": "image/jpeg",
                  "extension": ".jpg",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 86,
                  "cropWidth": 86,
                  "createdAt": "2020-06-12T09:43:12.702Z",
                  "updatedAt": "2020-06-12T09:43:12.702Z"
                }
              ],
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5df0c3bd4fd2a75737f67128",
                    "text": "A gray-scale bitmap can be saved as a table, with values of 1 to 5 for each pixel. The value 1 stands for *black*, the value 5 stands for *white*, and the values 2 to 4 stands for the lighter-getting shades of gray between them.\n\nA filtering algorithm computes a picture of same size for a given original according to the following procedure:\n\n```image\nlabel: Filter_procedure\n```\n\nFor each pixel in the original picture, it takes the value of the pixel and its eight neighboring pixels, sorts them from smallest to largest, and then takes the value in the middle, i.e. the 5th of 9 values, as the new value of the pixel in the filtered picture."
                  },
                  {
                    "contentType": "multipleChoiceQuestion",
                    "choices": [
                      {
                        "id": "gqgsslosvjcrhkot",
                        "text": "```image\nlabel: Filter_answer_a\nposition: left\n```",
                        "correct": true,
                        "label": "A"
                      },
                      {
                        "id": "hnhqznlendmefazu",
                        "text": "```image\nlabel: Filter_answer_b\nposition: left\n```",
                        "correct": false,
                        "label": "B"
                      },
                      {
                        "id": "xvxjpaelacvbhaqs",
                        "text": "```image\nlabel: Filter_answer_c\nposition: left\n```",
                        "correct": false,
                        "label": "C"
                      },
                      {
                        "id": "dbwfyfftkpijqejd",
                        "text": "```image\nlabel: Filter_answer_d\nposition: left\n```",
                        "correct": false,
                        "label": "D"
                      }
                    ],
                    "actions": [
                      {
                        "id": "zhctsloapdasjcps",
                        "type": "feedback",
                        "condition": "A",
                        "text": "That's correct."
                      },
                      {
                        "id": "eudnymkotnosbnko",
                        "type": "feedback",
                        "condition": "!A",
                        "text": "That's not correct. Try again."
                      }
                    ],
                    "_id": "5df0c3fd4fd2a70cd2f67129",
                    "text": "Suppose we apply the filtering algorithm to the following picture:\n\n```image\nlabel: Filter_input\n```\n\nWhich of the following options is the result?",
                    "solution": "The procedure turns each pixel into an median representation of its\nsurroundings, so the darker gray in next to white or lighter gray pixels become even lighter, while the white areas stay the same."
                  }
                ]
              },
              "publicKey": "dmtqbx7mi36e4lwir7sk"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "600febd8f6ceaa43d0a35200",
              "languages": [],
              "searchString": "Maximal gain maximal gain maximalgain",
              "moduleId": "600febd8f6ceaa8601a351fe",
              "index": 2,
              "title": "Maximal gain",
              "createdAt": "2019-12-11T10:15:06.990Z",
              "updatedAt": "2021-05-03T10:31:35.555Z",
              "__v": 1,
              "files": [
                {
                  "_id": "600febd8f6ceaa074ba3521a",
                  "label": "Grid",
                  "mimetype": "image/jpeg",
                  "extension": ".jpg",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 219,
                  "cropWidth": 259,
                  "createdAt": "2020-06-12T09:43:12.701Z",
                  "updatedAt": "2020-06-12T09:43:12.701Z"
                }
              ],
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [
                      {
                        "id": "nvzmceypbtulabfl",
                        "type": "feedback",
                        "condition": "answer==14",
                        "text": "That's correct!"
                      },
                      {
                        "id": "nigpoavbzeeotage",
                        "type": "feedback",
                        "condition": "answer!=14",
                        "text": "That's not correct. Try again."
                      }
                    ],
                    "_id": "5df0c1ae4fd2a781d5f67120",
                    "text": "The grid below contains numbers and two fields `S` (for start) and `G` (for goal). The task: Find the path from `S` to `G` on which the sum of the numbers on the visited fields is the highest. But: you are only allowed to step upwards and to the right (not down or to the left). What is the maximal sum that can be gained this way?\n\n```image\nlabel: Grid\n```",
                    "solution": "The correct answer is *14*, for example through the following steps: up up right right right up right up.\n\nLater in the course we will look at how we can use a program to compute the best path through a grid like this.",
                    "editor": "number"
                  }
                ]
              },
              "publicKey": "u7czugjwjzjhg6egczgu"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "600febd8f6ceaa154ea35202",
              "languages": [],
              "searchString": "Extra extra",
              "moduleId": "600febd8f6ceaa8601a351fe",
              "index": 6,
              "title": "Extra",
              "isOptional": true,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-02-03T17:50:41.416Z",
              "updatedAt": "2021-05-03T10:31:35.564Z",
              "__v": 1,
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5e385d75a14e59312f48f26e",
                    "text": "Solving puzzles like the ones in this module is a great way to train all sorts of computational thinking skills “unplugged”, i.e. without actually using a computer. If you would like to do more puzzles, right now or later, [cs4fn Computational Thinking Puzzles Issue 1] (https://cs4fndownloads.wordpress.com/computational-thinking-puzzles-issue-1/) is a great resource for you.\n\nThe exercises for this module have been adapted from selected [Bebras](https://www.bebras.org/) questions. "
                  }
                ]
              },
              "publicKey": "hea7p6ubj8mdkprocfik"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "600febd8f6ceaa0a11a35205",
              "languages": [],
              "searchString": "Lecture Notes lecture notes lecturenotes",
              "moduleId": "600febd8f6ceaa8601a351fe",
              "index": 0,
              "title": "Lecture Notes",
              "isOptional": false,
              "difficulty": 0,
              "files": [
                {
                  "_id": "601af4c3a4b5cd0109c7739b",
                  "label": "drawing1",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 310,
                  "cropWidth": 371,
                  "createdAt": "2021-02-03T19:08:52.583Z",
                  "updatedAt": "2021-02-03T19:08:52.583Z"
                },
                {
                  "_id": "601af4caa4b5cd2b21c773a0",
                  "label": "drawing2",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 318,
                  "cropWidth": 1401,
                  "createdAt": "2021-02-03T19:08:58.846Z",
                  "updatedAt": "2021-02-03T19:08:58.846Z"
                },
                {
                  "_id": "601af4cfa4b5cd6624c773a5",
                  "label": "turtlegraphics",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 610,
                  "cropWidth": 715,
                  "createdAt": "2021-02-03T19:09:03.847Z",
                  "updatedAt": "2021-02-03T19:09:03.847Z"
                }
              ],
              "createdAt": "2020-02-05T15:42:48.349Z",
              "updatedAt": "2021-05-03T10:31:35.574Z",
              "__v": 7,
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5e3ae27ed1cad69fba53e59d",
                    "text": "To allow your recap the first lectures (there are no actual lecture notes for this one) here the slides and Mentimeter answers. \n\n```file\n    label: Intro\n```\n\n```file\n    label: MentiResults\n```\n\n```file\n    label: Quarterfall\n```\n\n"
                  }
                ]
              },
              "publicKey": "71oehz363qz80pds5m89"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "600febd8f6ceaad534a35201",
              "languages": [],
              "searchString": "Quarters quarters",
              "moduleId": "600febd8f6ceaa8601a351fe",
              "index": 4,
              "title": "Quarters",
              "createdAt": "2019-12-11T10:19:49.630Z",
              "updatedAt": "2021-05-03T10:31:35.582Z",
              "__v": 1,
              "files": [
                {
                  "_id": "600febd8f6ceaa35f4a35206",
                  "label": "Bitmap",
                  "mimetype": "image/jpeg",
                  "extension": ".jpg",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 80,
                  "cropWidth": 169,
                  "createdAt": "2020-06-12T09:43:12.702Z",
                  "updatedAt": "2020-06-12T09:43:12.702Z"
                },
                {
                  "_id": "600febd8f6ceaae585a35207",
                  "label": "Bitmap_examples",
                  "mimetype": "image/jpeg",
                  "extension": ".jpg",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 94,
                  "cropWidth": 296,
                  "createdAt": "2020-06-12T09:43:12.702Z",
                  "updatedAt": "2020-06-12T09:43:12.702Z"
                },
                {
                  "_id": "600febd8f6ceaa20aea35208",
                  "label": "Bitmap_question",
                  "mimetype": "image/jpeg",
                  "extension": ".jpg",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 133,
                  "cropWidth": 127,
                  "createdAt": "2020-06-12T09:43:12.702Z",
                  "updatedAt": "2020-06-12T09:43:12.702Z"
                }
              ],
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5df0c2d84fd2a74489f67124",
                    "text": "Black-and-white bitmaps can be represented with the binary characters 0 and 1, as illustrated here:\n\n```image\nlabel: Bitmap\n```\n\nA 0 stands for a white pixel, and a 1 for a black pixel. A picture with 4 x 4 pixels can thus be encoded with 16 characters, and a picture with 8 x 8 pixels with 64 characters.\n\nMany pictures can however also be represented with less characters. Therefore the characters are arranged in a square raster, and the following procedure is applied:\n- If all characters in the raster are 0, the result is the character 0.\n- If all characters in the raster are 1, the result is the character 1.\n- Otherwise the raster is split into 4 rasters of same size, and the procedure is applied to all of these rasters, starting with the upper left and proceeding in clock-wise direction. The result is then created as follows: The four results are written after one another, between the parentheses ( and ).\n\nHere are three examples of how the procedure works on a 4 x 4 raster:\n\n```image\nlabel: Bitmap_examples\n```"
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [
                      {
                        "id": "vxpvygeyvbkvtwiz",
                        "type": "feedback",
                        "condition": "answer==\"(111(1(1011)11))\"",
                        "text": "That's correct."
                      },
                      {
                        "id": "elrepekaerolarig",
                        "type": "feedback",
                        "condition": "answer!=\"(111(1(1011)11))\"",
                        "text": "That's not correct. Try again."
                      }
                    ],
                    "_id": "5df0c34a4fd2a70d61f67125",
                    "text": "What is the result for the 8 x 8 raster below?\n\n```image\nlabel: Bitmap_question\n```",
                    "solution": "`(111(1(1011)11))`"
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [
                      {
                        "id": "rkdctmvtuxixffkd",
                        "type": "feedback",
                        "condition": "answer==0",
                        "text": "That's correct."
                      },
                      {
                        "id": "wsauytadexsnwyte",
                        "type": "feedback",
                        "condition": "answer!=0",
                        "text": "That's not correct. Try again."
                      }
                    ],
                    "_id": "5df0c36c4fd2a767a8f67126",
                    "text": "How many characters would the procedure save when applied on the smiley bitmap above?",
                    "solution": "None. With the splits as defined in the procedure, there is never a square\nwith pixels of the same color, so it does not save anything.",
                    "editor": "number"
                  }
                ]
              },
              "publicKey": "bk76ahb0w4p8ni358i4b"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "600febd8f6ceaade69a351ff",
              "languages": [],
              "searchString": "Number segments number segments numbersegments",
              "moduleId": "600febd8f6ceaa8601a351fe",
              "index": 3,
              "title": "Number segments",
              "createdAt": "2019-12-11T10:16:57.367Z",
              "updatedAt": "2021-05-03T10:31:35.591Z",
              "__v": 1,
              "files": [
                {
                  "_id": "600febd8f6ceaae730a35222",
                  "label": "Floors",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 95,
                  "cropWidth": 608,
                  "createdAt": "2020-06-12T09:43:12.702Z",
                  "updatedAt": "2020-06-12T09:43:12.702Z"
                }
              ],
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "multipleChoiceQuestion",
                    "choices": [
                      {
                        "id": "ytevdahslahgxymb",
                        "text": "the top element",
                        "correct": false,
                        "label": "A"
                      },
                      {
                        "id": "bqjthtfsfbuhuwxc",
                        "text": "the center element",
                        "correct": false,
                        "label": "B"
                      },
                      {
                        "id": "ojbjbwjbttcbfrde",
                        "text": "the bottom element",
                        "correct": true,
                        "label": "C"
                      },
                      {
                        "id": "okeifigxybeczivr",
                        "text": "the element on the upper left",
                        "correct": false,
                        "label": "D"
                      },
                      {
                        "id": "gqyqxmuemyseydzj",
                        "text": "the element on the lower left",
                        "correct": false,
                        "label": "E"
                      },
                      {
                        "id": "bxtuwkrzrafpogbq",
                        "text": "the element on the upper right",
                        "correct": false,
                        "label": "F"
                      },
                      {
                        "id": "xkowwjuholxrhhrp",
                        "text": "the element on the lower right",
                        "correct": true,
                        "label": "G"
                      }
                    ],
                    "actions": [
                      {
                        "id": "ehwvcaluyjjgbvdv",
                        "type": "feedback",
                        "condition": "(C || G) && !A && !B && !D && !E && !F",
                        "text": "That's correct!"
                      },
                      {
                        "id": "xzzodwhanhotmpty",
                        "type": "feedback",
                        "condition": "!((C || G) && !A && !B && !D && !E && !F)",
                        "text": "That's not correct! Try again."
                      }
                    ],
                    "_id": "5e386066a14e59b14c48f26f",
                    "multipleCorrect": true,
                    "text": "In a house with 10 floors the lift shows the current floor with a 7-segment digital number display. The numbers 0 (for ground floor) to 9 look like this:\n\n```image\nlabel: Floors\nsize: medium\n```\n\nThus, to display a number, at least 2 and at most 7 of the segments are switched on.\n\nRecently one of the segments was broken and did not switch on at all. Nevertheless it was possible to recognize all numbers and tell them apart. Which segment could have been the broken one?",
                    "solution": "There are two possible answers: the bottom element or the one on the lower right."
                  }
                ]
              },
              "publicKey": "g7m95c5mad3fx0lvtos1"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "601af873a4b5cd3737c7741b",
              "searchString": "Understanding Activity Diagrams understanding activity diagrams understandingactivitydiagrams",
              "moduleId": "601af7fca4b5cd40a8c7740e",
              "index": 1,
              "title": "Understanding Activity Diagrams",
              "files": [
                {
                  "_id": "601af936a4b5cdb7dac77463",
                  "label": "uml_slime",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 753,
                  "cropWidth": 1601,
                  "createdAt": "2021-02-03T19:27:51.128Z",
                  "updatedAt": "2021-02-03T19:27:51.128Z"
                },
                {
                  "_id": "601afc43a4b5cd2e48c77550",
                  "label": "uml_eggs",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 250,
                  "cropWidth": 900,
                  "createdAt": "2021-02-03T19:40:52.522Z",
                  "updatedAt": "2021-02-03T19:40:52.522Z"
                },
                {
                  "_id": "601eb2e3a4b5cdcaeec7cf9b",
                  "label": "uml_slime_A",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 357,
                  "cropWidth": 737,
                  "createdAt": "2021-02-06T15:16:52.066Z",
                  "updatedAt": "2021-02-06T15:16:52.066Z"
                },
                {
                  "_id": "601eb2eaa4b5cd0580c7cfa0",
                  "label": "uml_slime_B",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 347,
                  "cropWidth": 747,
                  "createdAt": "2021-02-06T15:16:58.843Z",
                  "updatedAt": "2021-02-06T15:16:58.843Z"
                },
                {
                  "_id": "601eb2f1a4b5cd30aac7cfa5",
                  "label": "uml_slime_C",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 357,
                  "cropWidth": 824,
                  "createdAt": "2021-02-06T15:17:05.637Z",
                  "updatedAt": "2021-02-06T15:17:05.637Z"
                },
                {
                  "_id": "601eb2f9a4b5cdb48fc7cfaa",
                  "label": "uml_slime_D",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 355,
                  "cropWidth": 749,
                  "createdAt": "2021-02-06T15:17:13.900Z",
                  "updatedAt": "2021-02-06T15:17:13.900Z"
                }
              ],
              "createdAt": "2021-02-03T19:24:35.765Z",
              "updatedAt": "2021-05-03T10:31:37.815Z",
              "__v": 7,
              "publicKey": "lnc8f3h4yoa88d933hta"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "601af89ba4b5cd47d3c77428",
              "searchString": "Lecture Notes lecture notes lecturenotes",
              "moduleId": "601af7fca4b5cd40a8c7740e",
              "index": 0,
              "title": "Lecture Notes",
              "files": [
                {
                  "_id": "601bb29fa4b5cd341ec78b9b",
                  "label": "uml_activity",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 78,
                  "cropWidth": 147,
                  "createdAt": "2021-02-04T08:38:55.764Z",
                  "updatedAt": "2021-02-04T08:38:55.764Z"
                },
                {
                  "_id": "601bb2a7a4b5cd587dc78ba0",
                  "label": "uml_crossing_street",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 160,
                  "cropWidth": 570,
                  "createdAt": "2021-02-04T08:39:03.957Z",
                  "updatedAt": "2021-02-04T08:39:03.957Z"
                },
                {
                  "_id": "601bb2afa4b5cdc584c78ba5",
                  "label": "uml_decision",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 97,
                  "cropWidth": 152,
                  "createdAt": "2021-02-04T08:39:11.770Z",
                  "updatedAt": "2021-02-04T08:39:11.770Z"
                },
                {
                  "_id": "601bb2bba4b5cd79a1c78baa",
                  "label": "uml_eggs",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 250,
                  "cropWidth": 900,
                  "createdAt": "2021-02-04T08:39:24.394Z",
                  "updatedAt": "2021-02-04T08:39:24.394Z"
                },
                {
                  "_id": "601bb2c6a4b5cd40d4c78bb2",
                  "label": "uml_example1",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 100,
                  "cropWidth": 880,
                  "createdAt": "2021-02-04T08:39:34.534Z",
                  "updatedAt": "2021-02-04T08:39:34.534Z"
                },
                {
                  "_id": "601bb2d1a4b5cd62f7c78bb7",
                  "label": "uml_example2",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 220,
                  "cropWidth": 1150,
                  "createdAt": "2021-02-04T08:39:45.668Z",
                  "updatedAt": "2021-02-04T08:39:45.668Z"
                },
                {
                  "_id": "601bb2d7a4b5cdc09cc78bbc",
                  "label": "uml_example3",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 200,
                  "cropWidth": 770,
                  "createdAt": "2021-02-04T08:39:52.126Z",
                  "updatedAt": "2021-02-04T08:39:52.126Z"
                },
                {
                  "_id": "601bb2dea4b5cdb74bc78bc1",
                  "label": "uml_example5",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 190,
                  "cropWidth": 820,
                  "createdAt": "2021-02-04T08:39:58.967Z",
                  "updatedAt": "2021-02-04T08:39:58.967Z"
                },
                {
                  "_id": "601bb2e4a4b5cd1cccc78bc6",
                  "label": "uml_example4",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 260,
                  "cropWidth": 520,
                  "createdAt": "2021-02-04T08:40:05.301Z",
                  "updatedAt": "2021-02-04T08:40:05.301Z"
                },
                {
                  "_id": "601bb2eca4b5cde50dc78bcb",
                  "label": "uml_example6",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 481,
                  "cropWidth": 936,
                  "createdAt": "2021-02-04T08:40:12.765Z",
                  "updatedAt": "2021-02-04T08:40:12.765Z"
                },
                {
                  "_id": "601bb2f5a4b5cd2730c78bd0",
                  "label": "uml_final_node",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 54,
                  "cropWidth": 50,
                  "createdAt": "2021-02-04T08:40:22.090Z",
                  "updatedAt": "2021-02-04T08:40:22.090Z"
                },
                {
                  "_id": "601bb2ffa4b5cd4fc0c78bd6",
                  "label": "uml_fork",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 86,
                  "cropWidth": 176,
                  "createdAt": "2021-02-04T08:40:31.430Z",
                  "updatedAt": "2021-02-04T08:40:31.430Z"
                },
                {
                  "_id": "601bb308a4b5cd05dac78bdd",
                  "label": "uml_hierarchy",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 484,
                  "cropWidth": 1105,
                  "createdAt": "2021-02-04T08:40:41.342Z",
                  "updatedAt": "2021-02-04T08:40:41.342Z"
                },
                {
                  "_id": "601bb314a4b5cd4153c78be2",
                  "label": "uml_join",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 77,
                  "cropWidth": 171,
                  "createdAt": "2021-02-04T08:40:53.044Z",
                  "updatedAt": "2021-02-04T08:40:53.044Z"
                },
                {
                  "_id": "601bb31fa4b5cd7649c78be7",
                  "label": "uml_merge",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 103,
                  "cropWidth": 164,
                  "createdAt": "2021-02-04T08:41:03.367Z",
                  "updatedAt": "2021-02-04T08:41:03.367Z"
                },
                {
                  "_id": "601bb326a4b5cd1ed6c78bec",
                  "label": "uml_initial_node",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 41,
                  "cropWidth": 40,
                  "createdAt": "2021-02-04T08:41:11.203Z",
                  "updatedAt": "2021-02-04T08:41:11.203Z"
                },
                {
                  "_id": "601bb32ea4b5cd40f4c78bf1",
                  "label": "uml_object_node",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 50,
                  "cropWidth": 97,
                  "createdAt": "2021-02-04T08:41:18.503Z",
                  "updatedAt": "2021-02-04T08:41:18.503Z"
                },
                {
                  "_id": "601bb335a4b5cdcbfec78bf6",
                  "label": "uml_sequence",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 67,
                  "cropWidth": 228,
                  "createdAt": "2021-02-04T08:41:25.654Z",
                  "updatedAt": "2021-02-04T08:41:25.654Z"
                },
                {
                  "_id": "601bb33fa4b5cd063ec78bfe",
                  "label": "uml_transition",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 32,
                  "cropWidth": 118,
                  "createdAt": "2021-02-04T08:41:35.683Z",
                  "updatedAt": "2021-02-04T08:41:35.683Z"
                },
                {
                  "_id": "601bb537a4b5cd4a30c78cdf",
                  "label": "uml_summary",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 770,
                  "cropWidth": 849,
                  "createdAt": "2021-02-04T08:49:59.937Z",
                  "updatedAt": "2021-02-04T08:49:59.937Z"
                }
              ],
              "createdAt": "2021-02-03T19:25:15.928Z",
              "updatedAt": "2021-05-03T10:31:37.824Z",
              "__v": 21,
              "publicKey": "xmh02mkhgmqwcqmqbmzg"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "601af89ca4b5cd7220c7742c",
              "searchString": "Describing Activity Diagrams describing activity diagrams describingactivitydiagrams",
              "moduleId": "601af7fca4b5cd40a8c7740e",
              "index": 2,
              "title": "Describing Activity Diagrams",
              "files": [
                {
                  "_id": "601afe31a4b5cde58bc77637",
                  "label": "understanding_activity_diagrams",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 631,
                  "cropWidth": 1128,
                  "createdAt": "2021-02-03T19:49:05.986Z",
                  "updatedAt": "2021-02-03T19:49:05.986Z"
                }
              ],
              "createdAt": "2021-02-03T19:25:16.493Z",
              "updatedAt": "2021-05-03T10:31:37.834Z",
              "__v": 2,
              "publicKey": "d1p2use4tv2iu2k4rpeq"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "601afe7aa4b5cd524ac7764e",
              "searchString": "Creating Activity Diagrams creating activity diagrams creatingactivitydiagrams",
              "moduleId": "601af7fca4b5cd40a8c7740e",
              "index": 3,
              "title": "Creating Activity Diagrams",
              "files": [
                {
                  "_id": "601affd9a4b5cd6c47c776d2",
                  "label": "uml_morning_routine",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 280,
                  "cropWidth": 760,
                  "createdAt": "2021-02-03T19:56:09.821Z",
                  "updatedAt": "2021-02-03T19:56:09.821Z"
                },
                {
                  "_id": "601affefa4b5cdbe4dc776d7",
                  "label": "uml_crossing_street",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 160,
                  "cropWidth": 570,
                  "createdAt": "2021-02-03T19:56:32.411Z",
                  "updatedAt": "2021-02-03T19:56:32.411Z"
                },
                {
                  "_id": "601afff9a4b5cd1226c776dc",
                  "label": "uml_number_guessing",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 280,
                  "cropWidth": 960,
                  "createdAt": "2021-02-03T19:56:42.418Z",
                  "updatedAt": "2021-02-03T19:56:42.418Z"
                },
                {
                  "_id": "601b000ba4b5cd3ac4c776e3",
                  "label": "uml_primer_design",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 285,
                  "cropWidth": 1070,
                  "createdAt": "2021-02-03T19:57:00.279Z",
                  "updatedAt": "2021-02-03T19:57:00.279Z"
                }
              ],
              "createdAt": "2021-02-03T19:50:18.658Z",
              "updatedAt": "2021-05-03T10:31:37.844Z",
              "__v": 5,
              "introduction": "In this exercise you are asked to create some UML Activity Diagrams yourself. You can draw them using pen and paper, with an office or graphics software, or use a specialized editor like [UMLet](http://www.umlet.com) (installation required) or the browser-based [UMLetino](http://www.umletino.com/umletino.html). Note that you cannot submit images to Quarterfall, but after submitting a dummy text you can see the sample solutions and compare them with your diagrams.",
              "publicKey": "1dktbihmvpi95mx9cgp6"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "601b00aba4b5cdca8bc7771a",
              "searchString": "Extra extra",
              "moduleId": "601af7fca4b5cd40a8c7740e",
              "index": 5,
              "title": "Extra",
              "isOptional": true,
              "files": [],
              "createdAt": "2021-02-03T19:59:39.706Z",
              "updatedAt": "2021-05-03T10:31:37.852Z",
              "__v": 1,
              "introduction": "",
              "publicKey": "iihoy1t702npf09q0yvc"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "6020e978a4b5cd4964c7f108",
              "languages": [],
              "searchString": "Anaconda Setup anaconda setup anacondasetup",
              "moduleId": "601af7fca4b5cd40a8c7740e",
              "index": 4,
              "title": "Anaconda Setup",
              "isOptional": false,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-02-07T11:00:15.325Z",
              "updatedAt": "2021-05-03T10:31:46.180Z",
              "__v": 1,
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5e3d4343c866058b91b1c68f",
                    "text": "We will use the Anaconda Data Science platform in the course. Anaconda is a free and open source distribution of Python and some other programming languages used in scientific applications. It runs on all major operating systems and provides a number of very useful tools for Python programming.\nHere is what you have to do to get started:\n\n1. Go to https://docs.anaconda.com/anaconda/install/ and follow the installation instructions for your operating system.\n2. Go to https://docs.anaconda.com/anaconda/user-guide/getting-started/#open-nav-lin and follow the instructions how to start Spyder.\n3. Start coding!\n\nIf you have (unresolvable) trouble with the installation of Anaconda on your device, you can use it also via [UU’s MyWorkplace] \n(https://myworkplace.uu.nl/). The app that you need to start is called “Spyder Anaconda3”."
                  }
                ]
              },
              "publicKey": "uv39l01q19rpjzzpa0ga"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "601b0183a4b5cd3323c77754",
              "searchString": "Lecture Notes lecture notes lecturenotes",
              "moduleId": "601b0179a4b5cd8937c77750",
              "index": 0,
              "title": "Lecture Notes",
              "files": [
                {
                  "_id": "6020ebefa4b5cd0634c7f1b8",
                  "label": "03GettingStartedwithPython",
                  "mimetype": "application/pdf",
                  "extension": ".pdf",
                  "createdAt": "2021-02-08T07:44:47.798Z",
                  "updatedAt": "2021-02-08T07:44:47.798Z"
                }
              ],
              "createdAt": "2021-02-03T20:03:15.175Z",
              "updatedAt": "2021-05-03T10:31:37.861Z",
              "__v": 6,
              "introduction": "",
              "publicKey": "mamhwg03p6y07m8ym0ud"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "6020e978a4b5cde816c7f104",
              "languages": [],
              "searchString": "Printing source code printing source code printingsourcecode",
              "moduleId": "601b0179a4b5cd8937c77750",
              "index": 2,
              "title": "Printing source code",
              "createdAt": "2019-12-11T10:38:30.865Z",
              "updatedAt": "2021-05-03T10:31:46.127Z",
              "__v": 1,
              "files": [],
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5df0c7374fd2a753e1f67130",
                    "programmingLanguage": "python",
                    "text": "Write a program that prints the source code from the previous exercise to the screen.\nThe output should look as follows:\n```\na = 2.3\nb = 42\n\nprint(f\"{a} + {b} is {a+b}\")\n\nprint(f\"{a} + {b} is {str(a+b)}\")\nprint(f\"{a} + {b} is {str(a)+str(b)}\")\n\nprint(f\"{a} + {b} is {int(a+b)}\")\nprint(f\"{a} + {b} is {int(a)+int(b)}\")\n\nprint(f\"{a} + {b} is {float(a+b)}\")\nprint(f\"{a} + {b} is {float(a)+float(b)}\")\n```\n**Important**: If you get any error messages when you try to execute your programs, don't panic. Read the message and try to understand where and what the problem is. You can also use Google to find out more, common errors are usually discussed in different development forums. If that does not get you any further, ask a teaching assistant in the lab or post your question to the course forum on Blackboard.",
                    "solution": "One possible way to print the piece of source code is to use the triple quotation marks around it:\n```python\nprint(\"\"\"a = 2.3\nb = 42\nprint(f\"{a} + {b} is {a+b}\")\nprint(f\"{a} + {b} is {str(a+b)}\")\nprint(f\"{a} + {b} is {str(a)+str(b)}\")\nprint(f\"{a} + {b} is {int(a+b)}\")\nprint(f\"{a} + {b} is {int(a)+int(b)}\")\nprint(f\"{a} + {b} is {float(a+b)}\")\nprint(f\"{a} + {b} is {float(a)+float(b)}\")\"\n\"\"\")\n```"
                  }
                ]
              },
              "publicKey": "4ofq0tubxah924su8k1t"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "6020e978a4b5cd6f54c7f105",
              "languages": [],
              "searchString": "BMI calculation bmi calculation bmicalculation",
              "moduleId": "601b0179a4b5cd8937c77750",
              "index": 6,
              "title": "BMI calculation",
              "createdAt": "2019-12-11T10:49:33.640Z",
              "updatedAt": "2021-05-03T10:31:46.136Z",
              "__v": 1,
              "files": [],
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5df0c9c74fd2a769f7f67138",
                    "programmingLanguage": "python",
                    "text": "Write a Python program that welcomes the user, asks for his name (string), weight in kg (integer) and height in m (float), computes the body mass index (BMI) from the information ($weight/height^2$) and finally displays a message to the user, saying something like \"Hello Jim, your BMI is 23.4.\". You can assume that the user enters correct values.",
                    "solution": "```python\n# welcome message\nprint(\"Welcome to the BMI calculator.\")\n\n# ask name\nuser_name = input(\"What is your name? \")\n\n# ask weight\nuser_weight = int(input(\"What is your weight (in kg)? \"))\n\n# ask height\nuser_height = float(input(\"What is your height (in m)? \"))\n\n# calculate BMI\nbmi = user_weight / user_height**2\n\n# display result\nprint(f\"Hello {user_name}, your BMI is {bmi:.1f}.\")"
                  }
                ]
              },
              "publicKey": "j56qwn2rlqveb0muwalg"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "6020e978a4b5cd9bd6c7f103",
              "languages": [],
              "searchString": "List your lectures list your lectures listyourlectures",
              "moduleId": "601b0179a4b5cd8937c77750",
              "index": 3,
              "title": "List your lectures",
              "createdAt": "2019-12-11T10:42:00.154Z",
              "updatedAt": "2021-05-03T10:31:46.146Z",
              "__v": 1,
              "files": [],
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5df0c8014fd2a78125f67132",
                    "programmingLanguage": "python",
                    "text": "Write a program that prints out for all of the weekdays the lectures that you have there. The output of the program should be something like:\n```\nMonday:    Evolutionary Computing\nTuesday:   (nothing)\nWednesday: Evolutionary Computing, Programming with Python\nThursday:  (nothing)\nFriday:    Programming with Python\n```\nMake sure that the list of lectures begins at the same position in every line.",
                    "solution": "Here is a possible solution (note the use of tabs to ensure that the lecture list starts at the same position on each line):\n```python\nprint(\"Monday:\\t\\tEvolutionary Computing\")\nprint(\"Tuesday:\\t(nothing)\")\nprint(\"Wednesday:\\tEvolutionary Computing, Programming with Python\")\nprint(\"Thursday:\\t(nothing)\")\nprint(\"Friday:\\t\\tProgramming with Python\")\n```"
                  }
                ]
              },
              "publicKey": "jnbwzw1u8b5chutu6zwv"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "6020e978a4b5cd37e3c7f109",
              "languages": [],
              "searchString": "Arithmetic Operations arithmetic operations arithmeticoperations",
              "moduleId": "601b0179a4b5cd8937c77750",
              "index": 4,
              "title": "Arithmetic Operations",
              "createdAt": "2019-12-11T10:44:40.374Z",
              "updatedAt": "2021-05-03T10:31:46.154Z",
              "__v": 1,
              "files": [],
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5df0c8a34fd2a79d24f67134",
                    "programmingLanguage": "python",
                    "text": "Write a program that asks the user to enter two integer numbers and then executes all the seven arithmetic operations with it for which Python has standard operators.\n\nThe output of the program should be something like:\n```\nPlease enter an integer number: 7\nPlease enter another integer number: 4\n7 ** 4 is 2401\n7 * 4 is 28\n7 / 4 is 1.75\n7 // 4 is 1\n7 % 4 is 3\n7 + 4 is 11\n7 - 4 is 3\n```\n\nYou can assume that the user enters two positive integer numbers (>0). Nevertheless, try what happens when you enter a negative number or 0.",
                    "solution": "```python\n# ask for two integer numbers\na = int(input(\"Please enter an integer number: \"))\nb = int(input(\"Please enter another integer number: \"))\n\n# the arithmetic operations with a and b\nprint(f\"{a} ** {b} is {a**b}\")\nprint(f\"{a} * {b} is {a*b}\")\nprint(f\"{a} / {b} is {a/b}\")\nprint(f\"{a} // {b} is {a//b}\")\nprint(f\"{a} % {b} is {a%b}\")\nprint(f\"{a} + {b} is {a+b}\")\nprint(f\"{a} - {b} is {a-b}\")\n```"
                  }
                ]
              },
              "publicKey": "08djieniqa29nuf1cvuw"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "6020e978a4b5cded3ec7f10a",
              "languages": [],
              "searchString": "Celsius to Fahrenheit converter celsius to fahrenheit converter celsiustofahrenheitconverter",
              "moduleId": "601b0179a4b5cd8937c77750",
              "index": 5,
              "title": "Celsius to Fahrenheit converter",
              "createdAt": "2019-12-11T10:46:48.296Z",
              "updatedAt": "2021-05-03T10:31:46.163Z",
              "__v": 1,
              "files": [],
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5df0c92c4fd2a7e7abf67136",
                    "programmingLanguage": "python",
                    "text": "Write a Python program that asks the user to enter a temperature (as float) in degrees Celsius and computes what the temperature is in degrees Fahrenheit. The formula to compute Fahrenheit from Celsius is:\n\n$$\n32 + \\frac{degreesCelsius * 9}{5}\n$$\n\nThe output of the program should be something like:\n```\nPlease enter the temperature in degrees Celsius: 12.5\n12.5 degrees Celsius is 54.5 degrees Fahrenheit.\n```",
                    "solution": "```python\n# read floating point value for temperature Celsius from user\ntemp_c = float(input(\"Please enter the temperature in degrees Celsius: \"))\n\n# compute temperature in degrees Fahrenheit\ntemp_f = 32 + temp_c * (9/5)\n\n# print result\nprint(f\"{temp_c} degrees Celsius is {temp_f} degrees Fahrenheit.\")\n```"
                  }
                ]
              },
              "publicKey": "k5r1rj19xt07oh4ayjn1"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "6020e978a4b5cd9ed5c7f106",
              "languages": [],
              "searchString": "Understanding Python code understanding python code understandingpythoncode",
              "moduleId": "601b0179a4b5cd8937c77750",
              "index": 1,
              "title": "Understanding Python code",
              "createdAt": "2019-12-11T10:27:46.456Z",
              "updatedAt": "2021-05-03T10:31:46.171Z",
              "__v": 1,
              "files": [],
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5df0c4ad4fd2a746c6f6712b",
                    "text": "Consider the following piece of code, which is very similar to, but not exactly the same as the interactive input example from the lecture:\n```python\nuser_name = input(\"What is your name? \")\nprint(f\"Hello {user_name}!\")\nuser_age = input(\"What is your age (in years)? \")\nprint(f\"Then you are at least {user_age*12} months old.\")\n```\n\nWhat is its output? What is the difference in the code, and can you explain why the output is different?\n\n**Important:** Do not immediately paste the code into the editor and run it to see what it does. First try to read the code and figure it out from that, then check by executing it. Same for any other piece of Python code that you come across. That will greatly improve your understanding of Python programs. And by the way, such questions are also very popular in exams! :wink:",
                    "solution": "For output just execute. The difference to the example from the lecture is\nthat the `user_age` is not cast to integer. This causes the expression `{user_age*12}` to evaluate to a string like `363636363636363636363636` instead of computing the number of months."
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5df0c54c4fd2a76c36f6712d",
                    "text": "Here is another piece of code:\n```python\na = 2.3\nb = 42\n\nprint(f\"{a} + {b} is {a+b}\")\n\nprint(f\"{a} + {b} is {str(a+b)}\")\nprint(f\"{a} + {b} is {str(a)+str(b)}\")\n\nprint(f\"{a} + {b} is {int(a+b)}\")\nprint(f\"{a} + {b} is {int(a)+int(b)}\")\n\nprint(f\"{a} + {b} is {float(a+b)}\")\nprint(f\"{a} + {b} is {float(a)+float(b)}\")\n```\nWhat is the output? Explain what causes the differences between the lines.",
                    "solution": "For output just execute.\n\nThe differences between the lines are caused the\ndifferent type casts that are applied and also the points where they are applied. In the version without type casts, Python is doing the casts automatically based on what it infers to be best, which in this case corresponds to the intuitive result.\n\nIn the second print line, the result of the computation is cast to string, which does not change the look of the output.\n\nIn the third print line, the numbers are cast to strings before the operation is applied, so the corresponding string operation is executed and the result looks different.\n\nIn the fourth print line, the result is cast to integer, so it loses its decimal places before being displayed. In the fifth print line, the two\nnumbers are cast to integer before the operation. The result is again an integer number and looks as in the line before.\n\nIn the sixth print line, the result is explicitly cast to float, and displayed as such.\n\nIn the last line, the operands are both cast to float before applying the operation, resulting in the same output as before."
                  }
                ]
              },
              "publicKey": "d7k602imwpvdvz6wyvgg"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "6020eb8fa4b5cd4095c7f197",
              "searchString": "Extra extra",
              "moduleId": "601b0179a4b5cd8937c77750",
              "index": 7,
              "title": "Extra",
              "isOptional": true,
              "files": [],
              "createdAt": "2021-02-08T07:43:11.655Z",
              "updatedAt": "2021-05-03T10:31:46.189Z",
              "__v": 1,
              "introduction": "",
              "publicKey": "8t010njjna0a5ua9jfkw"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "6021033ca4b5cd1ba3c7f6e9",
              "searchString": "Bundle Modules 1-14 bundle modules 1-14 bundle modules 1 14 bundlemodules114",
              "moduleId": "601bb5b3a4b5cd8e94c78cee",
              "index": 0,
              "title": "Bundle Modules 1-14",
              "files": [
                {
                  "_id": "60621cab51d70b52ec371d22",
                  "label": "LectureNotesBundleModules1-14",
                  "mimetype": "application/zip",
                  "extension": ".zip",
                  "createdAt": "2021-03-29T18:30:04.688Z",
                  "updatedAt": "2021-03-29T18:30:04.688Z"
                }
              ],
              "createdAt": "2021-02-08T09:24:12.922Z",
              "updatedAt": "2021-05-03T10:31:46.604Z",
              "__v": 12,
              "isOptional": true,
              "publicKey": "5tz5329hu21b64n3akwm"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "6020ec6ca4b5cd4a2dc7f1ca",
              "languages": [],
              "searchString": "Lecture Notes lecture notes lecturenotes",
              "moduleId": "6020ec6ca4b5cde1d0c7f1c9",
              "index": 0,
              "title": "Lecture Notes",
              "files": [
                {
                  "_id": "6020ed61a4b5cdd430c7f1f5",
                  "label": "04BooleanExpressionsandConditionalBranching",
                  "mimetype": "application/pdf",
                  "extension": ".pdf",
                  "createdAt": "2021-02-08T07:50:57.683Z",
                  "updatedAt": "2021-02-08T07:50:57.683Z"
                }
              ],
              "createdAt": "2020-01-22T17:08:56.620Z",
              "updatedAt": "2021-05-03T10:31:46.197Z",
              "__v": 3,
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5e3d456fc8660583c1b1c6a4",
                    "text": "```file\n\tlabel: Module4-LectureNotes\t\n```"
                  }
                ]
              },
              "publicKey": "fjz3s8b9xss7yrj1fsb2"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "6020ec6ca4b5cd1159c7f1ce",
              "languages": [],
              "searchString": "Morning Coffee morning coffee morningcoffee",
              "moduleId": "6020ec6ca4b5cde1d0c7f1c9",
              "index": 4,
              "title": "Morning Coffee",
              "files": [],
              "createdAt": "2020-02-02T18:49:14.498Z",
              "updatedAt": "2021-05-03T10:31:46.207Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e3719ad54878c4382ccb00d",
                    "programmingLanguage": "python",
                    "text": "Write a program that pretends to be your waiter, bringing your morning coffee with optional milk/sugar, like in the Activity Diagram that we discussed in the lecture in the first week. The program should ask the user regarding milk and sugar, and the output should be something like:\n\n```\nGood morning! I made coffee for you.\nDo you want to add milk? (y/n) y\nI added milk.\nDo you want to add sugar? (y/n) n\nOk, no sugar.\nEnjoy!\n```",
                    "solution": "```python\n# greet the user and announce coffee\nprint(\"Good morning! I made coffee for you.\")\n\n# ask if milk should be added and act accordingly\nadd_milk = input(\"Do you want to add milk? (y/n) \")\nif add_milk == \"y\":\n    print(\"I added milk.\")\nelif add_milk == \"n\":\n    print(\"Ok, no milk.\")\nelse:\n    print(\"I did not understand, so I don't add milk.\")\n\n# ask if sugar should be added and act accordingly\nadd_sugar = input(\"Do you want to add sugar? (y/n) \")\nif add_sugar == \"y\":\n    print(\"I added sugar.\")\nelif add_sugar == \"n\":\n    print(\"Ok, no sugar.\")\nelse:\n    print(\"I did not understand, so I don't add sugar.\")\n\n# friendly closure\nprint(\"Enjoy!\")"
                  }
                ]
              },
              "publicKey": "cnjuja4r3kxxs22xfbat"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "6020ec6ca4b5cd5d52c7f1d0",
              "languages": [],
              "searchString": "Age Check age check agecheck",
              "moduleId": "6020ec6ca4b5cde1d0c7f1c9",
              "index": 1,
              "title": "Age Check",
              "files": [],
              "createdAt": "2020-02-02T18:42:33.927Z",
              "updatedAt": "2021-05-03T10:31:46.215Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e37182854878c26deccb006",
                    "programmingLanguage": "python",
                    "text": "Write a program that asks the user to enter their age. If it is under 18, the program should display a message to refuse entry, otherwise invite the user to come in. The output should be something like:\n```\nHow old are you (in years)? 15\nSorry, you are not allowed to enter.\n\nHow old are you (in years)? 29\nWelcome! Please come in.\n```",
                    "solution": "```python\n# ask user to enter their age\nage = int(input(\"How old are you (in years)? \"))\n\n# check if age is below 18, reject or welcome guest accordingly\nif age < 18:\n    print(\"Sorry, you are not allowed to enter.\")\nelse:\n    print(\"Welcome! Please come in.\")"
                  }
                ]
              },
              "publicKey": "ch2gzl96ijdg5yjevcyn"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "6020ec6ca4b5cdb731c7f1cf",
              "languages": [],
              "searchString": "BMI Calculation Revisited bmi calculation revisited bmicalculationrevisited",
              "moduleId": "6020ec6ca4b5cde1d0c7f1c9",
              "index": 3,
              "title": "BMI Calculation Revisited",
              "files": [],
              "createdAt": "2020-02-02T18:47:36.592Z",
              "updatedAt": "2021-05-03T10:31:46.224Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e37194b54878cbb48ccb00b",
                    "programmingLanguage": "python",
                    "text": "Extend the BMI calculation program from the last homework so that after informing the user about the calculated BMI, it also prints out if the BMI is within the range that is generally considered normal (between 18.5 and 25) or higher (above 25) or lower (below 18.5) than that. The output of the modified program should then be something like:\n\n```\nWelcome to the BMI calculator.\nWhat is your name? John Doe\nWhat is your weight (in kg)? 78\nWhat is your height (in m)? 1.82\nHello John Doe, your BMI is 23.5.\nYour BMI is normal.\n```",
                    "solution": "```python\n# welcome message\nprint(\"Welcome to the BMI calculator.\")\n\n# ask name\nuser_name = input(\"What is your name? \")\n\n# ask weight\nuser_weight = int(input(\"What is your weight (in kg)? \"))\n\n# ask height\nuser_height = float(input(\"What is your height (in m)? \"))\n\n# calculate BMI\nbmi = user_weight / user_height**2\n\n# display result\nprint(f\"Hello {user_name}, your BMI is {bmi:.1f}.\")\n\n# inform the user if this BMI is in normal range\nif bmi < 18.5:\n    print(\"Your BMI is low\")\nelif 18.5 <= bmi < 25:\n    print(\"Your BMI is normal.\")\nelse:\n    print(\"Your BMI is high.\")"
                  }
                ]
              },
              "publicKey": "mv1r2tfy3x6d5rs6lot5"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "6020ec6ca4b5cd250fc7f1cd",
              "languages": [],
              "searchString": "Divisibility divisibility",
              "moduleId": "6020ec6ca4b5cde1d0c7f1c9",
              "index": 2,
              "title": "Divisibility",
              "files": [],
              "createdAt": "2020-02-02T18:46:16.273Z",
              "updatedAt": "2021-05-03T10:31:46.233Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e3718fb54878c2f4eccb009",
                    "programmingLanguage": "python",
                    "text": "Write a program that asks the user to enter two integer numbers, then checks if the first number is divisible by the second number and informs the user accordingly. The output should be something like:\n\n```\nPlease enter an integer number: 15\nPlease enter another integer number: 5\n15 is divisible by 5.\n\nPlease enter an integer number: 12\nPlease enter another integer number: 5\n12 is not divisible by 5.\n```",
                    "solution": "```python\n# ask the user to enter two integer numbers\nnumber1 = int(input(\"Please enter an integer number: \"))\nnumber2 = int(input(\"Please enter another integer number: \"))\n\n# check if number1 is divisible by number2, display message accordingly\nif number1%number2 == 0:\n    print(f\"{number1} is divisible by {number2}.\")\nelse:\n    print(f\"{number1} is not divisible by {number2}.\")"
                  }
                ]
              },
              "publicKey": "g9pdt7q6mu2ol18vm0ib"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "6020ec6ca4b5cd2f1dc7f1d1",
              "languages": [],
              "searchString": "Extra extra",
              "moduleId": "6020ec6ca4b5cde1d0c7f1c9",
              "index": 7,
              "title": "Extra",
              "isOptional": true,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-02-13T18:45:44.351Z",
              "updatedAt": "2021-05-03T10:31:46.241Z",
              "__v": 1,
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5e45995bd9276b98884c265e",
                    "text": "In the lecture we talked about binary numbers. Maybe you now find “binary jokes” funny, like those collected in http://amagicclassroom.com/uploads/3/4/5/2/34528828/math_binary_jokes.pdf. If you like that, ask Google for more binary or boolean or programmer jokes, there are plenty..."
                  },
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5e459989d9276b27004c265f",
                    "text": "If you want to test your understanding of binary numbers, try the decimal-to-binary quiz at http://www.free-test-online.com/binary/decimal2binary.htm or the binary-to-decimal quiz at http://www.free-test-online.com/binary/binary2decimal.htm."
                  }
                ]
              },
              "publicKey": "ju6a7tu58jcn4s0gld76"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "6020ec6ca4b5cd7d8bc7f1cb",
              "languages": [],
              "searchString": "Grade Calculation grade calculation gradecalculation",
              "moduleId": "6020ec6ca4b5cde1d0c7f1c9",
              "index": 6,
              "title": "Grade Calculation",
              "files": [],
              "createdAt": "2020-02-02T18:52:14.649Z",
              "updatedAt": "2021-05-03T10:31:46.251Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e371a6154878c080bccb011",
                    "programmingLanguage": "python",
                    "text": "Write a program that calculates the grade for this course. It should first ask if a student took part in all three examination parts (midterm, project and final exam). If not, it should send the student to the lecturer to discuss the situation. Otherwise, it reads in the three grades. It checks if they are all >= 4. If not, the course is failed. If they are, it checks\nif the weighted average (midterm and final exam each account for 30% of the final grade, and the project for 40%) is >= 6. If not, send the student to the retake exam. If it is, print out the final grade to the screen. \n\nThe output should be something like:\n\n```\nHave you taken part in all examination parts (midterm, final exam,\nproject? (yes/no) no\nPlease go to the lecturer to discuss your situation.\n\nHave you taken part in all examination parts (midterm, final exam,\nproject? (yes/no) yes\nPlease enter your midterm grade: 6.5\nPlease enter your final exam grade: 7.5\nPlease enter your project grade: 8\nCongratulations, you passed the course with grade 7.4.\n\nHave you taken part in all examination parts (midterm, final exam,\nproject? (yes/no) yes\nPlease enter your midterm grade: 5\nPlease enter your final exam grade: 6\nPlease enter your project grade: 6\nYou have to take part in the retake exam.\n```",
                    "solution": "```python\nprint(\"Hello student, welcome to grade calculation!\")\nexamination_complete = input(\"Have you taken part in all examination \\\n                             parts (midterm, final exam, project? (yes/no) \")\nif examination_complete == \"no\":\n    print(\"Please go to the lecturer to discuss your situation.\")\nelif examination_complete == \"yes\":\n    grade_midterm = float(input(\"Please enter your midterm grade: \"))\n    grade_exam = float(input(\"Please enter your final exam grade: \"))\n    grade_project = float(input(\"Please enter your project grade: \"))\n    if grade_midterm >= 4 and grade_exam >= 4 and grade_project >=4:\n        weighted_average = 0.3*grade_midterm + 0.3*grade_exam + 0.4*grade_project\n        if weighted_average >= 6:\n            print(f\"Congratulations, you passed the course with grade {weighted_average:.1f}.\")\n        else:\n            print(\"You have to take part in the retake exam.\")\n    else:\n        print(\"Sorry, you failed the course.\")\nelse:\n    print(\"Sorry, I did not understand.\")"
                  }
                ]
              },
              "publicKey": "rmade2y91d05dbf2zxu9"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "6020ec6ca4b5cda83ec7f1cc",
              "languages": [],
              "searchString": "Diagnostics diagnostics",
              "moduleId": "6020ec6ca4b5cde1d0c7f1c9",
              "index": 5,
              "title": "Diagnostics",
              "files": [],
              "createdAt": "2020-02-02T18:50:22.482Z",
              "updatedAt": "2021-05-03T10:31:46.259Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e3719f254878c0b7cccb00f",
                    "programmingLanguage": "python",
                    "text": "Influenza-like illness is characterized by the patients having fever, cough, and one or more of the following symptoms: sore throat, joint and muscle pain, complete exhaustion. Write a Python program that asks a patient about the symptoms (if the patient has them or not), and from that determines if influenza-like illness is likely or not. Use only one Boolean expression for that. The output should be something like:\n\n```\nDo you have fever? (y/n) y\nDo you have a cough? (y/n) y\nDo you have a sore throat? (y/n) n\nDo you have joint and muscle pain? (y/n) n\nDo you experience complete exhaustion? (y/n) y\nI think you have influenza-like illness. Please consult your GP.\n\nDo you have fever? (y/n) y\nDo you have a cough? (y/n) n\nDo you have a sore throat? (y/n) y\nDo you have joint and muscle pain? (y/n) y\nDo you experience complete exhaustion? (y/n) n\nI don't know what you have, but it does not seem to be influenza-\nlike illness. Please consult your GP.\n```",
                    "solution": "```python\n# ask the user for their symptoms\nfever = input(\"Do you have fever? (y/n) \")\ncough = input(\"Do you have a cough? (y/n) \")\nsore_throat = input(\"Do you have a sore throat? (y/n) \")\njoint_and_muscle_pain = input(\"Do you have joint an muscle pain? (y/n) \")\ncomplete_exhaustion = input(\"Do you experience complete exhaustion? (y/n) \")\n\n# check if influenza-like illness can be diagnosed or not\nif fever==\"y\" and cough==\"y\" and (sore_throat==\"y\" or \\\n                                  joint_and_muscle_pain==\"y\" or \\\n                                  complete_exhaustion==\"y\"):\n    print(\"I think you have an influenca-like illness. Please consult your GP.\")\nelse:\n    print(\"I don't know what you have, but it does not seem to be influenca- \\\n          like illness. Please consult your GP.\")"
                  }
                ]
              },
              "publicKey": "9m5w3tupi4wrzufhktr2"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "6020f013a4b5cde5cac7f252",
              "languages": [],
              "searchString": "Temperature Conversion Revisited temperature conversion revisited temperatureconversionrevisited",
              "moduleId": "6020f013a4b5cd2f03c7f251",
              "index": 4,
              "title": "Temperature Conversion Revisited",
              "files": [],
              "createdAt": "2020-02-02T19:08:34.482Z",
              "updatedAt": "2021-05-03T10:31:46.268Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e371e3554878c7d8eccb019",
                    "programmingLanguage": "python",
                    "text": "Extend the temperature conversion program from last week so that it asks the user to enter both a temperature value and the unit of the temperature (Celsius or Fahrenheit), and calculates the temperature in the respecive other unit. If an incorrect unit is entered, the program should give an error message and ask the user to try again. Furthermore, after having done a conversion, the program should ask the user if they want to convert another temperature value. \n\nThe output should be something like:\n\n```\nPlease enter temperature: 54\nIs the temperature in Celsius (c) or Fahrenheit (f)? c\n54.0 degrees Celsius is 129.2 degrees Fahrenheit.\nDo you want to convert another temperature value? (y/n) y\nPlease enter temperature: 13\nIs the temperature in Celsius (c) or Fahrenheit (f)? k\nUnknown temperature unit, try again.\nPlease enter temperature: 13\nIs the temperature in Celsius (c) or Fahrenheit (f)? c\n13.0 degrees Celsius is 55.4 degrees Fahrenheit.\nDo you want to convert another temperature value? (y/n) n\nOkay, goodbye!\n```",
                    "solution": "```python\n# start infinite loop for running the program until the user ends it\nwhile True:\n\n    # read temperature value from user\n    temp = float(input(\"Please enter temperature: \"))\n    unit = input(\"Is the temperature in Celsius (c) or Fahrenheit (f)? \")\n\n    # read temperature unit from user and convert or display error\n    if unit == \"c\":\n        print(f\"{temp} degrees Celsius is {32 + temp * (9/5):.1f} degrees Fahrenheit.\")\n    elif unit == \"f\":\n        print(f\"{temp} degrees Fahrenheit is {(temp - 32) * (5/9):.1f} degrees Celsius.\")\n    else:\n        print(\"Unknown temperature unit, try again.\")\n        continue\n    \n    # ask user if they want to continue\n    more = input(\"Do you want to convert another temperature value? (y/n) \")\n    if more == \"n\":\n        print(\"Okay, goodbye!\")\n        break\n"
                  }
                ]
              },
              "publicKey": "jqqyx4xv8gbfx1dncwn3"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "6020f013a4b5cdb74dc7f255",
              "languages": [],
              "searchString": "Canteen Dish canteen dish canteendish",
              "moduleId": "6020f013a4b5cd2f03c7f251",
              "index": 1,
              "title": "Canteen Dish",
              "files": [],
              "createdAt": "2020-02-02T19:03:16.765Z",
              "updatedAt": "2021-05-03T10:31:46.277Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e371cf754878cbd01ccb013",
                    "programmingLanguage": "python",
                    "text": "Write a program that corresponds to the \"Season your dish from the canteen\"\nActivity Diagram example from the first week's lecture (pre-test loop). It should announce you the dish, ask you if it needs more salt (y/n), if yes add salt and ask again, and if not let you enjoy it. The output should be something like:\n\n```\nHello, here is the dish of the day for you.\nDoes it need more salt? (y/n) y\nOkay, I added some more salt.\nDoes it need more salt? (y/n) y\nOkay, I added some more salt.\nDoes it need more salt? (y/n) n\nEnjoy your meal!\n```",
                    "solution": "```python\n# greet the customer\nprint(\"Hello, here is the dish of the day for you.\")\n\n# ask the user if salt needs to be added, repeat until enough\nwhile input(\"Does it need more salt? (y/n) \") == \"y\":\n    print(\"Okay, I added some more salt.\")\n\n# friendly closing   \nprint(\"Enjoy your meal!\")"
                  }
                ]
              },
              "publicKey": "kf73s98kriyyuvtd4qod"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "6020f013a4b5cd23bbc7f253",
              "languages": [],
              "searchString": "Summing Up summing up summingup",
              "moduleId": "6020f013a4b5cd2f03c7f251",
              "index": 2,
              "title": "Summing Up",
              "files": [],
              "createdAt": "2020-02-02T19:05:56.719Z",
              "updatedAt": "2021-05-03T10:31:46.286Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e371d9f54878c6651ccb015",
                    "programmingLanguage": "python",
                    "text": "Write a program that asks the user to enter an integer number n, computes the sum of all numbers from 1 to n, and prints the result. The output should look like:\n\n```\nPlease enter an integer number: 5\nThe sum of all numbers from 1 to 5 is 15\n```",
                    "solution": "```python\n# ask the user to enter a number\nn = int(input(\"Please enter an integer number: \"))\n\n# remember the initial input for later printout\norig_n = n\n\n# initialize sum to 0\nsum = 0\n\n# iterate over all values from n down to 1 and add them to sum\nwhile n > 0:\n    sum = sum + n\n    n = n - 1\n\n# print result\nprint(f\"The sum of all numbers from 1 to {orig_n} is {sum}.\")"
                  }
                ]
              },
              "publicKey": "2fcnxgt0r26r9fklhrfa"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "6020f013a4b5cd7e01c7f254",
              "languages": [],
              "searchString": "Lecture Notes lecture notes lecturenotes",
              "moduleId": "6020f013a4b5cd2f03c7f251",
              "index": 0,
              "title": "Lecture Notes",
              "files": [
                {
                  "_id": "6020f05aa4b5cd5a56c7f281",
                  "label": "05Loops",
                  "mimetype": "application/pdf",
                  "extension": ".pdf",
                  "createdAt": "2021-02-08T08:03:38.428Z",
                  "updatedAt": "2021-02-08T08:03:38.428Z"
                }
              ],
              "createdAt": "2020-01-22T17:12:38.824Z",
              "updatedAt": "2021-05-03T10:31:46.295Z",
              "__v": 3,
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5e41bbd7275051236fb41a3b",
                    "text": "```file\n\tlabel: Module5-LectureNotes\t\n```"
                  }
                ]
              },
              "publicKey": "f03bigrezjcnwoqomk1t"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "6020f013a4b5cd2165c7f257",
              "languages": [],
              "searchString": "Text Analysis text analysis textanalysis",
              "moduleId": "6020f013a4b5cd2f03c7f251",
              "index": 5,
              "title": "Text Analysis",
              "files": [],
              "createdAt": "2020-02-02T19:10:34.380Z",
              "updatedAt": "2021-05-03T10:31:46.304Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e371ead54878c0448ccb01b",
                    "programmingLanguage": "python",
                    "text": "Using what you have learned in the course so far, write a simple text analysis program that finds the (first) longest word in a text. It should work on any text, but you can use the “lorem ipsum” as an example:\n\n```python\n# some random text\ntext = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do \\\neiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad \\\nminim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex \\\nea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate \\\nvelit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat \\\ncupidatat non proident, sunt in culpa qui officia deserunt mollit anim id \\\nest laborum.\"\n```\n\nTo check if a character c is an alphabetic character, you can call the isalpha() function on it: c.isalpha(). It will return True or False.\n\nThe output of your should report the longest word and its length, like this:\n\n```\nThe longest word in the text is \"reprehenderit\" (13 characters).\n```",
                    "solution": "```python\n# some random text\ntext = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do \\\n#eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad \\\n#minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex \\\n#ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate \\\n#velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat \\\n#cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id \\\n#est laborum.\"\n\n# initialize running length counter and word\nlength = 0\nword = \"\"\n\n# initialize variables for storing the max. length and longest word\nmax_length = 0\nlongest_word = \"\"\n\n# for all characters in the text ...\nfor character in text:\n    \n    # check if the character is a letter (part of a word).\n    if character.isalpha():\n        # if yes, increment the length counter and \n        # add the character to the word to remember\n        length += 1\n        word += character\n    else:\n        # reset running variables\n        length = 0\n        word = \"\"\n\n    # check if the current word is longer then the previous longest word\n    if length > max_length:\n        # if yes, remember the new max. length and longest word\n        max_length = length\n        longest_word = word\n        \n# print result\nprint(f\"The longest word in the text is \\\"{longest_word}\\\" \" \\\n      f\"({max_length} characters).\")\n",
                    "template": "# some random text\ntext = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do \\\neiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad \\\nminim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex \\\nea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate \\\nvelit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat \\\ncupidatat non proident, sunt in culpa qui officia deserunt mollit anim id \\\nest laborum.\"\n\n# write the code to find the longest word here"
                  }
                ]
              },
              "publicKey": "xbj3884q7y38n34dih77"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "6020f013a4b5cde29ec7f256",
              "languages": [],
              "searchString": "The Bag of Marshmallows the bag of marshmallows thebagofmarshmallows",
              "moduleId": "6020f013a4b5cd2f03c7f251",
              "index": 3,
              "title": "The Bag of Marshmallows",
              "files": [],
              "createdAt": "2020-02-02T19:07:00.764Z",
              "updatedAt": "2021-05-03T10:31:46.312Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e371dd854878c2b64ccb017",
                    "programmingLanguage": "python",
                    "text": "Write a program that implements the “Eating a bag of marshmallows” example from the lecture on Activity Diagrams. It should tell the user to open the bag, eat a marshmallow, ask if there are more left, and repeat eating and asking until the bag is empty. Then the bag should be put into trash. The output should be something like:\n\n```\nOpen bag of marshmallows.\nEat marshmallow.\nMore marshmallows left? (y/n) y\nEat marshmallow.\n\n[...]\n\nMore marshmallows left? (y/n) n\nDispose of bag.\n```",
                    "solution": "```python\n# open bag\nprint(\"Open bag of marshmallows.\")\n\n# eat all the marshmallows\nwhile True:\n    print(\"Eat marshmallow.\")\n    more_left = input(\"More marshmallows left? (y/n) \")\n    if more_left==\"n\":\n        break\n\n# clean up\nprint(\"Dispose of bag.\")"
                  }
                ]
              },
              "publicKey": "nk0422rmabh8voj9fbpz"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "6020f608a4b5cd11f7c7f3c0",
              "languages": [],
              "searchString": "Password Generator password generator passwordgenerator",
              "moduleId": "6020f608a4b5cd9e4ac7f3bf",
              "index": 3,
              "title": "Password Generator",
              "createdAt": "2019-12-11T11:01:50.537Z",
              "updatedAt": "2021-05-03T10:31:46.428Z",
              "__v": 1,
              "files": [],
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [
                      {
                        "id": "qalhsqlqbuvqafqg",
                        "type": "unitTest",
                        "tests": [
                          {
                            "id": "tPMpS2guDDZ8RasxCH9i",
                            "name": "passwordShort",
                            "description": "Passwords with less than 8 characters should result in `None`",
                            "isCode": false,
                            "code": "create_password(4) == None"
                          },
                          {
                            "id": "4LEC2Z5JT3KYR8Up2cEt",
                            "name": "password8",
                            "description": "Should correctly create passwords with length 8",
                            "isCode": false,
                            "code": "len(create_password(8)) == 8"
                          },
                          {
                            "id": "DXw0Jn5TjByaP8IbyUQC",
                            "name": "password12",
                            "description": "Should correctly create passwords with length 12",
                            "isCode": false,
                            "code": "len(create_password(12)) == 12"
                          },
                          {
                            "id": "Tw79DzjjufccxKVEOnCv",
                            "name": "password16",
                            "description": "Should correctly create passwords with length 16",
                            "isCode": false,
                            "code": "len(create_password(16)) == 16"
                          },
                          {
                            "id": "JSSb2oc6Yo,mbxqCz,,C",
                            "name": "pattern",
                            "description": "Created passwords should have the requested pattern (sequence of alternating upper-case consonants and lower-case vowels, followed by 4 digits).",
                            "isCode": true,
                            "code": "import re\npattern = \"([BCDFGHJKLMNPQRSTVWXYZ][aeiou]){2,}\\d{4}\"\nmatcher = re.fullmatch(pattern, create_password(16))\nif matcher:\n    return True\nelse:\n    return False"
                          }
                        ],
                        "imports": "import random"
                      }
                    ],
                    "_id": "5df0cca04fd2a742cff6713c",
                    "programmingLanguage": "python",
                    "text": "People often use passwords that are too short or too simple and can easily be guessed. (\"123456\", \"Password\" and \"12345678\" were the most frequently used passwords in 2017!) Moreover, people tend to use the same password for different services, which makes it easy for criminals to take over other accounts once they have obtained one of the passwords. Thus, it is wise to use passwords that are reasonably long (8 characters minimum), consist of seemingly random sequences of letters (use of special characters is by the way not so important), and have a separate password for each account.\n\nWrite a program that helps you to create reasonably good passwords. Therefore define and implement a function `create_password(length)` that takes the desired length of the password as parameter. If a password shorter than 8 characters is requested, the function should refuse to create it (as it would not be secure) and simply return `None`. If the requested length is longer, then the function should fill the password with alternating upper-case consonants and lower-case vowels, apart for the last 4 positions, which should be filled with random numbers.",
                    "template": "# import the random package (needed to randomize the password)\nimport random\n\n# function for creating a password of a given length\ndef create_password(length):\n    # fill this in",
                    "solution": "```python\n# import the random package (needed to randomize the password)\nimport random\n\n# function for creating a password of a given length\ndef create_password(length):\n    # strings that just contain the letters that we want to use\n    consonants = \"BCDFGHJKLMNPQRSTVWXYZ\"\n    vowels = \"aeiou\"\n    \n    # if the given length is too short, refuse to create (insecure) password\n    if length < 8:\n       print(\"Too short, please create longer password.\")\n       return None\n    # otherwise, create password as described\n    else:\n        # init empty password string\n        password = \"\"\n        # for the first length-4 characters ...\n        for i in range(1,length-3):\n            # put random consonants on the odd positions ...\n            if i%2 != 0:\n                password += random.choice(consonants)\n            # ... and random vowels on the even positions\n            else:\n                password += random.choice(vowels)\n        # fill the remaining four positions with random numbers\n        for i in range(length-3,length+1):\n            password += str(random.randint(0,9))\n    \n    # return created password        \n    return password\n```"
                  }
                ]
              },
              "publicKey": "68wrrp5vkods425eq3tp"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "6020f608a4b5cd1ac0c7f3c4",
              "languages": [],
              "searchString": "Leap Years leap years leapyears",
              "moduleId": "6020f608a4b5cd9e4ac7f3bf",
              "index": 1,
              "title": "Leap Years",
              "createdAt": "2019-12-11T10:52:50.228Z",
              "updatedAt": "2021-05-03T10:31:46.436Z",
              "__v": 1,
              "files": [],
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [
                      {
                        "id": "yskgybclcoqigaut",
                        "type": "unitTest",
                        "tests": [
                          {
                            "id": "DR8yVm3L2cghVNbCTW2a",
                            "name": "test1900",
                            "description": "1900 should not be a leap year",
                            "isCode": false,
                            "code": "not is_leap_year(1900)"
                          },
                          {
                            "id": "M1JYetBwCK1li6VMs4oO",
                            "name": "test1984",
                            "description": "1984 should be a leap year",
                            "isCode": false,
                            "code": "is_leap_year(1984)"
                          },
                          {
                            "id": "mpOUAi3KhRGAqXE1C98j",
                            "name": "test1985",
                            "description": "1985 should not be a leap year",
                            "isCode": false,
                            "code": "not is_leap_year(1985)"
                          },
                          {
                            "id": "B5ipO21b4cYBeHjYNdIf",
                            "name": "test2000",
                            "description": "2000 should be a leap year",
                            "isCode": false,
                            "code": "is_leap_year(2000)"
                          },
                          {
                            "id": "OEk8Fxo7pzXF710xUaiU",
                            "name": "test2018",
                            "description": "2018 should not be a leap year",
                            "isCode": false,
                            "code": "not is_leap_year(2018)"
                          }
                        ],
                        "imports": "import random",
                        "answerEmbedding": "{{answer}}"
                      }
                    ],
                    "_id": "5df0ca844fd2a73c16f6713a",
                    "programmingLanguage": "python",
                    "text": "In our lifetimes (unless we happen to get veeery old) a leap year occurs every four years. But actually, the rule is a bit more involved: A year is a leap year if it is a multiple of 4, but not a multiple of 100, unless it is also a multiple of 400. For example, 1984 and 2000 were leap years, but 1900 and 1985 were not.\n\nWrite a function `is_leap_year(year)` that tests if the year is a leap year. If so, the function should return `True`, and `False` otherwise. Implement the function using _only one_ Boolean expression.",
                    "template": "def is_leap_year(year):\n    # fill this in",
                    "solution": "```python\n# function that checks if the given year is a leap year\ndef is_leap_year(year):\n    return year%4==0 and not year%100==0 or \\\n           year%4==0 and year%100==0 and year%400==0"
                  }
                ]
              },
              "publicKey": "vqjti81m2hh3imd2lyr9"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "6020f608a4b5cd8e92c7f3c6",
              "languages": [],
              "searchString": "Extra extra",
              "moduleId": "6020f608a4b5cd9e4ac7f3bf",
              "index": 6,
              "title": "Extra",
              "isOptional": true,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-02-20T13:28:54.587Z",
              "updatedAt": "2021-05-03T10:31:46.444Z",
              "__v": 1,
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5e4e899c5081c8a3b13c45bf",
                    "text": "[CheckiO](https://checkio.org/) is a game where you need to code in Python (or JavaScript) to get further. By now you should know enough Python to try it out and solve the challenges there."
                  }
                ]
              },
              "publicKey": "e5lx13mvoj72nd7s2by1"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "6020f608a4b5cd4578c7f3c5",
              "languages": [],
              "searchString": "Calculator calculator",
              "moduleId": "6020f608a4b5cd9e4ac7f3bf",
              "index": 2,
              "title": "Calculator",
              "files": [],
              "createdAt": "2020-02-02T19:26:20.387Z",
              "updatedAt": "2021-05-03T10:31:46.454Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [
                      {
                        "id": "vsapoasuyjqqpctp",
                        "type": "unitTest",
                        "tests": [
                          {
                            "id": "N5eJY7cNIESFWWZjh2ub",
                            "name": "test_add",
                            "description": "The result of add(x,y) should be equal to x+y.",
                            "isCode": false,
                            "code": "add(5,2) == 5+2"
                          },
                          {
                            "id": "HbcjPA3juQ2dAFbowVH,",
                            "name": "test_subtract",
                            "description": "The result of subtract(x,y) should be equal to x-y.",
                            "isCode": false,
                            "code": "subtract(5,2) == 5-2"
                          },
                          {
                            "id": "48kRcOrDD2tJW2feBHaj",
                            "name": "test_multiply",
                            "description": "The result of multiply(x,y) should be equal to x*y.",
                            "isCode": false,
                            "code": "multiply(5,2) == 5*2"
                          },
                          {
                            "id": "DVwr,JrQmJ0tZRJP42pd",
                            "name": "test_divide",
                            "description": "The result of divide(x,y) should be equal to x/y.",
                            "isCode": false,
                            "code": "divide(5,2) == 5/2"
                          }
                        ]
                      }
                    ],
                    "_id": "5e37226654878c93b2ccb01f",
                    "programmingLanguage": "python",
                    "text": "Write a program that acts a simple calculator, asking the user if they want to add, subtract, multiply or divide two arbitrary numbers. Define functions `add(x,y)`, `subtract(x,y)`, `multiply(x,y)` and `divide(x,y)` for this. (Normally one would not define functions for these basic operators, but this is just an exercise...) After the user has selected an operation, they are asked to enter the numbers `x` and `y`. The program calculates and prints the result. \n\nThe output should be something like:\n\n```\nYou have four options:\n1. Add\n2. Subtract\n3. Multiply\n4. Divide\nEnter choice (1/2/3/4): 2\nEnter first number: 34\nEnter second number: 53\n34 - 53 = -19\n```",
                    "solution": "```python\n# This function adds two numbers \ndef add(x, y):\n   return x + y\n\n# This function subtracts two numbers \ndef subtract(x, y):\n   return x - y\n\n# This function multiplies two numbers\ndef multiply(x, y):\n   return x * y\n\n# This function divides two numbers\ndef divide(x, y):\n   return x / y\n\n# Display options\nprint(\"Select operation.\")\nprint(\"1. Add\")\nprint(\"2. Subtract\")\nprint(\"3. Multiply\")\nprint(\"4. Divide\")\n\n# Take input from the user \nchoice = input(\"Enter choice(1/2/3/4):\")\nnum1 = int(input(\"Enter first number: \"))\nnum2 = int(input(\"Enter second number: \"))\n\n# Execute chosen operation with entered numbers\nif choice == '1':\n   print(f\"{num1} + {num2} = {add(num1,num2)}\")\n\nelif choice == '2':\n   print(f\"{num1} - {num2} = {subtract(num1,num2)}\")\n\nelif choice == '3':\n   print(f\"{num1} * {num2} = {multiply(num1,num2)}\")\n\nelif choice == '4':\n   print(f\"{num1} / {num2} = {divide(num1,num2)}\")\n\nelse:\n   print(\"Invalid input\")",
                    "template": "# This function adds two numbers \ndef add(x, y):\n    # (fill this in)\n    \n# This function subtracts two numbers \ndef subtract(x, y):\n    # (fill this in)\n\n# This function multiplies two numbers\ndef multiply(x, y):\n    # (fill this in)\n    \n# This function divides two numbers\ndef divide(x, y):\n    # (fill this in)\n    \n# Display options\nprint(\"Select operation.\")\nprint(\"1. Add\")\nprint(\"2. Subtract\")\nprint(\"3. Multiply\")\nprint(\"4. Divide\")\n\n# Take input from the user \n# (fill this in)\n\n# Execute chosen operation with entered numbers\n# (fill this in)\n"
                  }
                ]
              },
              "publicKey": "a9lt3qz84uonavzj59u8"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "6020f608a4b5cd0cd4c7f3c2",
              "languages": [],
              "searchString": "Ackermann Function ackermann function ackermannfunction",
              "moduleId": "6020f608a4b5cd9e4ac7f3bf",
              "index": 5,
              "title": "Ackermann Function",
              "files": [
                {
                  "_id": "6020f608a4b5cda547c7f3c8",
                  "label": "Ackermann",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 110,
                  "cropWidth": 662,
                  "createdAt": "2021-02-08T08:27:52.699Z",
                  "updatedAt": "2021-02-08T08:27:52.699Z"
                }
              ],
              "createdAt": "2020-02-02T20:00:45.134Z",
              "updatedAt": "2021-05-03T10:31:46.462Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5e372aa854878c2af6ccb023",
                    "text": "The Ackermann function (named after the German mathematician Wilhelm Friedrich Ackermann) grows rapidly already for small inputs. It exists in different variants, one of the common definitions is the following (for two nonnegative integers m and n):\n\n```image\nlabel: Ackermann\nsize: medium\n```\n\n"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [
                      {
                        "id": "imfblzzkfqgeyfwj",
                        "type": "unitTest",
                        "tests": [
                          {
                            "id": "moGx14wpxXaPwoXtmvhM",
                            "name": "ackermann_0_0",
                            "description": "The result of ackermann(0,0) should be 1.",
                            "isCode": false,
                            "code": "ackermann(0,0) == 1"
                          },
                          {
                            "id": "FNRZE2jdumaPh0I55eAq",
                            "name": "ackermann_1_1",
                            "description": "The result of ackermann(1,1) should be 3.",
                            "isCode": false,
                            "code": "ackermann(1,1) == 3"
                          },
                          {
                            "id": "zSBUw6LQQdC0,vcJ5m,J",
                            "name": "ackermann_2_2",
                            "description": "The result of ackermann(2,2) should be 7.",
                            "isCode": false,
                            "code": "ackermann(2,2) == 7"
                          },
                          {
                            "id": "7O9SFB9xE7zbhgrKWMWU",
                            "name": "ackermann_1_0",
                            "description": "The result of ackermann(1,0) should be 2.",
                            "isCode": false,
                            "code": "ackermann(1,0) == 2"
                          },
                          {
                            "id": "vLrYrw9lQS3IIk6lmgIa",
                            "name": "ackermann_1_2",
                            "description": "The result of ackermann(1,2) should be 4.",
                            "isCode": false,
                            "code": "ackermann(1,2) == 4"
                          }
                        ]
                      }
                    ],
                    "_id": "5e372a7054878c125dccb022",
                    "programmingLanguage": "python",
                    "text": "Define and implement a (recursive) function `ackermann(m,n)` that computes the Ackermann function value for two nonnegative integers m and n. \n\nYou can use the following code to test your function:\n```python\nprint(f\"ackermann(0,0) = {ackermann(0,0)}\")\nprint(f\"ackermann(1,1) = {ackermann(1,1)}\")\nprint(f\"ackermann(2,2) = {ackermann(2,2)}\")\n\n```\n\nThe output should be something like:\n\n```\nackermann(0,0) = 1\nackermann(1,1) = 3\nackermann(2,2) = 7\n```",
                    "solution": "```python\n# function implementing the Ackermann function \n# (following straightforward from the recursive definition)\ndef ackermann(m,n):\n    if m==0:\n        return n+1\n    elif m>0 and n==0:\n        return ackermann(m-1,1)\n    else:\n        return ackermann(m-1,ackermann(m,n-1))\n",
                    "template": "# Python function implementing the Ackermann function \ndef ackermann(m,n):\n    # (fill this in)"
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e372be554878c1389ccb028",
                    "text": "Now run the following test program on your ackermann function:\n```python\n# test program\ni = 0\nwhile True:\n    print(f\"ackermann({i},{i}) = {ackermann(i,i)}\")\n    i += 1\n```\n\nWhat is the last value that your program computes before you get a\n`RecursionError?` (Hint: It might be that the outputs in the IPython console in Spyder are too verbose to see anything. You can alternatively run your program from the command line to see more.) \n\nWhat does this error mean?",
                    "solution": "The last output that I can get is `ackermann(3,3) = 61`. While trying to compute ackermann(4,4) the maximum recursion depth is reached and the program aborts with an `RecursionError`. \n\nThe Python environment allows only for a limited number of recursive calls of a function (to avoid them using up the available working memory), and with the fast-growing and double-recursive Ackermann function this limit is reached very quickly. For other recursive functions, it takes much longer before this happens, and often a `RecursionError` means that something is wrong with the implementation, so that recursive calls continue to happen although they should not (similar to an infinite loop)."
                  }
                ]
              },
              "publicKey": "r5cggahabyh08uonl8rq"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "6020f608a4b5cd62acc7f3c1",
              "languages": [],
              "searchString": "Lecture Notes lecture notes lecturenotes",
              "moduleId": "6020f608a4b5cd9e4ac7f3bf",
              "index": 0,
              "title": "Lecture Notes",
              "files": [
                {
                  "_id": "6020f65ea4b5cd69b2c7f3f2",
                  "label": "06FunctionsandModules",
                  "mimetype": "application/pdf",
                  "extension": ".pdf",
                  "createdAt": "2021-02-08T08:29:18.475Z",
                  "updatedAt": "2021-02-08T08:29:18.475Z"
                }
              ],
              "createdAt": "2020-02-02T19:16:32.480Z",
              "updatedAt": "2021-05-03T10:31:46.472Z",
              "__v": 3,
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5e42ca9ae731b12269300799",
                    "text": "```file\n\tlabel: \tModule6-LectureNotes\n```"
                  }
                ]
              },
              "publicKey": "cj9rbjgz4hdu9d3dr722"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "6020f608a4b5cd49e3c7f3c3",
              "languages": [],
              "searchString": "Basic Statistics basic statistics basicstatistics",
              "moduleId": "6020f608a4b5cd9e4ac7f3bf",
              "index": 4,
              "title": "Basic Statistics",
              "files": [],
              "createdAt": "2020-02-02T19:56:30.798Z",
              "updatedAt": "2021-05-03T10:31:46.480Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e372972e1d6d8f98bac0724",
                    "programmingLanguage": "python",
                    "text": "Use the `statistics` package from the Python standard library to define and\nimplement a function `print_basic_statistics()` with the following characteristics:\n* the function takes arbitrarily many numbers as input\n* the default case is that the function prints the arithmetic mean, median,\nstandard variation and variance of the input data to the screen\n* via a named parameter the calling code should also have the option to select only one of the four to be printed\n\nYou can use the following code to test your function:\n\n```python\nprint_basic_statistics(91,82,19,13,44,)\nprint_basic_statistics(91,82,19,13,44,73,18,95,17,65, \\ \noutput=\"median\")\n```\n\nThe output should be something like:\n```\nThe mean of (91, 82, 19, 13, 44) is 49.8.\nThe median of (91, 82, 19, 13, 44) is 44.0.\nThe standard deviation of (91, 82, 19, 13, 44) is 35.6.\nThe variance of (91, 82, 19, 13, 44) is 1267.7.\n\nThe median of (91, 82, 19, 13, 44, 73, 18, 95, 17, 65) is 54.5.\n```",
                    "solution": "```python\n# import the statistics package\nimport statistics\n\n# Function that prints basic statistics for a sequence of numbers. Optionally,\n# the desired output can be specified (mean, median, sd, var). Default is to\n# to print all of them.\ndef print_basic_statistics(*numbers, output=\"all\"):\n    if output == \"all\":\n        print(f\"The mean of {numbers} is {statistics.mean(numbers):.1f}.\")\n        print(f\"The median of {numbers} is {statistics.median(numbers):.1f}.\")\n        print(f\"The standard deviation of {numbers} is {statistics.stdev(numbers):.1f}.\")\n        print(f\"The variance of {numbers} is {statistics.variance(numbers):.1f}.\")\n    elif output == \"mean\":\n        print(f\"The mean of {numbers} is {statistics.mean(numbers):.1f}.\")\n    elif output == \"median\":\n        print(f\"The median of {numbers} is {statistics.median(numbers):.1f}.\")\n    elif output == \"sd\":\n        print(f\"The standard deviation of {numbers} is {statistics.stdev(numbers):.1f}.\")\n    elif output == \"var\":\n        print(f\"The variance of {numbers} is {statistics.variance(numbers):.1f}.\")\n    else:\n        print(\"Unknown parameter.\")\n\n\n# test program\nprint_basic_statistics(91,82,19,13,44)\nprint_basic_statistics(91,82,19,13,44,73,18,95,17,65, output=\"median\")",
                    "template": "# import the statistics package\nimport statistics\n\n# Function that prints basic statistics for a sequence of numbers. Optionally,\n# the desired output can be specified (mean, median, sd, var). Default is to\n# to print all of them.\n# (fill this in)\n\n# test program\nprint_basic_statistics(91,82,19,13,44)\nprint_basic_statistics(91,82,19,13,44,73,18,95,17,65, output=\"median\")"
                  }
                ]
              },
              "publicKey": "p3whp0sz15j9y18aks1s"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "6020fc8aa4b5cd7280c7f524",
              "languages": [],
              "searchString": "String Reverse string reverse stringreverse",
              "moduleId": "6020fc8aa4b5cdecb8c7f522",
              "index": 1,
              "title": "String Reverse",
              "isOptional": false,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-02-03T19:12:50.910Z",
              "updatedAt": "2021-05-03T10:31:46.488Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [
                      {
                        "id": "txhmvbvvtgkockph",
                        "type": "unitTest",
                        "tests": [
                          {
                            "id": "vD3XB,6zaq15S5ZQN4KM",
                            "name": "test_recursive_hello",
                            "description": "The recursive implementation should reverse \"hello\" correctly.",
                            "isCode": false,
                            "code": "reverse_recursive(\"hello\") == \"olleh\""
                          },
                          {
                            "id": ",k4K0Kzj7iKSwuknS3vZ",
                            "name": "test_recursive_password",
                            "description": "The recursive implementation should reverse the string \"password\" correctly.",
                            "isCode": false,
                            "code": "reverse_recursive(\"password\") == \"drowssap\""
                          },
                          {
                            "id": "kw,4cbmFU0ZQ0JnBExY7",
                            "name": "test_recursive_empty",
                            "description": "The recursive implementation should reverse the empty string correctly.",
                            "isCode": false,
                            "code": "reverse_recursive(\"\") == \"\""
                          },
                          {
                            "id": "ID,4XzX,P3kf8beTFvOT",
                            "name": "test_while_hello",
                            "description": "The while implementation should reverse the string \"hello\" correctly.",
                            "isCode": false,
                            "code": "reverse_while(\"hello\") == \"olleh\""
                          },
                          {
                            "id": "7nZQJl8halK0iyT3FKdS",
                            "name": "test_while_password",
                            "description": "The while implementation should reverse the string \"password\" correctly.",
                            "isCode": false,
                            "code": "reverse_while(\"password\") == \"drowssap\""
                          },
                          {
                            "id": "CW1FGYGJrffTnjd,PRq2",
                            "name": "test_while_empty",
                            "description": "The while implementation should reverse the empty string correctly.",
                            "isCode": false,
                            "code": "reverse_while(\"\") == \"\""
                          },
                          {
                            "id": "IU5IeBWVeXPU9AQX3uhj",
                            "name": "test_for_hello",
                            "description": "The for implementation should reverse the string \"hello\" correctly.",
                            "isCode": false,
                            "code": "reverse_for(\"hello\") == \"olleh\""
                          },
                          {
                            "id": "vKttkla2Zi4hlym4ngCR",
                            "name": "test_for_password",
                            "description": "The for implementation should reverse the string \"password\" correctly.",
                            "isCode": false,
                            "code": "reverse_for(\"password\") == \"drowssap\""
                          },
                          {
                            "id": "VvEn0F9bHXk2WG,nKli8",
                            "name": "test_for_empty",
                            "description": "The for implementation should reverse the empty string correctly.",
                            "isCode": false,
                            "code": "reverse_for(\"\") == \"\""
                          },
                          {
                            "id": "HYsaLLq40,Zmm0rC1G6T",
                            "name": "test_equality",
                            "description": "All three functions should return the same result.",
                            "isCode": false,
                            "code": "reverse_recursive(\"hello\") == reverse_while(\"hello\") == reverse_for(\"hello\")"
                          }
                        ]
                      }
                    ],
                    "_id": "5e3870b7a14e590a7748f27b",
                    "programmingLanguage": "python",
                    "text": "Implement three different variants of a function for reversing a string:\n\n1. `reverse_recursive(string)`, solving the problem recursively\n2. `reverse_while(string)`, solving the problem using a while-loop\n3. `reverse_for(string)`, solving the problem using a for-loop\n\nStrings can be indexed like lists, that is, an expression like `<string>[<index>]` returns the character at the corresponding position in the string. The first character of the string has index `0`, and the last is at position `len(<string>)-1`. A sub-sequence of a string can be obtained by specifying a range of indexes, for example `<string>[1:len(<string>)]` for all characters but the first. ",
                    "solution": "```python\n# function for reversing a string recursively\n# (Idea: If the string consists only of one letter, the reverse is trivial.\n# If the string is longer, reverse the string from the second character to\n# the end, append the first character to that.)\ndef reverse_recursive(string):\n    if len(string) > 1:\n        return reverse_recursive(string[1:len(string)]) + string[0]\n    else:\n        return string\n\n# function for reversing a string with a while-loop\n# (Idea: Iterate over the characters of the string with a while-loop, \n# in each iteration adding the current letter to the beginning of the \n# reversed string.)\ndef reverse_while(string):\n    i = 0\n    reversed_string = \"\"\n    while i < len(string):\n        reversed_string = string[i] + reversed_string\n        i = i+1\n    return reversed_string\n\n# function for reversing a string with a for-loop\n# (Idea: Same as with the while-loop, but less index management needed.)\ndef reverse_for(string):\n    reversed_string = \"\"\n    for s in string:\n        reversed_string = s + reversed_string\n    return reversed_string\n    \n# test program\nstring_to_reverse = \"This is just a test.\"\nprint(reverse_recursive(string_to_reverse))\nprint(reverse_while(string_to_reverse))\nprint(reverse_for(string_to_reverse))",
                    "template": "# function for reversing a string recursively\ndef reverse_recursive(string):\n    # (fill this in)\n    \n# function for reversing a string with a while-loop\ndef reverse_while(string):\n    #  (fill this in)\n    \n# function for reversing a string with a for-loop\ndef reverse_for(string):\n    #  (fill this in)\n\n# test program\nstring_to_reverse = \"This is just a test.\"\nprint(reverse_recursive(string_to_reverse))\nprint(reverse_while(string_to_reverse))\nprint(reverse_for(string_to_reverse))"
                  }
                ]
              },
              "publicKey": "9amuw7w6jl2eyjfme6ua"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "6020fc8aa4b5cda5a9c7f523",
              "languages": [],
              "searchString": "Lecture Notes lecture notes lecturenotes",
              "moduleId": "6020fc8aa4b5cdecb8c7f522",
              "index": 0,
              "title": "Lecture Notes",
              "isOptional": false,
              "difficulty": null,
              "files": [
                {
                  "_id": "603f4823a2a9373f9839e28b",
                  "label": "07Data_Structures",
                  "mimetype": "application/pdf",
                  "extension": ".pdf",
                  "createdAt": "2021-03-03T08:26:11.414Z",
                  "updatedAt": "2021-03-03T08:26:11.414Z"
                }
              ],
              "createdAt": "2020-02-03T19:12:36.067Z",
              "updatedAt": "2021-05-03T10:31:46.498Z",
              "__v": 5,
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5e42cd9ae731b12e7830079c",
                    "text": "```file\n\tlabel: Module7-LectureNotes\t\n```"
                  }
                ]
              },
              "publicKey": "9293l59bmd3bno23cg90"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "6020fc8aa4b5cdea39c7f526",
              "languages": [],
              "searchString": "Room Occupancy room occupancy roomoccupancy",
              "moduleId": "6020fc8aa4b5cdecb8c7f522",
              "index": 5,
              "title": "Room Occupancy",
              "isOptional": false,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-02-03T19:25:13.209Z",
              "updatedAt": "2021-05-03T10:31:46.506Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e38739dd168a1b52139d7b1",
                    "programmingLanguage": "python",
                    "text": "Imagine a small hostel with four four-bed rooms (with the arbitrarily chosen numbers 101, 102, 201, and 202). You want to write a little program for the hostel staff to help them keep track of the room occupancy and checking guests in and out. The code for the user interaction already exists (see below), but you still need to implement the missing functions:\n\n* `print_occupancy` should simply print out a list of all rooms and the guests that are currently checked in.\n* `check_in` should add a guest to a room. If a non-existing room number is\ngiven or if the chosen room is already full, a corresponding message should be printed. There can be two guests with the same name in one room.\n* `check_out` should remove a guest from a room. If a wrong room number or\nguest name is passed, a corresponding message should be printed.\n\nThe code of a possible main program is included in the template below. It hows how the functions are used, and you can also use it to test your implementation.",
                    "solution": "```python\n# function that prints the current room occupancy\ndef print_occupancy(ro):\n    rooms = list(ro.keys())\n    rooms.sort()\n    for room in rooms:\n        print(f\"{room}: {ro[room]}\")\n\n# function for checking in a guest to a room\ndef checkin(ro, guest, room):\n    if room in ro:\n        if len(ro[room]) < 4:\n            ro[room].append(guest)\n        else:\n            print(f\"Room {room} is already full.\")\n    else:\n        print(\"Room {room} does not exist.\")\n\n# function for checking out a guest from a room\ndef checkout(ro, guest, room):\n    if room in ro:\n        if guest in ro[room]:\n            ro[room].remove(guest)\n        else:\n            print(f\"{guest} is not a guest in room {room}.\")\n    else:\n        print(\"Room {room} does not exist.\")\n\n\n# Main program\nroom_occupancy = {101:[], 102:[], 201:[], 202:[]}\n\nwhile True:\n    print(\"These are your options:\")\n    print(\"1 - View current room occupancy.\")\n    print(\"2 - Check guest in.\")\n    print(\"3 - Check guest out.\")\n    print(\"4 - Exit program.\")\n    choice = input(\"Please choose what you want to do: \")\n\n    if choice == \"1\":\n        print_occupancy(room_occupancy)\n    elif choice == \"2\":\n        guest = input(\"Enter name of guest: \")\n        room = int(input(\"Enter room number: \"))\n        checkin(room_occupancy, guest, room)\n    elif choice == \"3\":\n        guest = input(\"Enter name of guest: \")\n        room = int(input(\"Enter room number: \"))\n        checkout(room_occupancy, guest, room)\n    elif choice == \"4\":\n        print(\"Goodbye!\")\n        break\n    else:\n        print(\"Invalid input, try again.\")",
                    "template": "# function that prints the current room occupancy\ndef print_occupancy(ro):\n    # (fill this in)\n    \n# function for checking in a guest to a room\ndef checkin(ro, guest, room):\n    # (fill this in)\n    \n# function for checking out a guest from a room\ndef checkout(ro, guest, room):\n    # (fill this in)\n    \n# Main program\nroom_occupancy = {101:[], 102:[], 201:[], 202:[]}\nwhile True:\n\tprint(\"These are your options:\")\n\tprint(\"1 - View current room occupancy.\")\n\tprint(\"2 - Check guest in.\")\n\tprint(\"3 - Check guest out.\")\n\tprint(\"4 - Exit program.\")\n\tchoice = input(\"Please choose what you want to do: \")\n\n\tif choice == \"1\":\n\t\tprint_occupancy(room_occupancy)\n\telif choice == \"2\":\n\t\tguest = input(\"Enter name of guest: \")\n\t\troom = int(input(\"Enter room number: \"))\n\t\tcheck_in(room_occupancy, guest, room)\n\telif choice == \"3\":\n\t\tguest = input(\"Enter name of guest: \")\n\t\troom = int(input(\"Enter room number: \"))\n\t\tcheck_out(room_occupancy, guest, room)\n\telif choice == \"4\":\n\t\tprint(\"Goodbye!\")\n\t\tbreak\n\telse:\n\t\tprint(\"Invalid input, try again.\")"
                  }
                ]
              },
              "publicKey": "8yfjceu712c7x4t3c1ta"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "6020fc8aa4b5cd95e4c7f528",
              "languages": [],
              "searchString": "Irish League irish league irishleague",
              "moduleId": "6020fc8aa4b5cdecb8c7f522",
              "index": 2,
              "title": "Irish League",
              "isOptional": false,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-02-03T19:16:54.162Z",
              "updatedAt": "2021-05-03T10:31:46.515Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e3871a9a14e59674c48f27d",
                    "programmingLanguage": "python",
                    "text": "Consider again the \"Irish League\" example from the lecture:\n\n```python\nteams = [\"Connacht\", \"Ulster\", \"Munster\", \"Leinster\"]\nfor home in teams:\n\tfor guest in teams:\n\t\tif home != guest:\n\t\t\tprint(f\"{home} : {guest}\")\n```\n\nAdd another list at the beginning:\n\n```python\ndates = [\"June 1\", \"June 3\", \"June 2\", \"June 4\", \"June 6\", \"June 5\", \\\n\"June 7\", \"June 9\", \"June 8\", \"June 10\", \"June 11\", \"June 12\"]\n```\n\nThen adapt the code so that it does not only print the pairings, but also the date on which the match shall take place (using the dates in the list in the order they appear there). The output should then be:\n\n```\nConnacht : Ulster (June 1)\nConnacht : Munster (June 3)\nConnacht : Leinster (June 2)\nUlster : Connacht (June 4)\nUlster : Munster (June 6)\nUlster : Leinster (June 5)\nMunster : Connacht (June 7)\nMunster : Ulster (June 9)\nMunster : Leinster (June 8)\nLeinster : Connacht (June 10)\nLeinster : Ulster (June 11)\nLeinster : Munster (June 12)\n```",
                    "solution": "```python\n# list containing teams and match dates\nteams = [\"Connacht\", \"Ulster\", \"Munster\", \"Leinster\"] \ndates = [\"June 1\", \"June 3\", \"June 2\", \"June 4\", \"June 6\", \"June 5\", \\\n         \"June 7\", \"June 9\", \"June 8\", \"June 10\", \"June 11\", \"June 12\"]\n\n# print all match pairings and dates\ni = 0\nfor home in teams: \n    for guest in teams: \n        if home != guest: \n            print(f\"{home} : {guest} ({dates[i]})\")\n            i += 1",
                    "template": "# list containing teams and match dates\nteams = [\"Connacht\", \"Ulster\", \"Munster\", \"Leinster\"] \ndates = [\"June 1\", \"June 3\", \"June 2\", \"June 4\", \"June 6\", \"June 5\", \\\n         \"June 7\", \"June 9\", \"June 8\", \"June 10\", \"June 11\", \"June 12\"]\n         \n# print all match pairings and dates\n# (fill this in)"
                  }
                ]
              },
              "publicKey": "9drn3vd78esvxuw6z337"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "6020fc8aa4b5cd2655c7f527",
              "languages": [],
              "searchString": "Anagram Test anagram test anagramtest",
              "moduleId": "6020fc8aa4b5cdecb8c7f522",
              "index": 4,
              "title": "Anagram Test",
              "isOptional": false,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-02-03T19:22:17.712Z",
              "updatedAt": "2021-05-03T10:31:46.524Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [
                      {
                        "id": "ysezrguexgmnhgnj",
                        "type": "unitTest",
                        "tests": [
                          {
                            "id": "nYBTVHlPChc1T,P,WTSS",
                            "name": "test_rescue_secure",
                            "description": "The result of is_anagram(\"rescue\", \"secure\") should be True.",
                            "isCode": false,
                            "code": "is_anagram(\"rescue\", \"secure\") == True"
                          },
                          {
                            "id": "mkbdwgMckUMX2kPXUtnb",
                            "name": "test_Rescue_Secure",
                            "description": "The result of is_anagram(\"Rescue\", \"Secure\") should be True.",
                            "isCode": false,
                            "code": "is_anagram(\"Rescue\", \"Secure\") == True"
                          },
                          {
                            "id": "G9rIYZntJyXcBLPXvNCD",
                            "name": "test_Rescue_Anchor",
                            "description": "The result of is_anagram(\"Rescue\", \"Anchor\") should be False.",
                            "isCode": false,
                            "code": "is_anagram(\"Rescue\", \"Anchor\") == False"
                          },
                          {
                            "id": "EVIX7vL0MT0WVr7jF,uo",
                            "name": "test_Ship_Secure",
                            "description": "The result of is_anagram(\"Ship\", \"Secure\") should be False.",
                            "isCode": false,
                            "code": "is_anagram(\"Ship\", \"Secure\") == False"
                          }
                        ]
                      }
                    ],
                    "_id": "5e3872ecd168a1482439d7af",
                    "programmingLanguage": "python",
                    "text": "An anagram is a word or phrase that is made by rearranging the letters of another word or phrase. For example, \"secure\" is an anagram of \"rescue\". Write a function `is_anagram(word1,word2)` that checks if the two words are anagrams of each other. If so, the function should return `True`, and `False` otherwise. The function should not distinguish between upper- and lower-case letters.",
                    "solution": "```python\n# Function to test if two words are anagrams.\n# Basic idea: count the number of occurrences of each\n# letter in two dictionaries, then compare if they are the same.\n# (An alternative solution would be to simply sort the strings and \n# compare if they are equal then.)\ndef is_anagram(word1,word2):\n    counts1 = {}\n    for w in word1.lower():\n        if w in counts1:\n            counts1[w] += 1\n        else:\n            counts1[w] = 1\n\n    counts2 = {}\n    for w in word2.lower():\n        if w in counts2:\n            counts2[w] += 1\n        else:\n            counts2[w] = 1\n\n    return counts1 == counts2\n\n\n# Test program\nprint(is_anagram(\"rescue\", \"secure\")) # should be True\nprint(is_anagram(\"Rescue\", \"Secure\")) # should be True\nprint(is_anagram(\"Rescue\", \"Anchor\")) # should be False\nprint(is_anagram(\"Ship\", \"Secure\")) # should be False",
                    "template": "def is_anagram(word1,word2):\n    # insert your code here\n\n# Test program\nprint(is_anagram(\"rescue\", \"secure\")) # should be True\nprint(is_anagram(\"Rescue\", \"Secure\")) # should be True\nprint(is_anagram(\"Rescue\", \"Anchor\")) # should be False\nprint(is_anagram(\"Ship\", \"Secure\")) # should be False"
                  }
                ]
              },
              "publicKey": "h00sv3p9pgi3i00sloao"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "6020fc8aa4b5cd0eb5c7f525",
              "languages": [],
              "searchString": "List of Fibonacci Numbers list of fibonacci numbers listoffibonaccinumbers",
              "moduleId": "6020fc8aa4b5cdecb8c7f522",
              "index": 3,
              "title": "List of Fibonacci Numbers",
              "isOptional": false,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-02-03T19:19:07.421Z",
              "updatedAt": "2021-05-03T10:31:46.532Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [
                      {
                        "id": "wuxfesifzpinglbu",
                        "type": "unitTest",
                        "tests": [
                          {
                            "id": "9qrzhCCk6JBQg7nKJzoS",
                            "name": "test_fib_0",
                            "description": "The result of fib(0) should be a list \\[1\\].",
                            "isCode": false,
                            "code": "fib(0) == [1]"
                          },
                          {
                            "id": "hkL1Ro3tLMfF5Yuc7RVA",
                            "name": "test_fib_1",
                            "description": "The result of fib(1) should be a list \\[1,1\\].",
                            "isCode": false,
                            "code": "fib(1) == [1,1]"
                          },
                          {
                            "id": "9zVrbIi7kMBgkv79FVUT",
                            "name": "test_fib_2",
                            "description": "The result of fib(2) should be a list \\[1,1,2\\].",
                            "isCode": false,
                            "code": "fib(2) == [1,1,2]"
                          },
                          {
                            "id": "jF2rmUi8hjZhkWlBkq4s",
                            "name": "test_fib_12",
                            "description": "The result of fib(12) should be a list \\[1,1,2,3,5,8,13,21,34,55,89,144,233\\].",
                            "isCode": false,
                            "code": "fib(12) == [1,1,2,3,5,8,13,21,34,55,89,144,233]"
                          },
                          {
                            "id": "Lh66vb492TVBw0j2G7UQ",
                            "name": "test_fib_negative",
                            "description": "The result of fib(-1) should be None.",
                            "isCode": false,
                            "code": "fib(-1) == None"
                          }
                        ]
                      }
                    ],
                    "_id": "5e38722ea14e59792148f27f",
                    "programmingLanguage": "python",
                    "text": "Implement a function `fib(n)` that returns a list with the first `n` Fibonacci numbers. If `n==0`, it should directly return the list `[1]`, if `n==1`, it should return `[1,1]`, and if `n>1` it should use `[1,1]` as a start and compute Fibonacci numbers `2` to `n` by always adding the two predecessors in the list. If `n` is not an integer greater or equal to 0, the function should simply return `None`.",
                    "solution": "```python\n# function that writes the first n fibonacci numbers into a list\ndef fib(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1,1]\n    elif n > 1:\n        numbers = [1,1]\n        next_index = 2\n        while next_index <= n:\n            numbers.append(numbers[next_index-1]+numbers[next_index-2])\n            next_index = next_index + 1\n        return numbers\n    else:\n        return None\n\n# test program\nprint(fib(0))\nprint(fib(1))\nprint(fib(2))\nprint(fib(12))\nprint(fib(-1))",
                    "template": "def fib(n):\n    # (fill this in)\n\n# test program\nprint(fib(0))\nprint(fib(1))\nprint(fib(2))\nprint(fib(12))\nprint(fib(-1))"
                  }
                ]
              },
              "publicKey": "b81heqyvbas7ezyd2mf0"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "6020ff73a4b5cdfeaac7f5ff",
              "languages": [],
              "searchString": "Longest Word longest word longestword",
              "moduleId": "6020ff73a4b5cd04bec7f5fc",
              "index": 2,
              "title": "Longest Word",
              "isOptional": false,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-02-18T10:56:50.692Z",
              "updatedAt": "2021-05-03T10:31:46.542Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e4bc2fe9bb9245d7c48127e",
                    "programmingLanguage": "python",
                    "text": "Reuse your code from the \"Text Analysis\" exercise (Module 5) to create a function that finds the longest word in a given text. Apply it to the text file that you used for the previous exercise (\"Interview Anonymization\"). The output should be something like:\n\n`The longest word in the text is \"responsibility\".`\n",
                    "solution": "```python\n# function to find the longest word in a text\ndef find_longest_word(text):\n    # initialize running length counter and word\n    length = 0\n    word = \"\"\n    \n    # initialize variables for storing the max. length and longest word\n    max_length = 0\n    longest_word = \"\"\n    \n    # for all characters in the text ...\n    for character in text:\n        \n        # check if the character is a letter (part of a word).\n        if character.isalpha():\n            # if yes, increment the length counter and \n            # add the character to the word to remember\n            length += 1\n            word += character\n        else:\n            # if not, check if the last word was longer then the previous longest word\n            if length > max_length:\n                # if yes, remember the new max. length and longest word\n                max_length = length\n                longest_word = word\n            # reset running variables\n            length = 0\n            word = \"\"\n    \n    return longest_word\n    \n# main program\ntext_file = \"interview-with-a-syrian-refugee.txt\"\n\ntry:\n    # read original interview text from file\n    with open(text_file, \"r\") as file:\n        text = file.read()\n\n# if input file is not found, inform user accordingly\nexcept FileNotFoundError:\n    print(f\"File {text_file} not found.\")\n\n# for any other error, display the exception message\nexcept Exception as err:\n    print(\"Something went wrong...\")\n    print(err)\n    \n# print result\nprint(f\"The longest word in the text is \\\"{find_longest_word(text)}\\\".\")\n",
                    "template": "# function to find the longest word in a text\ndef find_longest_word(text):\n    # (insert code to implement the function here)\n    # ...\n    return longest_word\n    \n# main program \ntext_file = \"interview-with-a-syrian-refugee.txt\"\n# (insert code to read the file and apply function here)"
                  }
                ]
              },
              "publicKey": "44luhjyv1l1v52m9ott9"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "6020ff73a4b5cd6124c7f603",
              "languages": [],
              "searchString": "Extra extra",
              "moduleId": "6020ff73a4b5cd04bec7f5fc",
              "index": 6,
              "title": "Extra",
              "isOptional": true,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-02-18T12:04:59.675Z",
              "updatedAt": "2021-05-03T10:31:46.550Z",
              "__v": 1,
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5e4bd2ef9bb924c95c48128e",
                    "text": "The storytelling exercise was hopefully a bit of fun, but of course we generated a very simple kind of prose text there. The website https://eh.bard.edu/2016/11/07/generating-algorithmic-poetry/ shows how to use Python to automatically generate poems in the style\nof Shakespeare or Dickinson. Have a look if you find that interesting!"
                  }
                ]
              },
              "publicKey": "hdm9f8e3dk6lmcbhuppn"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "6020ff73a4b5cdce49c7f602",
              "languages": [],
              "searchString": "Error Handling error handling errorhandling",
              "moduleId": "6020ff73a4b5cd04bec7f5fc",
              "index": 5,
              "title": "Error Handling",
              "isOptional": false,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-02-18T12:00:23.141Z",
              "updatedAt": "2021-05-03T10:31:46.560Z",
              "__v": 1,
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5e4bd1e69bb924f73b48128a",
                    "text": "If you have not done it yet, add adequate \"try and except\" error handling to your code for the four coding exercises of this module. \n\nInclude it in all code that you write from now on, at least when dealing with user inputs, file reading/writing operations, and accessing resources or services on the web."
                  }
                ]
              },
              "publicKey": "psgxr3hd0npwdob50z55"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "6020ff73a4b5cd1f22c7f600",
              "languages": [],
              "searchString": "Randomized Story-Telling randomized story-telling randomized story telling randomizedstorytelling",
              "moduleId": "6020ff73a4b5cd04bec7f5fc",
              "index": 3,
              "title": "Randomized Story-Telling",
              "isOptional": false,
              "difficulty": 0,
              "files": [
                {
                  "_id": "6020ff73a4b5cd37fbc7f605",
                  "label": "inputs",
                  "mimetype": "text/csv",
                  "extension": ".csv",
                  "createdAt": "2021-02-08T09:08:03.944Z",
                  "updatedAt": "2021-02-08T09:08:03.944Z"
                }
              ],
              "createdAt": "2020-02-18T11:50:29.040Z",
              "updatedAt": "2021-05-03T10:31:46.568Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e4bcf889bb92475ce481282",
                    "programmingLanguage": "python",
                    "text": "One of the simple pen-and-paper games I remember from my childhood days goes as follows: A paper sheet is divided into four columns for the questions “Who?”, “Does what?”, “How?” and “Where?”. The first player would write down a person in the first column, then fold it away, the second would fill in a verb, fold it away, etc. After the fourth column has been filled, the complete sentence is read out. It could then be something like *“My brother is showering happily at the gas station.”* \n\nWrite a program that creates a user-defined number of such random sentences. The file “inputs.csv” contains a list of possible answers to all of the four questions. Take the values from there. Feel free to add further words to the CSV file to create more variation. \n\nThe output of the program should be something like:\n\n```\nHow many sentences do you want to create? 3\nMy granny is drinking massively at the fair.\nThe butcher is travelling aggressively in bed.\nMy grandpa is reading nicely in the bathroom.\n```\n```button\n\tlabel: inputs\n\ttext: Download inputs.csv\n",
                    "solution": "```python\nimport pandas as pd\nimport sys\nimport random\n\n# set path to input file\ninfile = \"inputs.csv\"\n\ntry:\n    # read input file as dataframe\n    df_in = pd.read_csv(infile, sep=\",\")\n\n# for any error, display the exception message\nexcept Exception as err:\n    print(\"Something went wrong...\")\n    print(err) \n    sys.exit()\n\n\n# ask user how many sentences should be created\nwhile True:\n    try:\n        number = int(input(\"How many sentences do you want to create? \"))\n        break\n    except ValueError:\n        print(\"That was no valid number. Try again.\") \n    \n# create the desired number of sentences\nwhile number > 0:\n\n    # select a random value for each of the four sentence elements\n    who = df_in.loc[random.randint(0,df_in[\"who\"].size-1),\"who\"]\n    does_what = df_in.loc[random.randint(0,df_in[\"does what\"].size-1),\"does what\"]\n    how = df_in.loc[random.randint(0,df_in[\"how\"].size-1),\"how\"]\n    where = df_in.loc[random.randint(0,df_in[\"where\"].size-1),\"where\"]\n    \n    print(f\"{who} {does_what} {how} {where}.\")\n\n    number -= 1"
                  }
                ]
              },
              "publicKey": "ih1t85hyz6sgdbscirqi"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "6020ff73a4b5cd130cc7f5fe",
              "languages": [],
              "searchString": "Interview Anonymization interview anonymization interviewanonymization",
              "moduleId": "6020ff73a4b5cd04bec7f5fc",
              "index": 1,
              "title": "Interview Anonymization",
              "isOptional": false,
              "difficulty": 0,
              "files": [
                {
                  "_id": "6020ff73a4b5cd3387c7f607",
                  "label": "interview-with-a-syrian-refugee",
                  "mimetype": "text/plain",
                  "extension": ".txt",
                  "createdAt": "2021-02-08T09:08:03.955Z",
                  "updatedAt": "2021-02-08T09:08:03.955Z"
                }
              ],
              "createdAt": "2020-02-18T09:16:57.976Z",
              "updatedAt": "2021-05-03T10:31:46.576Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e4bab8d0efbad4b024a597b",
                    "programmingLanguage": "python",
                    "text": "Imagine you are a journalist, and you have written a text about an interview with somebody. Because the person wants to go unrecognized, you have to replace their name by a fictive one everywhere in the text before it gets published.\n\nWrite a Python program that reads the file containing the interview text, replaces all occurrences of the original name by a new one (the `str.replace()` function can be used here), and saves the changed text in the file. \n\nYou can download and use the example text file \"interview-with-a-syrian-refugee.txt\" or create an own one.\n```button \n\tlabel: \tinterview-with-a-syrian-refugee\n\ttext: \tDownload example text file\n```",
                    "solution": "```python\n# set file names\ninterview_file = \"interview-with-a-syrian-refugee.txt\"\nnew_file = \"interview-with-a-syrian-refugee-anonymized.txt\"\n\ntry:\n    # read original interview text from file\n    with open(interview_file, \"r\") as file:\n        text = file.read()\n\n    # write obfuscated interview text to file\n    with open(new_file, \"w\") as file:\n        file.write(text.replace(\"Samira\",\"Amal\"))\n\n# if interview file is not found, inform user accordingly\nexcept FileNotFoundError:\n    print(f\"File {interview_file} not found.\")\n\n# for any other error, display the exception message\nexcept Exception as err:\n    print(\"Something went wrong...\")\n    print(err)"
                  }
                ]
              },
              "publicKey": "i9j99mvsii97i6lulzci"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "6020ff73a4b5cde4afc7f601",
              "languages": [],
              "searchString": "Popluation and Universities per Province popluation and universities per province popluationanduniversitiesperprovince",
              "moduleId": "6020ff73a4b5cd04bec7f5fc",
              "index": 4,
              "title": "Popluation and Universities per Province",
              "isOptional": false,
              "difficulty": 0,
              "files": [
                {
                  "_id": "6020ff73a4b5cd91a7c7f609",
                  "label": "dutch_municipalities",
                  "mimetype": "text/csv",
                  "extension": ".csv",
                  "createdAt": "2021-02-08T09:08:03.957Z",
                  "updatedAt": "2021-02-08T09:08:03.957Z"
                }
              ],
              "createdAt": "2020-02-18T11:56:24.371Z",
              "updatedAt": "2021-05-03T10:31:46.586Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e4bd0eb9bb924480b481286",
                    "programmingLanguage": "python",
                    "text": "Write a Python program that reads in the CSV file \"dutch_municipalities.csv\" that we already used in the lecture. Sum up the murders and inhabitants for each province and write the result into a new CSV file \"dutch_provinces.csv”, in alphabetical order of the province names. \n\nIts content should look like:\n\n```\nprovince,population,murders\nDrenthe,488892,0\nFlevoland,400179,5\nFriesland,580537,2\n[...]\nUtrecht,1254034,6\nZeeland,380619,3\nZuid-Holland,3579503,22\n```\n\n```button\n\tlabel: dutch_municipalities\n\ttext: Download dutch_municipalities.csv\n\t\n\t",
                    "solution": "```python\nimport pandas as pd\nimport sys\n\n# set paths to input and output file\ninfile = \"dutch_municipalities.csv\"\noutfile = \"provinces_and_murders.csv\"\n\ntry:\n    # read input file as dataframe\n    df_in = pd.read_csv(infile, sep=\"\\t\")\n\n# for any error, display the exception message\nexcept Exception as err:\n    print(\"Something went wrong...\")\n    print(err) \n    sys.exit()\n\n# init new empty dataframe with the wanted columns\ndf_out = pd.DataFrame(columns=[\"province\", \"population\", \"murders\"])\n\n# get province names (as sorted set)\nprovinces = sorted(set(df_in[\"province\"]))\n\n# for all provinces ...\nfor province in provinces:\n    # get the part of the dataframe for the province\n    df_province = df_in[df_in[\"province\"]==province]\n    \n    # sum up murders and population and add to new data frame\n    df_out = df_out.append({\"province\":province,\\\n                            \"population\":df_province[\"population\"].sum(),\\\n                            \"murders\":df_province[\"murders_2014\"].sum()},\\\n                            ignore_index=True)\n  \ntry:\n    # save new dataframe as csv file\n    df_out.to_csv(outfile, index=False)\n\n# for any error, display the exception message\nexcept Exception as err:\n    print(\"Something went wrong...\")\n    print(err) \n    sys.exit()\n    \n\n# Another possible, but longer solution is with the csv package and \n# dictionaries, as shown below (without try/except error handling).\n#\n# import csv\n#\n## create two empty dictionaries to collect the aggregated data\n#murders_per_province = {}\n#population_per_province = {}\n#\n## read in the data and iterate over all rows, adding up\n## population and murder numbers per province\n#with open(\"dutch_municipalities.csv\", \"r\") as csvfile:\n#    csvreader = csv.DictReader(csvfile, delimiter='\\t')\n#    for row in csvreader:\n#        if row[\"province\"] not in murders_per_province:\n#            murders_per_province[row[\"province\"]] = int(row[\"murders_2014\"])\n#        else:\n#            murders_per_province[row[\"province\"]] += int(row[\"murders_2014\"])\n#        if row[\"population\"] != \"\":\n#            if row[\"province\"] not in population_per_province:\n#                    population_per_province[row[\"province\"]] = \\\n#                        int(row[\"population\"])\n#            else:\n#                population_per_province[row[\"province\"]] += \\\n#                        int(row[\"population\"])\n#\n## write aggregated data into new CSV file\n#with open(\"provinces_and_murders.csv\", \"w\") as csvfile:\n#    csvwriter = csv.DictWriter(csvfile, fieldnames=[\"province\", \\\n#                                \"population\", \"murders\"], delimiter=\",\")\n#    csvwriter.writeheader()\n#    for province in sorted(murders_per_province):\n#        csvwriter.writerow({\"province\":province, \\\n#            \"population\":population_per_province[province],\\\n#            \"murders\":murders_per_province[province]})"
                  }
                ]
              },
              "publicKey": "we60x02e85mau6rrtci7"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "6020ff73a4b5cd2838c7f5fd",
              "languages": [],
              "searchString": "Lecture Notes lecture notes lecturenotes",
              "moduleId": "6020ff73a4b5cd04bec7f5fc",
              "index": 0,
              "title": "Lecture Notes",
              "isOptional": false,
              "difficulty": 0,
              "files": [
                {
                  "_id": "6020ffe5a4b5cde5e2c7f63a",
                  "label": "08FileIOandErrorHandling",
                  "mimetype": "application/pdf",
                  "extension": ".pdf",
                  "createdAt": "2021-02-08T09:09:57.990Z",
                  "updatedAt": "2021-02-08T09:09:57.990Z"
                }
              ],
              "createdAt": "2020-02-18T09:15:32.548Z",
              "updatedAt": "2021-05-03T10:31:46.595Z",
              "__v": 5,
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5e4bab385d040ea586c014e6",
                    "text": "```file\n\tlabel: Module8-LectureNotes\t\n```"
                  }
                ]
              },
              "publicKey": "rshs4cuyr0krenb8ojwb"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "603cbb3dc5f07f3c766cfafe",
              "searchString": "Last year's (repeat) midterm last year's (repeat) midterm last year s repeat midterm lastyearsrepeatmidterm last years (repeat) midterm last year (repeat) midterm",
              "moduleId": "603cbb1dc5f07f62bd6cfad3",
              "index": 0,
              "title": "Last year's (repeat) midterm",
              "isOptional": true,
              "files": [
                {
                  "_id": "603cbb5dc5f07f13456cfb40",
                  "label": "midterm-repeat",
                  "mimetype": "application/pdf",
                  "extension": ".pdf",
                  "createdAt": "2021-03-01T10:01:02.164Z",
                  "updatedAt": "2021-03-01T10:01:02.164Z"
                },
                {
                  "_id": "603d11a6c5f07f81856d825b",
                  "label": "assignment1-buggy",
                  "mimetype": "text/x-python",
                  "extension": ".py",
                  "createdAt": "2021-03-01T16:09:10.251Z",
                  "updatedAt": "2021-03-01T16:09:10.251Z"
                },
                {
                  "_id": "603d11a9c5f07f6fd76d8264",
                  "label": "assignment2-buggy",
                  "mimetype": "text/x-python",
                  "extension": ".py",
                  "createdAt": "2021-03-01T16:09:13.786Z",
                  "updatedAt": "2021-03-01T16:09:13.786Z"
                }
              ],
              "createdAt": "2021-03-01T10:00:29.827Z",
              "updatedAt": "2021-05-03T10:31:53.529Z",
              "__v": 4,
              "publicKey": "1kk6k4u8gj7fokrjsejx"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "603cbd48c5f07f851f6cfe09",
              "searchString": "Additional Exercises (by Casper Kaandorp): Set 1 additional exercises (by casper kaandorp): set 1 additional exercises by casper kaandorp set 1 additionalexercisesbycasperkaandorpset1",
              "moduleId": "603cbb1dc5f07f62bd6cfad3",
              "index": 1,
              "title": "Additional Exercises (by Casper Kaandorp): Set 1",
              "files": [
                {
                  "_id": "603cbf03c5f07f53666d0099",
                  "label": "hollow_cylinder",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 735,
                  "cropWidth": 559,
                  "createdAt": "2020-09-07T19:42:00.658Z",
                  "updatedAt": "2020-09-07T19:42:00.658Z"
                }
              ],
              "createdAt": "2021-03-01T10:09:12.727Z",
              "updatedAt": "2021-05-03T10:31:53.537Z",
              "__v": 2,
              "isOptional": true,
              "introduction": "These exercises were kindly shared by Casper Kaandorp, who developed them for his Python course. They might be useful for additional practice before the CoTaPP midterm.",
              "publicKey": "id1zv20qxya3desosqky"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "603cbfe1c5f07f29bd6d01e4",
              "searchString": "Additional Exercises (by Casper Kaandorp): Set 2 additional exercises (by casper kaandorp): set 2 additional exercises by casper kaandorp set 2 additionalexercisesbycasperkaandorpset2",
              "moduleId": "603cbb1dc5f07f62bd6cfad3",
              "index": 2,
              "title": "Additional Exercises (by Casper Kaandorp): Set 2",
              "isOptional": true,
              "files": [],
              "createdAt": "2021-03-01T10:20:17.944Z",
              "updatedAt": "2021-05-03T10:31:53.547Z",
              "__v": 1,
              "introduction": "These exercises were kindly shared by Casper Kaandorp, who developed them for his Python course. They might be useful for additional practice before the CoTaPP midterm.",
              "publicKey": "s4g5xm5cyrm380c7c4v3"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "603cc1e2c5f07f82fa6d0512",
              "searchString": "Additional Exercises (by Casper Kaandorp): Set 3 additional exercises (by casper kaandorp): set 3 additional exercises by casper kaandorp set 3 additionalexercisesbycasperkaandorpset3",
              "moduleId": "603cbb1dc5f07f62bd6cfad3",
              "index": 3,
              "title": "Additional Exercises (by Casper Kaandorp): Set 3",
              "isOptional": true,
              "files": [],
              "createdAt": "2021-03-01T10:28:50.495Z",
              "updatedAt": "2021-05-03T10:31:53.555Z",
              "__v": 1,
              "introduction": "These exercises were kindly shared by Casper Kaandorp, who developed them for his Python course. They might be useful for additional practice before the CoTaPP midterm.",
              "publicKey": "9ner5uyfxuolivsexgtg"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "603f3546a2a937a28d39ca0e",
              "searchString": "MasteryGrids online tutor masterygrids online tutor masterygridsonlinetutor",
              "moduleId": "603cbb1dc5f07f62bd6cfad3",
              "index": 4,
              "title": "MasteryGrids online tutor",
              "isOptional": true,
              "files": [],
              "createdAt": "2021-03-03T07:05:42.089Z",
              "updatedAt": "2021-05-03T10:31:53.776Z",
              "__v": 1,
              "publicKey": "7pm2vlyhjc6bwdgstn2z"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "60466c77a2a937932842001c",
              "searchString": "Midterm CoTaPP 2021 first two pages midterm cotapp 2021 first two pages midtermcotapp2021firsttwopages",
              "moduleId": "603cbb1dc5f07f62bd6cfad3",
              "index": 5,
              "title": "Midterm CoTaPP 2021 first two pages",
              "isOptional": true,
              "files": [
                {
                  "_id": "60466c8aa2a937911242003e",
                  "label": "midterm-firsttwopages",
                  "mimetype": "application/pdf",
                  "extension": ".pdf",
                  "createdAt": "2021-03-08T18:27:22.484Z",
                  "updatedAt": "2021-03-08T18:27:22.484Z"
                }
              ],
              "createdAt": "2021-03-08T18:27:03.372Z",
              "updatedAt": "2021-05-03T10:31:59.368Z",
              "__v": 2,
              "publicKey": "2xqd06lsizes31z6subu"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "6041ee7ca2a93744413cc4cf",
              "searchString": "Calling REST Web Services with GET calling rest web services with get callingrestwebserviceswithget",
              "moduleId": "6041ee7ca2a9373cd73cc4cc",
              "index": 2,
              "title": "Calling REST Web Services with GET",
              "isOptional": false,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-03-17T16:23:11.910Z",
              "updatedAt": "2021-05-03T10:31:56.701Z",
              "__v": 1,
              "hideSolutions": true,
              "publicKey": "bqpc4r8wyj7mgifufrr2"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "6041ee7ca2a937147d3cc4ce",
              "searchString": "Reading Content from the Web reading content from the web readingcontentfromtheweb",
              "moduleId": "6041ee7ca2a9373cd73cc4cc",
              "index": 1,
              "title": "Reading Content from the Web",
              "isOptional": false,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-03-17T16:17:30.331Z",
              "updatedAt": "2021-05-03T10:31:56.709Z",
              "__v": 1,
              "hideSolutions": true,
              "publicKey": "oyvw21zutbp5kxk8t6vp"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "6041ee7ca2a93710053cc4cd",
              "searchString": "Lecture Notes lecture notes lecturenotes",
              "moduleId": "6041ee7ca2a9373cd73cc4cc",
              "index": 0,
              "title": "Lecture Notes",
              "isOptional": false,
              "difficulty": 0,
              "files": [
                {
                  "_id": "6041ee7ca2a937b5933cc4d1",
                  "label": "simple",
                  "mimetype": "text/xml",
                  "extension": ".xml",
                  "createdAt": "2021-03-05T08:40:28.804Z",
                  "updatedAt": "2021-03-05T08:40:28.804Z"
                },
                {
                  "_id": "6041ee7ca2a93739523cc4d2",
                  "label": "esearch",
                  "mimetype": "text/xml",
                  "extension": ".xml",
                  "createdAt": "2021-03-05T08:40:28.805Z",
                  "updatedAt": "2021-03-05T08:40:28.805Z"
                },
                {
                  "_id": "6041ee7ca2a93725ff3cc4d3",
                  "label": "Module11-LectureNotes",
                  "mimetype": "application/pdf",
                  "extension": ".pdf",
                  "createdAt": "2021-03-05T08:40:28.805Z",
                  "updatedAt": "2021-03-05T08:40:28.805Z"
                }
              ],
              "createdAt": "2020-03-17T16:15:04.969Z",
              "updatedAt": "2021-05-03T10:31:56.718Z",
              "__v": 1,
              "publicKey": "wxkig1euk717ufv8dnbq"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "6041ee7ca2a9377ae23cc4d0",
              "searchString": "Calling REST Web Services with POST calling rest web services with post callingrestwebserviceswithpost",
              "moduleId": "6041ee7ca2a9373cd73cc4cc",
              "index": 3,
              "title": "Calling REST Web Services with POST",
              "isOptional": false,
              "difficulty": 0,
              "files": [
                {
                  "_id": "6041ee7ca2a937cab03cc4d7",
                  "label": "qrcode",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 250,
                  "cropWidth": 250,
                  "createdAt": "2021-03-05T08:40:28.810Z",
                  "updatedAt": "2021-03-05T08:40:28.810Z"
                }
              ],
              "createdAt": "2020-03-17T16:29:19.607Z",
              "updatedAt": "2021-05-03T10:31:56.727Z",
              "__v": 1,
              "hideSolutions": true,
              "publicKey": "ufae9d4l3e1ry6uvbc5a"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "604b3165a2a93798a34897fb",
              "searchString": "Course Manual (incl. Schedule) course manual (incl. schedule) course manual incl schedule coursemanualinclschedule",
              "moduleId": "604b314ba2a93746ec4897c2",
              "index": 0,
              "title": "Course Manual (incl. Schedule)",
              "isOptional": true,
              "files": [
                {
                  "_id": "604b325da2a937a5ba489a2c",
                  "label": "CourseManual",
                  "mimetype": "application/pdf",
                  "extension": ".pdf",
                  "createdAt": "2021-03-12T09:20:29.955Z",
                  "updatedAt": "2021-03-12T09:20:29.955Z"
                }
              ],
              "createdAt": "2021-03-12T09:16:21.335Z",
              "updatedAt": "2021-05-03T10:31:59.890Z",
              "__v": 2,
              "publicKey": "ih8biqc22iicpb3sxj4s"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "604dfc95a2a937fb804a8bb1",
              "languages": [],
              "searchString": "Analysis of the McDonald’s Menu analysis of the mcdonald’s menu analysis of the mcdonald s menu analysisofthemcdonaldsmenu analysis of the mcdonalds menu analysis of the mcdonald menu",
              "moduleId": "604dfc95a2a937c87e4a8baf",
              "index": 1,
              "title": "Analysis of the McDonald’s Menu",
              "isOptional": false,
              "difficulty": 0,
              "files": [
                {
                  "_id": "604dfc95a2a93715894a8bb2",
                  "label": "mcdonalds_menu",
                  "mimetype": "text/csv",
                  "extension": ".csv",
                  "createdAt": "2021-03-14T12:07:49.964Z",
                  "updatedAt": "2021-03-14T12:07:49.964Z"
                },
                {
                  "_id": "604dfc95a2a937c61a4a8bb4",
                  "label": "q2",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 376,
                  "cropWidth": 389,
                  "createdAt": "2021-03-14T12:07:49.964Z",
                  "updatedAt": "2021-03-14T12:07:49.964Z"
                },
                {
                  "_id": "604dfc95a2a9378c444a8bb5",
                  "label": "q4",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 476,
                  "cropWidth": 378,
                  "createdAt": "2021-03-14T12:07:49.964Z",
                  "updatedAt": "2021-03-14T12:07:49.964Z"
                },
                {
                  "_id": "604dfc95a2a937176a4a8bb6",
                  "label": "q6",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 711,
                  "cropWidth": 728,
                  "createdAt": "2021-03-14T12:07:49.966Z",
                  "updatedAt": "2021-03-14T12:07:49.966Z"
                },
                {
                  "_id": "6054b6caa2a93706a45065d8",
                  "label": "q1",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 445,
                  "cropWidth": 513,
                  "createdAt": "2021-03-19T14:35:55.431Z",
                  "updatedAt": "2021-03-19T14:36:07.146Z"
                }
              ],
              "createdAt": "2020-02-18T12:14:49.894Z",
              "updatedAt": "2021-05-03T10:32:00.013Z",
              "__v": 4,
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5e4bd58a9bb9244c6448129c",
                    "text": "This exercise is a variation of one that Adrien Melquiond (Utrecht Bioinformatics Center) developed in the scope of another Python course. It uses the Pandas and NumPy libraries to analyze the dataset in the file “mcdonalds_menu.csv”, which provides a nutrition analysis of every menu item on the US McDonald's menu (including breakfast, beef burgers, chicken and fish sandwiches, fries, salads, soda, coffee and tea, milkshakes, and desserts). These data have been scraped from the McDonald's website. The assignment is basically about exploring how much fat and other nutrients are contained in McDonald’s food. \n\n```button\n\tlabel: mcdonalds_menu\n\ttext: Download mcdonalds_menu.csv\n```\n\nYou can use the following code (which reads the content of the file into a data frame and displays simple descriptive statistics about the numerical values in the data frame) as a basis for writing the code to answer the six questions below. Note that you might need Google’s help for some, and number 2 is probably the most difficult one.\n\n```python\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# import menu and display the first two rows of the dataframe\nmenu = pd.read_csv(\"mcdonalds_menu.csv\")\nprint(menu.head(5))\n\n# display simple statistics about the data frame\nprint(menu.describe())"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e4bd7469bb9249a4f4812a1",
                    "programmingLanguage": "python",
                    "text": "Question 1: **What do we have on the menu?**\n\nHow many different items do we have on the menu? Print out the number of items. It should be something like:\n```\nTotal number of items: 260\n```\n\nWhich category is the most represented in this menu? Use a barplot to display the number of items per category. It should look something like:\n```file\n\tlabel: q1\n\tsize: small",
                    "solution": "```python\n# determine and print number of items \nprint(\"Total number of items:\", len(menu.Item.unique()))\n\n# create and show barplot of categories\nmenu.groupby('Category')['Item'].count().plot(kind='bar')\nplt.show()\n",
                    "template": "# determine and print number of items \n# (fill this in)\n\n# create and show barplot of categories\n# (fill this in)\nplt.show()"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e4bd8069bb924181a4812a2",
                    "programmingLanguage": "python",
                    "text": "Question 2: **What is the most fatty item for each category?**\n\nBackground information: When it comes to fat, trans fats are really the ones to avoid. Trans fat is a byproduct of a process called hydrogenation that is used to turn healthy oils into solids and to prevent them from becoming rancid. It increases the amount of harmful LDL cholesterol in the bloodstream. Cholesterol can be either good (HDL) or bad (LDL) but chances are slim that we are talking about the good one here. Saturated fat is not necessarily bad, but diet rich in saturated fat can drive up total cholesterol, with increased risk of clogged arteries. Unsaturated fat are not reported in this table.\n\nFirst, use a boxplot to show the spread of 'Total Fat (% Daily Value)' values per category. This should look something like:\n```file\n\tlabel: q2\n\tsize: small\n```\n\nThen create a subset data frame, called `grp_by_category`, that lists per category the maximal amount of 'Total Fat (% Daily Value)','Trans Fat','Saturated Fat (% Daily Value)' and 'Cholesterol (% Daily Value)'. \nThe result should look something like: \n```\n             Category  Max_Fat    ...   Max_Sat_Fat  Max_Cholestrol\n0         Beef & Pork       66    ...            96              53\n1           Beverages        4    ...             8               3\n2           Breakfast       93    ...           100             192\n3      Chicken & Fish      182    ...           101              89\n4        Coffee & Tea       48    ...           101              32\n5            Desserts       19    ...            35              10\n6              Salads       33    ...            29              29\n7  Smoothies & Shakes       50    ...           102              30\n8      Snacks & Sides       37    ...            27              16\n[9 rows x 5 columns]\n```\n\nMerge the data frames `menu` and `grp_by_category` and create a mask to select the items that correspond to the maximal 'Total Fat (% Daily Value)'. Be careful, you may end up with more than one fattest item per category. The result should look something like: \n```\n\t\t       Category     ...     Cholesterol (% Daily Value)\n32            Breakfast     ...                             192\n47          Beef & Pork     ...                              53\n82       Chicken & Fish     ...                              89\n85               Salads     ...                              23\n88               Salads     ...                              17\n98       Snacks & Sides     ...                               0\n103            Desserts     ...                               0\n130           Beverages     ...                               3\n231        Coffee & Tea     ...                              32\n253  Smoothies & Shakes     ...                              25\n258  Smoothies & Shakes     ...                              20\n[11 rows x 4 columns]\n```\n\nRepeating the same process, extract now the fattest item in 'Trans fat' (make sure to select only items with Trans fat > 0). Sort them by decreasing order of Trans fat. The result should look something like: \n```\n               Category        ...   Cholesterol (% Daily Value)\n47          Beef & Pork        ...                            53\n26            Breakfast        ...                            99\n228        Coffee & Tea        ...                            32\n231        Coffee & Tea        ...                            32\n247  Smoothies & Shakes        ...                            20\n256  Smoothies & Shakes        ...                            19\n[…]\n241  Smoothies & Shakes        ...                            20\n82       Chicken & Fish        ...                            89\n258  Smoothies & Shakes        ...                            20\n[19 rows x 6 columns]\n\n```\n",
                    "solution": "```python\n# create and show boxplot to show the spread of total fat per category\nmenu.boxplot(column=['Total Fat (% Daily Value)'], by=['Category'], rot=90)\nplt.show()\n\n# group by category\ngrp_by_category = menu[['Category', 'Total Fat (% Daily Value)','Trans Fat','Saturated Fat (% Daily Value)', 'Cholesterol (% Daily Value)' ]].groupby(['Category']).max() #extracting the wanted columns, grouping by categories and calculating the max\ngrp_by_category.reset_index(inplace=True) #resetting the index (otherwise category is the new index and it messes up with merge)\ngrp_by_category.columns=['Category', 'Max_Fat', 'Max_Trans_Fat', 'Max_Sat_Fat', 'Max_Cholestrol'] #renaming the columns\nprint(grp_by_category) #displaying the new dataframe\n\n# merge menu and data frame grouped by category\ndf = menu.merge(grp_by_category) #merging the two dataframes by the only common column (\"Category\")\nmask = df['Total Fat (% Daily Value)'] == df.Max_Fat #creating the mask that will be used for the selection\nfatty_menu = df.loc[mask, ['Category','Item','Total Fat (% Daily Value)','Cholesterol (% Daily Value)']] #selection the items that correspond to the max of total fat (%daily value) per category\nprint(fatty_menu) #displaying the dataframe\n\n# extract fattest item in 'Trans Fat'\ntrans_menu = df.loc[(df['Trans Fat'] == df.Max_Trans_Fat) & (df['Trans Fat']>0)][['Category','Item','Total Fat (% Daily Value)','Trans Fat','Saturated Fat (% Daily Value)','Cholesterol (% Daily Value)']] #creating a new filter\nprint(trans_menu.sort_values(by='Trans Fat',ascending=False)) #displaying the dataframe sorted by Trans Fat (decreasing order)",
                    "template": "# create and show boxplot to show the spread of total fat per category\n# ((fill this in)\nplt.show()\n\n# group by category\n# (fill this in)\nprint(grp_by_category) #displaying the new dataframe\n\n# merge menu and data frame grouped by category\n# (fill this in)\nprint(fatty_menu) #displaying the dataframe\n\n# extract fattest item in 'Trans Fat'\n# (fill this in)\nprint(trans_menu) #displaying the dataframe"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e4bd8bf9bb92448724812a3",
                    "programmingLanguage": "python",
                    "text": "Question 3: **Is there anything healthy on the menu?**\n\nSearch for items with 0 'Trans fat' and 'Cholesterol (% Daily Value)', and maximum 20 'Sugars' and 'Total Fat (% Daily Value)'. Sort the healthy items per calories in ascending order. Remove from this healthy data frame all the drinks (beverages, coffee & tea). The result should look something like: \n```\n           Category                Item  Calories\n103        Desserts     Baked Apple Pie       250\n96   Snacks & Sides  Small French Fries       230\n38        Breakfast          Hash Brown       150\n99   Snacks & Sides   Kids French Fries       110\n100  Snacks & Sides          Side Salad        20\n101  Snacks & Sides        Apple Slices        15\n```\n",
                    "solution": "```python\n# create data frame of healthy item s\nhealthy = df.loc[(df['Trans Fat']==0) & (df['Sugars']<20) & (df['Total Fat (% Daily Value)']<=20) & (df['Cholesterol (% Daily Value)']==0), ['Category','Item','Calories']].sort_values('Calories', ascending=False)\nprint(healthy[(healthy['Category']!=\"Beverages\") & (healthy['Category']!=\"Coffee & Tea\")])\n\n",
                    "template": "# create data frame of healthy items\n# (fill this in)\nprint(healthy) #displaying the dataframe\n"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e4bd9ca9bb92429854812a6",
                    "programmingLanguage": "python",
                    "text": "Question 4: **What are the 10 items that have the highest content of Vitamin C?**\n\nCitrus fruits are the high source of Vitamin C. For adults, the recommended dietary reference intake for vitamin C is 65 to 90 milligrams (mg) a day, and the upper limit is 2,000 mg a day. Using pandas' function pivot_table(), make a barplot that shows the 'Vitamin C (% Daily Value)' for the ten items that contain the highest amount of vitamin C. The result should look something like:\n```file\n\tlabel: q4\n\tsize: small\n```\n",
                    "solution": "```python\n# barplot of top 10 vitamin C\npd.pivot_table(menu, index=['Item'], values=['Vitamin C (% Daily Value)']).sort_values(['Vitamin C (% Daily Value)'], ascending=False)[:10].plot(kind=\"bar\")\nplt.show()",
                    "template": "# barplot of top 10 vitamin C\n# (fill this in)\nplt.show()"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e4bda0d9bb924d9874812a7",
                    "programmingLanguage": "python",
                    "text": "Question 5: **What is the best “muscle food” on the menu?**\n\nLet's assume we want to get a lot of proteins but as little sugar as possible. Identify the top three items based on their protein/sugars ratio. The result should look something like: \n```\n          Category      ...      Protein/Sugar\n82  Chicken & Fish      ...               87.0\n3        Breakfast      ...               10.5\n4        Breakfast      ...               10.5\n```",
                    "solution": "```python\n# top 3 muscle food\nmenu['Protein/Sugar'] = np.where(menu['Sugars'] < 1, menu['Sugars'], menu['Protein']/menu['Sugars'])\nprint(menu.sort_values('Protein/Sugar', ascending=False).head(3))",
                    "template": "# get top 3 muscle food\n# (fill me in)\nprint(top_3_muscle_food)"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e4bdb419bb92483c24812a8",
                    "programmingLanguage": "python",
                    "text": "Question 6: **How do the nutrition features compare to each other?**\n\nLet's finally take a look at how one feature feeds into the other. Using pandas.plotting.scatter_matrix(), we can plot multiple scatterplots and get a quick feel for the data. Plot a multiple scatterplot for all the following columns in your dataframe: 'Calories', 'Total Fat', 'Saturated Fat', 'Cholesterol', 'Sodium', 'Carbohydrates', 'Sugars', 'Protein'. The result should look something like: \n```file\n\tlabel: q6\n\tsize: small\n```\n\nWhat can you observe from the (anti)correlations of the nutritional metrics?",
                    "solution": "# nutrition feature comparison\nselection = menu.loc[:,['Calories', 'Total Fat', 'Saturated Fat', 'Cholesterol', 'Sodium', 'Carbohydrates', 'Sugars', 'Protein']]\npd.plotting.scatter_matrix(selection, diagonal='kde', figsize=(12,12), grid=True)\nplt.show()",
                    "template": "# create multiple scatter plot for nutrition feature comparison\n# (fill this in)\nplt.show()"
                  }
                ]
              },
              "publicKey": "9bkqju67pu7n3dw6or0v"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "604dfc95a2a93770e64a8bb0",
              "languages": [],
              "searchString": "Lecture Notes lecture notes lecturenotes",
              "moduleId": "604dfc95a2a937c87e4a8baf",
              "index": 0,
              "title": "Lecture Notes",
              "isOptional": false,
              "difficulty": 0,
              "files": [
                {
                  "_id": "604dfe12a2a937c5c14a8d08",
                  "label": "10CRISP-DMandDataScienceLibraries",
                  "mimetype": "application/pdf",
                  "extension": ".pdf",
                  "createdAt": "2021-03-14T12:14:10.499Z",
                  "updatedAt": "2021-03-14T12:14:10.499Z"
                }
              ],
              "createdAt": "2020-02-18T12:13:24.464Z",
              "updatedAt": "2021-05-03T10:32:00.022Z",
              "__v": 3,
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5e4bd4e89bb9242d6f481298",
                    "text": "```file\n\tlabel: Module9-LectureNotes\t\n"
                  }
                ]
              },
              "publicKey": "3u3qlb6omlhztgdskdl3"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "604e29b9a2a93700654aaca9",
              "searchString": "String Reformatting string reformatting stringreformatting",
              "moduleId": "604e29b9a2a93782874aaca4",
              "index": 4,
              "title": "String Reformatting",
              "isOptional": false,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-03-19T15:06:00.330Z",
              "updatedAt": "2021-05-03T10:32:00.031Z",
              "__v": 1,
              "hideSolutions": true,
              "publicKey": "cwin30sv22xd7nhdf13a"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "604e29b9a2a9376d624aaca7",
              "searchString": "Writing Regular Expressions writing regular expressions writingregularexpressions",
              "moduleId": "604e29b9a2a93782874aaca4",
              "index": 2,
              "title": "Writing Regular Expressions",
              "isOptional": false,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-03-19T15:00:36.358Z",
              "updatedAt": "2021-05-03T10:32:00.039Z",
              "__v": 1,
              "hideSolutions": true,
              "publicKey": "jmcx2dt20bfv6nj34n4s"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "604e29b9a2a93731cd4aacaa",
              "searchString": "RegEx Puzzles regex puzzles regexpuzzles",
              "moduleId": "604e29b9a2a93782874aaca4",
              "index": 5,
              "title": "RegEx Puzzles",
              "isOptional": true,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-03-19T15:39:21.746Z",
              "updatedAt": "2021-05-03T10:32:00.047Z",
              "__v": 1,
              "publicKey": "inrjcs6fxbaza346q5zi"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "604e29b9a2a93717904aaca5",
              "searchString": "Lecture Notes lecture notes lecturenotes",
              "moduleId": "604e29b9a2a93782874aaca4",
              "index": 0,
              "title": "Lecture Notes",
              "isOptional": false,
              "difficulty": 0,
              "files": [
                {
                  "_id": "604e2a08a2a9377d7d4aad1a",
                  "label": "11RegularExpressions",
                  "mimetype": "application/pdf",
                  "extension": ".pdf",
                  "createdAt": "2021-03-14T15:21:44.456Z",
                  "updatedAt": "2021-03-14T15:21:44.456Z"
                }
              ],
              "createdAt": "2020-03-19T12:54:49.964Z",
              "updatedAt": "2021-05-03T10:32:00.057Z",
              "__v": 3,
              "publicKey": "2rvb73yu6pvo21r21c6x"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "604e29b9a2a93747e84aaca8",
              "searchString": "Information from a Database Entry information from a database entry informationfromadatabaseentry",
              "moduleId": "604e29b9a2a93782874aaca4",
              "index": 3,
              "title": "Information from a Database Entry",
              "isOptional": false,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-03-19T15:02:31.154Z",
              "updatedAt": "2021-05-03T10:32:00.065Z",
              "__v": 1,
              "hideSolutions": true,
              "publicKey": "weygetgz2anedwfcicei"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "604e29b9a2a93725264aaca6",
              "searchString": "Understanding Regular Expressions understanding regular expressions understandingregularexpressions",
              "moduleId": "604e29b9a2a93782874aaca4",
              "index": 1,
              "title": "Understanding Regular Expressions",
              "isOptional": false,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-03-19T14:54:59.175Z",
              "updatedAt": "2021-05-03T10:32:00.075Z",
              "__v": 1,
              "hideSolutions": true,
              "publicKey": "1auuw6i4bxd6o3lu1zop"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "604f19fea2a93794814b1ea6",
              "searchString": "Python and Functional Programming python and functional programming pythonandfunctionalprogramming",
              "moduleId": "604f19fea2a937c1ef4b1ea1",
              "index": 5,
              "title": "Python and Functional Programming",
              "isOptional": true,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-03-19T10:08:23.209Z",
              "updatedAt": "2021-05-03T10:32:00.083Z",
              "__v": 1,
              "publicKey": "q0q7h3if5jarvy39luxp"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "604f19fea2a937d4814b1ea2",
              "searchString": "Lecture Notes lecture notes lecturenotes",
              "moduleId": "604f19fea2a937c1ef4b1ea1",
              "index": 0,
              "title": "Lecture Notes",
              "isOptional": false,
              "difficulty": 0,
              "files": [
                {
                  "_id": "60576a0aa2a937fef351e88a",
                  "label": "12OOProgramming",
                  "mimetype": "application/pdf",
                  "extension": ".pdf",
                  "createdAt": "2021-03-21T15:45:14.348Z",
                  "updatedAt": "2021-03-21T15:45:14.348Z"
                }
              ],
              "createdAt": "2020-03-19T09:40:17.253Z",
              "updatedAt": "2021-05-03T10:32:00.092Z",
              "__v": 7,
              "publicKey": "3a3ynesouor0v1msfrj0"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "604f19fea2a937534d4b1ea3",
              "searchString": "Additional Practice in Mastery Grids additional practice in mastery grids additionalpracticeinmasterygrids",
              "moduleId": "604f19fea2a937c1ef4b1ea1",
              "index": 1,
              "title": "Additional Practice in Mastery Grids",
              "isOptional": true,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-03-19T09:43:33.454Z",
              "updatedAt": "2021-05-03T10:32:00.101Z",
              "__v": 1,
              "publicKey": "lfvpai3mdgxuxq3ys0pf"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "604f19fea2a93753384b1ea4",
              "searchString": "People at the University people at the university peopleattheuniversity",
              "moduleId": "604f19fea2a937c1ef4b1ea1",
              "index": 3,
              "title": "People at the University",
              "isOptional": false,
              "difficulty": 0,
              "files": [
                {
                  "_id": "604f19fea2a9373e7b4b1ea9",
                  "label": "personsatuniversity",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 350,
                  "cropWidth": 390,
                  "createdAt": "2021-03-15T08:25:34.448Z",
                  "updatedAt": "2021-03-15T08:25:34.448Z"
                }
              ],
              "createdAt": "2020-03-19T09:46:57.528Z",
              "updatedAt": "2021-05-03T10:32:00.109Z",
              "__v": 1,
              "hideSolutions": true,
              "publicKey": "l7kmwfjelzng6noaxpyn"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "604f19fea2a937c4684b1ea5",
              "searchString": "Text Analysis with Higher-Order Functions text analysis with higher-order functions text analysis with higher order functions textanalysiswithhigherorderfunctions",
              "moduleId": "604f19fea2a937c1ef4b1ea1",
              "index": 4,
              "title": "Text Analysis with Higher-Order Functions",
              "isOptional": false,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-03-19T09:59:55.875Z",
              "updatedAt": "2021-05-03T10:32:00.119Z",
              "__v": 1,
              "hideSolutions": true,
              "publicKey": "3jri5s8mghzsnhv2ldzm"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "605751c6a2a937dbe951d057",
              "searchString": "Room Occupancy Revisited room occupancy revisited roomoccupancyrevisited",
              "moduleId": "604f19fea2a937c1ef4b1ea1",
              "index": 2,
              "title": "Room Occupancy Revisited",
              "files": [],
              "createdAt": "2021-03-21T14:01:42.276Z",
              "updatedAt": "2021-05-03T10:32:00.231Z",
              "__v": 1,
              "publicKey": "vwk78gqbkh1wsvuhv8dt"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "604f1a0ca2a9377bee4b1ec9",
              "searchString": "QR Code Generator with GUI qr code generator with gui qrcodegeneratorwithgui",
              "moduleId": "604f1a0ca2a9371af24b1ec7",
              "index": 2,
              "title": "QR Code Generator with GUI",
              "isOptional": false,
              "difficulty": 0,
              "files": [
                {
                  "_id": "604f1a0ca2a93717834b1ecb",
                  "label": "gui",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 330,
                  "cropWidth": 448,
                  "createdAt": "2021-03-15T08:25:48.514Z",
                  "updatedAt": "2021-03-15T08:25:48.514Z"
                }
              ],
              "createdAt": "2020-03-19T11:46:38.133Z",
              "updatedAt": "2021-05-03T10:32:00.127Z",
              "__v": 1,
              "hideSolutions": true,
              "publicKey": "b5zj10xportz7pgdq27x"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "604f1a0ca2a937478d4b1ec8",
              "searchString": "Lecture Notes lecture notes lecturenotes",
              "moduleId": "604f1a0ca2a9371af24b1ec7",
              "index": 0,
              "title": "Lecture Notes",
              "isOptional": false,
              "difficulty": 0,
              "files": [
                {
                  "_id": "60576b45a2a937dc3051e9c8",
                  "label": "13GUIsandExecutables",
                  "mimetype": "application/pdf",
                  "extension": ".pdf",
                  "createdAt": "2021-03-21T15:50:29.318Z",
                  "updatedAt": "2021-03-21T15:50:29.318Z"
                }
              ],
              "createdAt": "2020-03-19T11:45:10.943Z",
              "updatedAt": "2021-05-03T10:32:00.135Z",
              "__v": 3,
              "publicKey": "25dy88tp73rj71cnuvpe"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "60576a2ba2a937359f51e8a5",
              "searchString": "Number Guessing with GUI number guessing with gui numberguessingwithgui",
              "moduleId": "604f1a0ca2a9371af24b1ec7",
              "index": 1,
              "title": "Number Guessing with GUI",
              "files": [
                {
                  "_id": "60576a62a2a93723b551e8e0",
                  "label": "nggui1",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 68,
                  "cropWidth": 307,
                  "createdAt": "2021-03-21T15:46:43.497Z",
                  "updatedAt": "2021-03-21T15:46:43.497Z"
                },
                {
                  "_id": "60576a68a2a937281c51e8e9",
                  "label": "nggui2",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 68,
                  "cropWidth": 307,
                  "createdAt": "2021-03-21T15:46:48.408Z",
                  "updatedAt": "2021-03-21T15:46:48.408Z"
                },
                {
                  "_id": "60576a6da2a937e99651e8f4",
                  "label": "nggui3",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 68,
                  "cropWidth": 307,
                  "createdAt": "2021-03-21T15:46:54.171Z",
                  "updatedAt": "2021-03-21T15:46:54.171Z"
                }
              ],
              "createdAt": "2021-03-21T15:45:47.423Z",
              "updatedAt": "2021-05-03T10:32:00.239Z",
              "__v": 4,
              "publicKey": "cat47xknucnbsiq5tubq"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "6062192751d70b25e4371a34",
              "searchString": "Lecture Notes lecture notes lecturenotes",
              "moduleId": "6062190051d70bf648371a1a",
              "index": 0,
              "title": "Lecture Notes",
              "files": [
                {
                  "_id": "6062197d51d70bae19371a94",
                  "label": "14ConcurrentandParallelProgramming",
                  "mimetype": "application/pdf",
                  "extension": ".pdf",
                  "createdAt": "2021-03-29T18:16:30.064Z",
                  "updatedAt": "2021-03-29T18:16:30.064Z"
                }
              ],
              "createdAt": "2021-03-29T18:15:03.706Z",
              "updatedAt": "2021-05-03T10:32:04.102Z",
              "__v": 2,
              "publicKey": "fab8w06zuq2g6kq19o0k"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "606219e451d70b3995371ad4",
              "searchString": "Pasta with Tomato Sauce pasta with tomato sauce pastawithtomatosauce",
              "moduleId": "6062190051d70bf648371a1a",
              "index": 1,
              "title": "Pasta with Tomato Sauce",
              "files": [
                {
                  "_id": "60621a1151d70ba63b371b0e",
                  "label": "uml_example2",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 220,
                  "cropWidth": 1150,
                  "createdAt": "2021-03-29T18:18:57.604Z",
                  "updatedAt": "2021-03-29T18:18:57.604Z"
                }
              ],
              "createdAt": "2021-03-29T18:18:12.463Z",
              "updatedAt": "2021-05-03T10:32:04.110Z",
              "__v": 2,
              "publicKey": "sct0cbh08rj2ezb1gtld"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "60621b5251d70b7462371c01",
              "searchString": "Many Fibonacci Numbers many fibonacci numbers manyfibonaccinumbers",
              "moduleId": "6062190051d70bf648371a1a",
              "index": 2,
              "title": "Many Fibonacci Numbers",
              "files": [],
              "createdAt": "2021-03-29T18:24:18.615Z",
              "updatedAt": "2021-05-03T10:32:04.120Z",
              "__v": 1,
              "publicKey": "nad5rhvn8iwmcrwcwq9s"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "60621be751d70b126f371c86",
              "searchString": "Extra extra",
              "moduleId": "6062190051d70bf648371a1a",
              "index": 3,
              "title": "Extra",
              "files": [],
              "createdAt": "2021-03-29T18:26:47.660Z",
              "updatedAt": "2021-05-03T10:32:04.128Z",
              "__v": 1,
              "isOptional": true,
              "publicKey": "9xrp2hi9l639o8k0w6wj"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "606d826851d70b2d423d88b5",
              "searchString": "Last year's final exam last year's final exam last year s final exam lastyearsfinalexam last years final exam last year final exam",
              "moduleId": "606d825351d70b2c063d8895",
              "index": 0,
              "title": "Last year's final exam",
              "files": [
                {
                  "_id": "606d83af51d70b68233d8c39",
                  "label": "finalexam",
                  "mimetype": "application/pdf",
                  "extension": ".pdf",
                  "createdAt": "2021-04-07T10:04:31.728Z",
                  "updatedAt": "2021-04-07T10:04:31.728Z"
                },
                {
                  "_id": "606d83bc51d70b11043d8c53",
                  "label": "time_series_covid19_confirmed_global_20200324",
                  "mimetype": "text/csv",
                  "extension": ".csv",
                  "createdAt": "2021-04-07T10:04:44.891Z",
                  "updatedAt": "2021-04-07T10:04:44.891Z"
                },
                {
                  "_id": "606d83c751d70b55b53d8c6a",
                  "label": "OECD-ADIMA-Physical-Register",
                  "mimetype": "text/csv",
                  "extension": ".csv",
                  "createdAt": "2021-04-07T10:04:55.650Z",
                  "updatedAt": "2021-04-07T10:04:55.650Z"
                },
                {
                  "_id": "606d91df51d70b7dd63da982",
                  "label": "email",
                  "mimetype": "text/plain",
                  "extension": ".txt",
                  "createdAt": "2021-04-07T11:05:03.509Z",
                  "updatedAt": "2021-04-07T11:05:03.509Z"
                },
                {
                  "_id": "606f10ca51d70b5adc3ec8f0",
                  "label": "samplesolutionsbundle",
                  "mimetype": "application/zip",
                  "extension": ".zip",
                  "createdAt": "2021-04-08T14:18:50.903Z",
                  "updatedAt": "2021-04-08T14:18:50.903Z"
                }
              ],
              "createdAt": "2021-04-07T09:59:04.079Z",
              "updatedAt": "2021-05-03T10:32:09.899Z",
              "__v": 6,
              "isOptional": true,
              "publicKey": "2audojqz38tunbibwjlr"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "606dbb7a51d70b22f53dec71",
              "searchString": "Remote Exam Registration remote exam registration remoteexamregistration",
              "moduleId": "606d825351d70b2c063d8895",
              "index": 1,
              "title": "Remote Exam Registration",
              "isOptional": true,
              "files": [],
              "createdAt": "2021-04-07T14:02:34.491Z",
              "updatedAt": "2021-05-03T10:32:09.925Z",
              "__v": 1,
              "publicKey": "chrae4eul8d0vt9p5n1z"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "6073f2eedfa0377938bc9257",
              "searchString": "Final Exam Logistics final exam logistics finalexamlogistics",
              "moduleId": "606d825351d70b2c063d8895",
              "index": 2,
              "title": "Final Exam Logistics",
              "isOptional": true,
              "files": [
                {
                  "_id": "6073f301dfa0375b94bc9275",
                  "label": "finalexaminformation-update2021-04-12",
                  "mimetype": "application/pdf",
                  "extension": ".pdf",
                  "createdAt": "2021-04-12T07:13:05.409Z",
                  "updatedAt": "2021-04-12T07:13:05.409Z"
                },
                {
                  "_id": "60795f31dfa0379a3dc23c1c",
                  "label": "finalexaminformation-update2021-04-14",
                  "mimetype": "application/pdf",
                  "extension": ".pdf",
                  "createdAt": "2021-04-16T09:56:01.548Z",
                  "updatedAt": "2021-04-16T09:56:01.548Z"
                }
              ],
              "createdAt": "2021-04-12T07:12:46.446Z",
              "updatedAt": "2021-05-03T10:32:11.880Z",
              "__v": 5,
              "publicKey": "u6xv5n0jw2plqce5mltv"
            }
          ]
        }
      ],
      "analyticsBlocks": [
        "5fd86a3b307953324f7b1f7b",
        "5fd86a3b307953644c7b1f7e",
        "5fd86a3b30795373fb7b1f7f",
        "5fd86a3b307953e4217b1f7c",
        "5fd86a3b307953acbe7b1f80",
        "5fd86a3b3079537eb97b1f81",
        "5fd86a3b307953a02f7b1f7d",
        "5fd86a3b3079532fb07b1f83",
        "5fd86a3b30795361a57b1f82",
        "5fd86a3b307953d2df7b1f84",
        "5fd86a3b3079532e917b1f85"
      ],
      "archived": false,
      "demo": false,
      "visible": false,
      "_id": "5fd86a3b30795318047b1f7a",
      "organizationId": "5db2f52467230ad36e8c3cdc",
      "title": "CoTaPP 2021",
      "code": "BETA-B1PYT, INFOB2PWD, INFOMCTH",
      "createdAt": "2020-12-15T07:48:11.511Z",
      "updatedAt": "2021-03-29T18:38:42.783Z",
      "__v": 3,
      "selectedImage": "custom",
      "startDate": null,
      "endDate": null,
      "image": {
        "_id": "60112c4cf6ceaa2637a35bb8",
        "label": "python-4785225_1280.jpg",
        "extension": ".jpg",
        "mimetype": "image/jpeg",
        "cropX": 140,
        "cropY": 0,
        "cropHeight": 640,
        "cropWidth": 1139,
        "createdAt": "2021-01-27T09:03:09.184Z",
        "updatedAt": "2021-01-27T09:03:09.184Z"
      },
      "publicCode": "371I13"
    },
    {
      "modules": [
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe346823079531a717b55c1",
              "languages": [],
              "searchString": "Lecture Notes lecture notes lecturenotes",
              "moduleId": "5fe346823079534aae7b55ab",
              "index": 0,
              "title": "Lecture Notes",
              "isOptional": false,
              "difficulty": 0,
              "files": [
                {
                  "_id": "5fe34682307953e7817b5628",
                  "label": "Intro",
                  "mimetype": "application/pdf",
                  "extension": ".pdf",
                  "createdAt": "2020-06-12T09:43:12.701Z",
                  "updatedAt": "2020-06-12T09:43:12.701Z"
                },
                {
                  "_id": "5fe3468230795321457b5629",
                  "label": "Quarterfall",
                  "mimetype": "application/pdf",
                  "extension": ".pdf",
                  "createdAt": "2020-06-12T09:43:12.701Z",
                  "updatedAt": "2020-06-12T09:43:12.701Z"
                },
                {
                  "_id": "5fe34682307953a3b77b562a",
                  "label": "MentiResults",
                  "mimetype": "application/pdf",
                  "extension": ".pdf",
                  "createdAt": "2020-06-12T09:43:12.701Z",
                  "updatedAt": "2020-06-12T09:43:12.701Z"
                }
              ],
              "createdAt": "2020-02-05T15:42:48.349Z",
              "updatedAt": "2021-05-03T10:31:25.969Z",
              "__v": 1,
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5e3ae27ed1cad69fba53e59d",
                    "text": "To allow your recap the first lectures (there are no actual lecture notes for this one) here the slides and Mentimeter answers. \n\n```file\n    label: Intro\n```\n\n```file\n    label: MentiResults\n```\n\n```file\n    label: Quarterfall\n```\n\n"
                  }
                ]
              },
              "publicKey": "cd7pmcamlo2vllyoiszt"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe346823079537d667b55bf",
              "languages": [],
              "searchString": "Filter filter",
              "moduleId": "5fe346823079534aae7b55ab",
              "index": 5,
              "title": "Filter",
              "createdAt": "2019-12-11T10:23:46.254Z",
              "updatedAt": "2021-05-03T10:31:26.333Z",
              "__v": 1,
              "files": [
                {
                  "_id": "5fe346833079530a977b5658",
                  "label": "Filter_procedure",
                  "mimetype": "image/jpeg",
                  "extension": ".jpg",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 126,
                  "cropWidth": 194,
                  "createdAt": "2020-06-12T09:43:12.702Z",
                  "updatedAt": "2020-06-12T09:43:12.702Z"
                },
                {
                  "_id": "5fe346833079531e9f7b5659",
                  "label": "Filter_input",
                  "mimetype": "image/jpeg",
                  "extension": ".jpg",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 89,
                  "cropWidth": 95,
                  "createdAt": "2020-06-12T09:43:12.702Z",
                  "updatedAt": "2020-06-12T09:43:12.702Z"
                },
                {
                  "_id": "5fe34683307953e7c57b565a",
                  "label": "Filter_answer_a",
                  "mimetype": "image/jpeg",
                  "extension": ".jpg",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 89,
                  "cropWidth": 88,
                  "createdAt": "2020-06-12T09:43:12.702Z",
                  "updatedAt": "2020-06-12T09:43:12.702Z"
                },
                {
                  "_id": "5fe34683307953657b7b565b",
                  "label": "Filter_answer_b",
                  "mimetype": "image/jpeg",
                  "extension": ".jpg",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 91,
                  "cropWidth": 90,
                  "createdAt": "2020-06-12T09:43:12.702Z",
                  "updatedAt": "2020-06-12T09:43:12.702Z"
                },
                {
                  "_id": "5fe346833079534beb7b565c",
                  "label": "Filter_answer_c",
                  "mimetype": "image/jpeg",
                  "extension": ".jpg",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 86,
                  "cropWidth": 87,
                  "createdAt": "2020-06-12T09:43:12.702Z",
                  "updatedAt": "2020-06-12T09:43:12.702Z"
                },
                {
                  "_id": "5fe34683307953d8307b565d",
                  "label": "Filter_answer_d",
                  "mimetype": "image/jpeg",
                  "extension": ".jpg",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 86,
                  "cropWidth": 86,
                  "createdAt": "2020-06-12T09:43:12.702Z",
                  "updatedAt": "2020-06-12T09:43:12.702Z"
                }
              ],
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5df0c3bd4fd2a75737f67128",
                    "text": "A gray-scale bitmap can be saved as a table, with values of 1 to 5 for each pixel. The value 1 stands for *black*, the value 5 stands for *white*, and the values 2 to 4 stands for the lighter-getting shades of gray between them.\n\nA filtering algorithm computes a picture of same size for a given original according to the following procedure:\n\n```image\nlabel: Filter_procedure\n```\n\nFor each pixel in the original picture, it takes the value of the pixel and its eight neighboring pixels, sorts them from smallest to largest, and then takes the value in the middle, i.e. the 5th of 9 values, as the new value of the pixel in the filtered picture."
                  },
                  {
                    "contentType": "multipleChoiceQuestion",
                    "choices": [
                      {
                        "id": "gqgsslosvjcrhkot",
                        "text": "```image\nlabel: Filter_answer_a\nposition: left\n```",
                        "correct": true,
                        "label": "A"
                      },
                      {
                        "id": "hnhqznlendmefazu",
                        "text": "```image\nlabel: Filter_answer_b\nposition: left\n```",
                        "correct": false,
                        "label": "B"
                      },
                      {
                        "id": "xvxjpaelacvbhaqs",
                        "text": "```image\nlabel: Filter_answer_c\nposition: left\n```",
                        "correct": false,
                        "label": "C"
                      },
                      {
                        "id": "dbwfyfftkpijqejd",
                        "text": "```image\nlabel: Filter_answer_d\nposition: left\n```",
                        "correct": false,
                        "label": "D"
                      }
                    ],
                    "actions": [
                      {
                        "id": "zhctsloapdasjcps",
                        "type": "feedback",
                        "condition": "A",
                        "text": "That's correct."
                      },
                      {
                        "id": "eudnymkotnosbnko",
                        "type": "feedback",
                        "condition": "!A",
                        "text": "That's not correct. Try again."
                      }
                    ],
                    "_id": "5df0c3fd4fd2a70cd2f67129",
                    "text": "Suppose we apply the filtering algorithm to the following picture:\n\n```image\nlabel: Filter_input\n```\n\nWhich of the following options is the result?",
                    "solution": "The procedure turns each pixel into an median representation of its\nsurroundings, so the darker gray in next to white or lighter gray pixels become even lighter, while the white areas stay the same."
                  }
                ]
              },
              "publicKey": "kmnpc7o0u7q4xub851vm"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe3468230795364ac7b55bb",
              "languages": [],
              "searchString": "Download Times download times downloadtimes",
              "moduleId": "5fe346823079534aae7b55ab",
              "index": 1,
              "title": "Download Times",
              "createdAt": "2019-12-11T10:12:33.329Z",
              "updatedAt": "2021-05-03T10:31:26.416Z",
              "__v": 1,
              "files": [
                {
                  "_id": "5fe34683307953feb27b5670",
                  "label": "Downloads",
                  "mimetype": "image/jpeg",
                  "extension": ".jpg",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 201,
                  "cropWidth": 348,
                  "createdAt": "2020-06-12T09:43:12.700Z",
                  "updatedAt": "2020-06-12T09:43:12.700Z"
                }
              ],
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [
                      {
                        "id": "feputvzddfwoswbj",
                        "type": "feedback",
                        "condition": "answer == 3",
                        "text": "That's correct."
                      },
                      {
                        "id": "rkoubufihlzrfaed",
                        "type": "feedback",
                        "condition": "answer != 3",
                        "text": "That's not correct. Try again."
                      }
                    ],
                    "_id": "5df0c1184fd2a7738af6711e",
                    "text": "When downloading multiple files from the internet at the same time, the downloads share the capacity of the connection between them, each getting the same share. For example, when downloading 10 files at the same time, each of the downloads can use 1/10 of the capacity. Downloading a single file would be ten times as fast.\n\nNow consider the following situation: A user is downloading 4 files at the same time. For each file the remaining download time is displayed as follows:\n\n```image\nlabel: Downloads\nsize: small\n```\n\nThis time is calculated based on the capacity of the Internet connection (which stays the same all the time). How many minutes will it take until all 4 files have finished downloading?",
                    "solution": "The correct answer is *3 minutes*.\n\nAfter 1 minute, downloads 1 and 3 are finished, and the downloads 2 and 4 have 6 and 2 minutes remaining, respectively. Instead of sharing the available capacity among 4, they only share it among 2 now, so the download is twice as fast, so they have 3 and 1 minutes remaining. Thus, after 1 more minute, download 4 is finished and download 2 has 2 minutes left. It can now use the full capacity and is again twice as fast as before, so it finishes after just another minute.",
                    "editor": "number"
                  }
                ]
              },
              "publicKey": "shr3antqoawok6aqhjf2"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe3468230795370ec7b55c0",
              "languages": [],
              "searchString": "More Puzzles more puzzles morepuzzles",
              "moduleId": "5fe346823079534aae7b55ab",
              "index": 6,
              "title": "More Puzzles",
              "isOptional": true,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-02-03T17:50:41.416Z",
              "updatedAt": "2021-05-03T10:31:26.452Z",
              "__v": 1,
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5e385d75a14e59312f48f26e",
                    "text": "Solving puzzles like the ones in this module is a great way to train all sorts of computational thinking skills “unplugged”, i.e. without actually using a computer. If you would like to do more puzzles, right now or later, [cs4fn Computational Thinking Puzzles Issue 1] (https://cs4fndownloads.wordpress.com/computational-thinking-puzzles-issue-1/) is a great resource for you.\n\nThe exercises for this module have been adapted from selected [Bebras](https://www.bebras.org/) questions. "
                  }
                ]
              },
              "publicKey": "19vrs9rvktapn8bp4x6o"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe34682307953436e7b55be",
              "languages": [],
              "searchString": "Quarters quarters",
              "moduleId": "5fe346823079534aae7b55ab",
              "index": 4,
              "title": "Quarters",
              "createdAt": "2019-12-11T10:19:49.630Z",
              "updatedAt": "2021-05-03T10:31:26.462Z",
              "__v": 1,
              "files": [
                {
                  "_id": "5fe3468330795371d57b566a",
                  "label": "Bitmap",
                  "mimetype": "image/jpeg",
                  "extension": ".jpg",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 80,
                  "cropWidth": 169,
                  "createdAt": "2020-06-12T09:43:12.702Z",
                  "updatedAt": "2020-06-12T09:43:12.702Z"
                },
                {
                  "_id": "5fe34683307953d66e7b566b",
                  "label": "Bitmap_examples",
                  "mimetype": "image/jpeg",
                  "extension": ".jpg",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 94,
                  "cropWidth": 296,
                  "createdAt": "2020-06-12T09:43:12.702Z",
                  "updatedAt": "2020-06-12T09:43:12.702Z"
                },
                {
                  "_id": "5fe346833079533f167b566c",
                  "label": "Bitmap_question",
                  "mimetype": "image/jpeg",
                  "extension": ".jpg",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 133,
                  "cropWidth": 127,
                  "createdAt": "2020-06-12T09:43:12.702Z",
                  "updatedAt": "2020-06-12T09:43:12.702Z"
                }
              ],
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5df0c2d84fd2a74489f67124",
                    "text": "Black-and-white bitmaps can be represented with the binary characters 0 and 1, as illustrated here:\n\n```image\nlabel: Bitmap\n```\n\nA 0 stands for a white pixel, and a 1 for a black pixel. A picture with 4 x 4 pixels can thus be encoded with 16 characters, and a picture with 8 x 8 pixels with 64 characters.\n\nMany pictures can however also be represented with less characters. Therefore the characters are arranged in a square raster, and the following procedure is applied:\n- If all characters in the raster are 0, the result is the character 0.\n- If all characters in the raster are 1, the result is the character 1.\n- Otherwise the raster is split into 4 rasters of same size, and the procedure is applied to all of these rasters, starting with the upper left and proceeding in clock-wise direction. The result is then created as follows: The four results are written after one another, between the parentheses ( and ).\n\nHere are three examples of how the procedure works on a 4 x 4 raster:\n\n```image\nlabel: Bitmap_examples\n```"
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [
                      {
                        "id": "vxpvygeyvbkvtwiz",
                        "type": "feedback",
                        "condition": "answer==\"(111(1(1011)11))\"",
                        "text": "That's correct."
                      },
                      {
                        "id": "elrepekaerolarig",
                        "type": "feedback",
                        "condition": "answer!=\"(111(1(1011)11))\"",
                        "text": "That's not correct. Try again."
                      }
                    ],
                    "_id": "5df0c34a4fd2a70d61f67125",
                    "text": "What is the result for the 8 x 8 raster below?\n\n```image\nlabel: Bitmap_question\n```",
                    "solution": "`(111(1(1011)11))`"
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [
                      {
                        "id": "rkdctmvtuxixffkd",
                        "type": "feedback",
                        "condition": "answer==0",
                        "text": "That's correct."
                      },
                      {
                        "id": "wsauytadexsnwyte",
                        "type": "feedback",
                        "condition": "answer!=0",
                        "text": "That's not correct. Try again."
                      }
                    ],
                    "_id": "5df0c36c4fd2a767a8f67126",
                    "text": "How many characters would the procedure save when applied on the smiley bitmap above?",
                    "solution": "None. With the splits as defined in the procedure, there is never a square\nwith pixels of the same color, so it does not save anything.",
                    "editor": "number"
                  }
                ]
              },
              "publicKey": "wv7xvvcr5l0516e3b20t"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe346823079530bac7b55bc",
              "languages": [],
              "searchString": "Maximal gain maximal gain maximalgain",
              "moduleId": "5fe346823079534aae7b55ab",
              "index": 2,
              "title": "Maximal gain",
              "createdAt": "2019-12-11T10:15:06.990Z",
              "updatedAt": "2021-05-03T10:31:26.480Z",
              "__v": 1,
              "files": [
                {
                  "_id": "5fe346833079535eb97b5666",
                  "label": "Grid",
                  "mimetype": "image/jpeg",
                  "extension": ".jpg",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 219,
                  "cropWidth": 259,
                  "createdAt": "2020-06-12T09:43:12.701Z",
                  "updatedAt": "2020-06-12T09:43:12.701Z"
                }
              ],
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [
                      {
                        "id": "nvzmceypbtulabfl",
                        "type": "feedback",
                        "condition": "answer==14",
                        "text": "That's correct!"
                      },
                      {
                        "id": "nigpoavbzeeotage",
                        "type": "feedback",
                        "condition": "answer!=14",
                        "text": "That's not correct. Try again."
                      }
                    ],
                    "_id": "5df0c1ae4fd2a781d5f67120",
                    "text": "The grid below contains numbers and two fields `S` (for start) and `G` (for goal). The task: Find the path from `S` to `G` on which the sum of the numbers on the visited fields is the highest. But: you are only allowed to step upwards and to the right (not down or to the left). What is the maximal sum that can be gained this way?\n\n```image\nlabel: Grid\n```",
                    "solution": "The correct answer is *14*, for example through the following steps: up up right right right up right up.\n\nLater in the course we will look at how we can use a program to compute the best path through a grid like this.",
                    "editor": "number"
                  }
                ]
              },
              "publicKey": "xo3miy5ipsy7as1t9jag"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe34682307953e3c57b55bd",
              "languages": [],
              "searchString": "Number segments number segments numbersegments",
              "moduleId": "5fe346823079534aae7b55ab",
              "index": 3,
              "title": "Number segments",
              "createdAt": "2019-12-11T10:16:57.367Z",
              "updatedAt": "2021-05-03T10:31:26.500Z",
              "__v": 1,
              "files": [
                {
                  "_id": "5fe346833079535d4f7b5668",
                  "label": "Floors",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 95,
                  "cropWidth": 608,
                  "createdAt": "2020-06-12T09:43:12.702Z",
                  "updatedAt": "2020-06-12T09:43:12.702Z"
                }
              ],
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "multipleChoiceQuestion",
                    "choices": [
                      {
                        "id": "ytevdahslahgxymb",
                        "text": "the top element",
                        "correct": false,
                        "label": "A"
                      },
                      {
                        "id": "bqjthtfsfbuhuwxc",
                        "text": "the center element",
                        "correct": false,
                        "label": "B"
                      },
                      {
                        "id": "ojbjbwjbttcbfrde",
                        "text": "the bottom element",
                        "correct": true,
                        "label": "C"
                      },
                      {
                        "id": "okeifigxybeczivr",
                        "text": "the element on the upper left",
                        "correct": false,
                        "label": "D"
                      },
                      {
                        "id": "gqyqxmuemyseydzj",
                        "text": "the element on the lower left",
                        "correct": false,
                        "label": "E"
                      },
                      {
                        "id": "bxtuwkrzrafpogbq",
                        "text": "the element on the upper right",
                        "correct": false,
                        "label": "F"
                      },
                      {
                        "id": "xkowwjuholxrhhrp",
                        "text": "the element on the lower right",
                        "correct": true,
                        "label": "G"
                      }
                    ],
                    "actions": [
                      {
                        "id": "ehwvcaluyjjgbvdv",
                        "type": "feedback",
                        "condition": "(C || G) && !A && !B && !D && !E && !F",
                        "text": "That's correct!"
                      },
                      {
                        "id": "xzzodwhanhotmpty",
                        "type": "feedback",
                        "condition": "!((C || G) && !A && !B && !D && !E && !F)",
                        "text": "That's not correct! Try again."
                      }
                    ],
                    "_id": "5e386066a14e59b14c48f26f",
                    "multipleCorrect": true,
                    "text": "In a house with 10 floors the lift shows the current floor with a 7-segment digital number display. The numbers 0 (for ground floor) to 9 look like this:\n\n```image\nlabel: Floors\nsize: medium\n```\n\nThus, to display a number, at least 2 and at most 7 of the segments are switched on.\n\nRecently one of the segments was broken and did not switch on at all. Nevertheless it was possible to recognize all numbers and tell them apart. Which segment could have been the broken one?",
                    "solution": "There are two possible answers: the bottom element or the one on the lower right."
                  }
                ]
              },
              "publicKey": "ry6blix3q4sgud848xvd"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe346823079538b6d7b55c7",
              "languages": [],
              "searchString": "Arithmetic Operations arithmetic operations arithmeticoperations",
              "moduleId": "5fe3468230795341207b55ad",
              "index": 5,
              "title": "Arithmetic Operations",
              "createdAt": "2019-12-11T10:44:40.374Z",
              "updatedAt": "2021-05-03T10:31:25.833Z",
              "__v": 1,
              "files": [],
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5df0c8a34fd2a79d24f67134",
                    "programmingLanguage": "python",
                    "text": "Write a program that asks the user to enter two integer numbers and then executes all the seven arithmetic operations with it for which Python has standard operators.\n\nThe output of the program should be something like:\n```\nPlease enter an integer number: 7\nPlease enter another integer number: 4\n7 ** 4 is 2401\n7 * 4 is 28\n7 / 4 is 1.75\n7 // 4 is 1\n7 % 4 is 3\n7 + 4 is 11\n7 - 4 is 3\n```\n\nYou can assume that the user enters two positive integer numbers (>0). Nevertheless, try what happens when you enter a negative number or 0.",
                    "solution": "```python\n# ask for two integer numbers\na = int(input(\"Please enter an integer number: \"))\nb = int(input(\"Please enter another integer number: \"))\n\n# the arithmetic operations with a and b\nprint(f\"{a} ** {b} is {a**b}\")\nprint(f\"{a} * {b} is {a*b}\")\nprint(f\"{a} / {b} is {a/b}\")\nprint(f\"{a} // {b} is {a//b}\")\nprint(f\"{a} % {b} is {a%b}\")\nprint(f\"{a} + {b} is {a+b}\")\nprint(f\"{a} - {b} is {a-b}\")\n```"
                  }
                ]
              },
              "publicKey": "gqdj5y7jrri3oun0fhgg"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe34682307953520b7b55c5",
              "languages": [],
              "searchString": "Printing source code printing source code printingsourcecode",
              "moduleId": "5fe3468230795341207b55ad",
              "index": 3,
              "title": "Printing source code",
              "createdAt": "2019-12-11T10:38:30.865Z",
              "updatedAt": "2021-05-03T10:31:26.236Z",
              "__v": 1,
              "files": [],
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5df0c7374fd2a753e1f67130",
                    "programmingLanguage": "python",
                    "text": "Write a program that prints the source code from the previous exercise to the screen.\nThe output should look as follows:\n```\na = 2.3\nb = 42\n\nprint(f\"{a} + {b} is {a+b}\")\n\nprint(f\"{a} + {b} is {str(a+b)}\")\nprint(f\"{a} + {b} is {str(a)+str(b)}\")\n\nprint(f\"{a} + {b} is {int(a+b)}\")\nprint(f\"{a} + {b} is {int(a)+int(b)}\")\n\nprint(f\"{a} + {b} is {float(a+b)}\")\nprint(f\"{a} + {b} is {float(a)+float(b)}\")\n```\n**Important**: If you get any error messages when you try to execute your programs, don't panic. Read the message and try to understand where and what the problem is. You can also use Google to find out more, common errors are usually discussed in different development forums. If that does not get you any further, ask a teaching assistant in the lab or post your question to the course forum on Blackboard.",
                    "solution": "One possible way to print the piece of source code is to use the triple quotation marks around it:\n```python\nprint(\"\"\"a = 2.3\nb = 42\nprint(f\"{a} + {b} is {a+b}\")\nprint(f\"{a} + {b} is {str(a+b)}\")\nprint(f\"{a} + {b} is {str(a)+str(b)}\")\nprint(f\"{a} + {b} is {int(a+b)}\")\nprint(f\"{a} + {b} is {int(a)+int(b)}\")\nprint(f\"{a} + {b} is {float(a+b)}\")\nprint(f\"{a} + {b} is {float(a)+float(b)}\")\"\n\"\"\")\n```"
                  }
                ]
              },
              "publicKey": "246kz3b7pfmwrs4ko00d"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe3468230795340ef7b55c4",
              "languages": [],
              "searchString": "Understanding Python code understanding python code understandingpythoncode",
              "moduleId": "5fe3468230795341207b55ad",
              "index": 2,
              "title": "Understanding Python code",
              "createdAt": "2019-12-11T10:27:46.456Z",
              "updatedAt": "2021-05-03T10:31:26.341Z",
              "__v": 1,
              "files": [],
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5df0c4ad4fd2a746c6f6712b",
                    "text": "Consider the following piece of code, which is very similar to, but not exactly the same as the interactive input example from the lecture:\n```python\nuser_name = input(\"What is your name? \")\nprint(f\"Hello {user_name}!\")\nuser_age = input(\"What is your age (in years)? \")\nprint(f\"Then you are at least {user_age*12} months old.\")\n```\n\nWhat is its output? What is the difference in the code, and can you explain why the output is different?\n\n**Important:** Do not immediately paste the code into the editor and run it to see what it does. First try to read the code and figure it out from that, then check by executing it. Same for any other piece of Python code that you come across. That will greatly improve your understanding of Python programs. And by the way, such questions are also very popular in exams! :wink:",
                    "solution": "For output just execute. The difference to the example from the lecture is\nthat the `user_age` is not cast to integer. This causes the expression `{user_age*12}` to evaluate to a string like `363636363636363636363636` instead of computing the number of months."
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5df0c54c4fd2a76c36f6712d",
                    "text": "Here is another piece of code:\n```python\na = 2.3\nb = 42\n\nprint(f\"{a} + {b} is {a+b}\")\n\nprint(f\"{a} + {b} is {str(a+b)}\")\nprint(f\"{a} + {b} is {str(a)+str(b)}\")\n\nprint(f\"{a} + {b} is {int(a+b)}\")\nprint(f\"{a} + {b} is {int(a)+int(b)}\")\n\nprint(f\"{a} + {b} is {float(a+b)}\")\nprint(f\"{a} + {b} is {float(a)+float(b)}\")\n```\nWhat is the output? Explain what causes the differences between the lines.",
                    "solution": "For output just execute.\n\nThe differences between the lines are caused the\ndifferent type casts that are applied and also the points where they are applied. In the version without type casts, Python is doing the casts automatically based on what it infers to be best, which in this case corresponds to the intuitive result.\n\nIn the second print line, the result of the computation is cast to string, which does not change the look of the output.\n\nIn the third print line, the numbers are cast to strings before the operation is applied, so the corresponding string operation is executed and the result looks different.\n\nIn the fourth print line, the result is cast to integer, so it loses its decimal places before being displayed. In the fifth print line, the two\nnumbers are cast to integer before the operation. The result is again an integer number and looks as in the line before.\n\nIn the sixth print line, the result is explicitly cast to float, and displayed as such.\n\nIn the last line, the operands are both cast to float before applying the operation, resulting in the same output as before."
                  }
                ]
              },
              "publicKey": "mweaxyex8529opzkqrb6"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe346823079537d747b55c9",
              "languages": [],
              "searchString": "BMI calculation bmi calculation bmicalculation",
              "moduleId": "5fe3468230795341207b55ad",
              "index": 7,
              "title": "BMI calculation",
              "createdAt": "2019-12-11T10:49:33.640Z",
              "updatedAt": "2021-05-03T10:31:26.350Z",
              "__v": 1,
              "files": [],
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5df0c9c74fd2a769f7f67138",
                    "programmingLanguage": "python",
                    "text": "Write a Python program that welcomes the user, asks for his name (string), weight in kg (integer) and height in m (float), computes the body mass index (BMI) from the information ($weight/height^2$) and finally displays a message to the user, saying something like \"Hello Jim, your BMI is 23.4.\". You can assume that the user enters correct values.",
                    "solution": "```python\n# welcome message\nprint(\"Welcome to the BMI calculator.\")\n\n# ask name\nuser_name = input(\"What is your name? \")\n\n# ask weight\nuser_weight = int(input(\"What is your weight (in kg)? \"))\n\n# ask height\nuser_height = float(input(\"What is your height (in m)? \"))\n\n# calculate BMI\nbmi = user_weight / user_height**2\n\n# display result\nprint(f\"Hello {user_name}, your BMI is {bmi:.1f}.\")"
                  }
                ]
              },
              "publicKey": "nvli0mupe1lms58uwo0w"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe3468230795318f97b55ca",
              "languages": [],
              "searchString": "Lecture Notes lecture notes lecturenotes",
              "moduleId": "5fe3468230795341207b55ad",
              "index": 0,
              "title": "Lecture Notes",
              "files": [
                {
                  "_id": "5fe34683307953faef7b5664",
                  "label": "Module3-LectureNotes",
                  "mimetype": "application/pdf",
                  "extension": ".pdf",
                  "createdAt": "2020-12-23T13:30:43.985Z",
                  "updatedAt": "2020-12-23T13:30:43.985Z"
                }
              ],
              "createdAt": "2020-01-22T17:03:37.852Z",
              "updatedAt": "2021-05-03T10:31:26.359Z",
              "__v": 1,
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5e3d4414c866058e06b1c697",
                    "text": "```file\n\tlabel: Module3-LectureNotes\t\n```"
                  }
                ]
              },
              "publicKey": "74p4ceydilgspi22in44"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe346823079534ffe7b55c8",
              "languages": [],
              "searchString": "Celsius to Fahrenheit converter celsius to fahrenheit converter celsiustofahrenheitconverter",
              "moduleId": "5fe3468230795341207b55ad",
              "index": 6,
              "title": "Celsius to Fahrenheit converter",
              "createdAt": "2019-12-11T10:46:48.296Z",
              "updatedAt": "2021-05-03T10:31:26.368Z",
              "__v": 1,
              "files": [],
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5df0c92c4fd2a7e7abf67136",
                    "programmingLanguage": "python",
                    "text": "Write a Python program that asks the user to enter a temperature (as float) in degrees Celsius and computes what the temperature is in degrees Fahrenheit. The formula to compute Fahrenheit from Celsius is:\n\n$$\n32 + \\frac{degreesCelsius * 9}{5}\n$$\n\nThe output of the program should be something like:\n```\nPlease enter the temperature in degrees Celsius: 12.5\n12.5 degrees Celsius is 54.5 degrees Fahrenheit.\n```",
                    "solution": "```python\n# read floating point value for temperature Celsius from user\ntemp_c = float(input(\"Please enter the temperature in degrees Celsius: \"))\n\n# compute temperature in degrees Fahrenheit\ntemp_f = 32 + temp_c * (9/5)\n\n# print result\nprint(f\"{temp_c} degrees Celsius is {temp_f} degrees Fahrenheit.\")\n```"
                  }
                ]
              },
              "publicKey": "vc1azc9pwj4uxfta747a"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe3468230795342227b55c6",
              "languages": [],
              "searchString": "List your lectures list your lectures listyourlectures",
              "moduleId": "5fe3468230795341207b55ad",
              "index": 4,
              "title": "List your lectures",
              "createdAt": "2019-12-11T10:42:00.154Z",
              "updatedAt": "2021-05-03T10:31:26.380Z",
              "__v": 1,
              "files": [],
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5df0c8014fd2a78125f67132",
                    "programmingLanguage": "python",
                    "text": "Write a program that prints out for all of the weekdays the lectures that you have there. The output of the program should be something like:\n```\nMonday:    Evolutionary Computing\nTuesday:   (nothing)\nWednesday: Evolutionary Computing, Programming with Python\nThursday:  (nothing)\nFriday:    Programming with Python\n```\nMake sure that the list of lectures begins at the same position in every line.",
                    "solution": "Here is a possible solution (note the use of tabs to ensure that the lecture list starts at the same position on each line):\n```python\nprint(\"Monday:\\t\\tEvolutionary Computing\")\nprint(\"Tuesday:\\t(nothing)\")\nprint(\"Wednesday:\\tEvolutionary Computing, Programming with Python\")\nprint(\"Thursday:\\t(nothing)\")\nprint(\"Friday:\\t\\tProgramming with Python\")\n```"
                  }
                ]
              },
              "publicKey": "9ow4q6dq1xh0o4kfortf"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe3468230795323c87b55cb",
              "languages": [],
              "searchString": "Anaconda Setup anaconda setup anacondasetup",
              "moduleId": "5fe3468230795341207b55ad",
              "index": 1,
              "title": "Anaconda Setup",
              "isOptional": true,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-02-07T11:00:15.325Z",
              "updatedAt": "2021-05-03T10:31:26.527Z",
              "__v": 1,
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5e3d4343c866058b91b1c68f",
                    "text": "We will use the Anaconda Data Science platform in the course. Anaconda is a free and open source distribution of Python and some other programming languages used in scientific applications. It runs on all major operating systems and provides a number of very useful tools for Python programming.\nHere is what you have to do to get started:\n\n1. Go to https://docs.anaconda.com/anaconda/install/ and follow the installation instructions for your operating system.\n2. Go to https://docs.anaconda.com/anaconda/user-guide/getting-started/#open-nav-lin and follow the instructions how to start Spyder.\n3. Start coding!\n\nIf you have (unresolvable) trouble with the installation of Anaconda on your device, you can use it also via [UU’s MyWorkplace] \n(https://myworkplace.uu.nl/). The app that you need to start is called “Spyder Anaconda3”."
                  }
                ]
              },
              "publicKey": "rj3zn58dbqmuvoccycto"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe3468230795369f17b55cc",
              "languages": [],
              "searchString": "Lecture Notes lecture notes lecturenotes",
              "moduleId": "5fe346823079534da77b55ae",
              "index": 0,
              "title": "Lecture Notes",
              "files": [
                {
                  "_id": "5fe3468230795300107b5610",
                  "label": "Module4-LectureNotes",
                  "mimetype": "application/pdf",
                  "extension": ".pdf",
                  "createdAt": "2020-12-23T13:30:43.858Z",
                  "updatedAt": "2020-12-23T13:30:43.858Z"
                }
              ],
              "createdAt": "2020-01-22T17:08:56.620Z",
              "updatedAt": "2021-05-03T10:31:25.815Z",
              "__v": 1,
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5e3d456fc8660583c1b1c6a4",
                    "text": "```file\n\tlabel: Module4-LectureNotes\t\n```"
                  }
                ]
              },
              "publicKey": "m5ensyc5t8o5e03pl6g4"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe3468230795397a17b55d2",
              "languages": [],
              "searchString": "Grade Calculation grade calculation gradecalculation",
              "moduleId": "5fe346823079534da77b55ae",
              "index": 6,
              "title": "Grade Calculation",
              "files": [],
              "createdAt": "2020-02-02T18:52:14.649Z",
              "updatedAt": "2021-05-03T10:31:25.841Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e371a6154878c080bccb011",
                    "programmingLanguage": "python",
                    "text": "Write a program that calculates the grade for this course. It should first ask if a student took part in all three examination parts (midterm, project and final exam). If not, it should send the student to the lecturer to discuss the situation. Otherwise, it reads in the three grades. It checks if they are all >= 4. If not, the course is failed. If they are, it checks\nif the weighted average (midterm and final exam each account for 30% of the final grade, and the project for 40%) is >= 6. If not, send the student to the retake exam. If it is, print out the final grade to the screen. \n\nThe output should be something like:\n\n```\nHave you taken part in all examination parts (midterm, final exam,\nproject? (yes/no) no\nPlease go to the lecturer to discuss your situation.\n\nHave you taken part in all examination parts (midterm, final exam,\nproject? (yes/no) yes\nPlease enter your midterm grade: 6.5\nPlease enter your final exam grade: 7.5\nPlease enter your project grade: 8\nCongratulations, you passed the course with grade 7.4.\n\nHave you taken part in all examination parts (midterm, final exam,\nproject? (yes/no) yes\nPlease enter your midterm grade: 5\nPlease enter your final exam grade: 6\nPlease enter your project grade: 6\nYou have to take part in the retake exam.\n```",
                    "solution": "```python\nprint(\"Hello student, welcome to grade calculation!\")\nexamination_complete = input(\"Have you taken part in all examination \\\n                             parts (midterm, final exam, project? (yes/no) \")\nif examination_complete == \"no\":\n    print(\"Please go to the lecturer to discuss your situation.\")\nelif examination_complete == \"yes\":\n    grade_midterm = float(input(\"Please enter your midterm grade: \"))\n    grade_exam = float(input(\"Please enter your final exam grade: \"))\n    grade_project = float(input(\"Please enter your project grade: \"))\n    if grade_midterm >= 4 and grade_exam >= 4 and grade_project >=4:\n        weighted_average = 0.3*grade_midterm + 0.3*grade_exam + 0.4*grade_project\n        if weighted_average >= 6:\n            print(f\"Congratulations, you passed the course with grade {weighted_average:.1f}.\")\n        else:\n            print(\"You have to take part in the retake exam.\")\n    else:\n        print(\"Sorry, you failed the course.\")\nelse:\n    print(\"Sorry, I did not understand.\")"
                  }
                ]
              },
              "publicKey": "k91xos0y3zrn4ogz86rs"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe3468230795381867b55ce",
              "languages": [],
              "searchString": "Divisibility divisibility",
              "moduleId": "5fe346823079534da77b55ae",
              "index": 2,
              "title": "Divisibility",
              "files": [],
              "createdAt": "2020-02-02T18:46:16.273Z",
              "updatedAt": "2021-05-03T10:31:25.861Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e3718fb54878c2f4eccb009",
                    "programmingLanguage": "python",
                    "text": "Write a program that asks the user to enter two integer numbers, then checks if the first number is divisible by the second number and informs the user accordingly. The output should be something like:\n\n```\nPlease enter an integer number: 15\nPlease enter another integer number: 5\n15 is divisible by 5.\n\nPlease enter an integer number: 12\nPlease enter another integer number: 5\n12 is not divisible by 5.\n```",
                    "solution": "```python\n# ask the user to enter two integer numbers\nnumber1 = int(input(\"Please enter an integer number: \"))\nnumber2 = int(input(\"Please enter another integer number: \"))\n\n# check if number1 is divisible by number2, display message accordingly\nif number1%number2 == 0:\n    print(f\"{number1} is divisible by {number2}.\")\nelse:\n    print(f\"{number1} is not divisible by {number2}.\")"
                  }
                ]
              },
              "publicKey": "nzawdyi86mrpsiu1ci67"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe346823079533e207b55d3",
              "languages": [],
              "searchString": "More Binary more binary morebinary",
              "moduleId": "5fe346823079534da77b55ae",
              "index": 7,
              "title": "More Binary",
              "isOptional": true,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-02-13T18:45:44.351Z",
              "updatedAt": "2021-05-03T10:31:25.888Z",
              "__v": 1,
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5e45995bd9276b98884c265e",
                    "text": "In the lecture we talked about binary numbers. Maybe you now find “binary jokes” funny, like those collected in http://amagicclassroom.com/uploads/3/4/5/2/34528828/math_binary_jokes.pdf. If you like that, ask Google for more binary or boolean or programmer jokes, there are plenty..."
                  },
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5e459989d9276b27004c265f",
                    "text": "If you want to test your understanding of binary numbers, try the decimal-to-binary quiz at http://www.free-test-online.com/binary/decimal2binary.htm or the binary-to-decimal quiz at http://www.free-test-online.com/binary/binary2decimal.htm."
                  }
                ]
              },
              "publicKey": "kffd1iewo8lsfwbc0rd7"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe34682307953d62d7b55d1",
              "languages": [],
              "searchString": "Diagnostics diagnostics",
              "moduleId": "5fe346823079534da77b55ae",
              "index": 5,
              "title": "Diagnostics",
              "files": [],
              "createdAt": "2020-02-02T18:50:22.482Z",
              "updatedAt": "2021-05-03T10:31:25.916Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e3719f254878c0b7cccb00f",
                    "programmingLanguage": "python",
                    "text": "Influenza-like illness is characterized by the patients having fever, cough, and one or more of the following symptoms: sore throat, joint and muscle pain, complete exhaustion. Write a Python program that asks a patient about the symptoms (if the patient has them or not), and from that determines if influenza-like illness is likely or not. Use only one Boolean expression for that. The output should be something like:\n\n```\nDo you have fever? (y/n) y\nDo you have a cough? (y/n) y\nDo you have a sore throat? (y/n) n\nDo you have joint and muscle pain? (y/n) n\nDo you experience complete exhaustion? (y/n) y\nI think you have influenza-like illness. Please consult your GP.\n\nDo you have fever? (y/n) y\nDo you have a cough? (y/n) n\nDo you have a sore throat? (y/n) y\nDo you have joint and muscle pain? (y/n) y\nDo you experience complete exhaustion? (y/n) n\nI don't know what you have, but it does not seem to be influenza-\nlike illness. Please consult your GP.\n```",
                    "solution": "```python\n# ask the user for their symptoms\nfever = input(\"Do you have fever? (y/n) \")\ncough = input(\"Do you have a cough? (y/n) \")\nsore_throat = input(\"Do you have a sore throat? (y/n) \")\njoint_and_muscle_pain = input(\"Do you have joint an muscle pain? (y/n) \")\ncomplete_exhaustion = input(\"Do you experience complete exhaustion? (y/n) \")\n\n# check if influenza-like illness can be diagnosed or not\nif fever==\"y\" and cough==\"y\" and (sore_throat==\"y\" or \\\n                                  joint_and_muscle_pain==\"y\" or \\\n                                  complete_exhaustion==\"y\"):\n    print(\"I think you have an influenca-like illness. Please consult your GP.\")\nelse:\n    print(\"I don't know what you have, but it does not seem to be influenca- \\\n          like illness. Please consult your GP.\")"
                  }
                ]
              },
              "publicKey": "itzhfwr3r6kvfaqaikf9"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe34682307953aa1c7b55cf",
              "languages": [],
              "searchString": "BMI Calculation Revisited bmi calculation revisited bmicalculationrevisited",
              "moduleId": "5fe346823079534da77b55ae",
              "index": 3,
              "title": "BMI Calculation Revisited",
              "files": [],
              "createdAt": "2020-02-02T18:47:36.592Z",
              "updatedAt": "2021-05-03T10:31:25.933Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e37194b54878cbb48ccb00b",
                    "programmingLanguage": "python",
                    "text": "Extend the BMI calculation program from the last homework so that after informing the user about the calculated BMI, it also prints out if the BMI is within the range that is generally considered normal (between 18.5 and 25) or higher (above 25) or lower (below 18.5) than that. The output of the modified program should then be something like:\n\n```\nWelcome to the BMI calculator.\nWhat is your name? John Doe\nWhat is your weight (in kg)? 78\nWhat is your height (in m)? 1.82\nHello John Doe, your BMI is 23.5.\nYour BMI is normal.\n```",
                    "solution": "```python\n# welcome message\nprint(\"Welcome to the BMI calculator.\")\n\n# ask name\nuser_name = input(\"What is your name? \")\n\n# ask weight\nuser_weight = int(input(\"What is your weight (in kg)? \"))\n\n# ask height\nuser_height = float(input(\"What is your height (in m)? \"))\n\n# calculate BMI\nbmi = user_weight / user_height**2\n\n# display result\nprint(f\"Hello {user_name}, your BMI is {bmi:.1f}.\")\n\n# inform the user if this BMI is in normal range\nif bmi < 18.5:\n    print(\"Your BMI is low\")\nelif 18.5 <= bmi < 25:\n    print(\"Your BMI is normal.\")\nelse:\n    print(\"Your BMI is high.\")"
                  }
                ]
              },
              "publicKey": "mcljoiymqstph9fe965x"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe3468230795350317b55d0",
              "languages": [],
              "searchString": "Morning Coffee morning coffee morningcoffee",
              "moduleId": "5fe346823079534da77b55ae",
              "index": 4,
              "title": "Morning Coffee",
              "files": [],
              "createdAt": "2020-02-02T18:49:14.498Z",
              "updatedAt": "2021-05-03T10:31:26.397Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e3719ad54878c4382ccb00d",
                    "programmingLanguage": "python",
                    "text": "Write a program that pretends to be your waiter, bringing your morning coffee with optional milk/sugar, like in the Activity Diagram that we discussed in the lecture in the first week. The program should ask the user regarding milk and sugar, and the output should be something like:\n\n```\nGood morning! I made coffee for you.\nDo you want to add milk? (y/n) y\nI added milk.\nDo you want to add sugar? (y/n) n\nOk, no sugar.\nEnjoy!\n```",
                    "solution": "```python\n# greet the user and announce coffee\nprint(\"Good morning! I made coffee for you.\")\n\n# ask if milk should be added and act accordingly\nadd_milk = input(\"Do you want to add milk? (y/n) \")\nif add_milk == \"y\":\n    print(\"I added milk.\")\nelif add_milk == \"n\":\n    print(\"Ok, no milk.\")\nelse:\n    print(\"I did not understand, so I don't add milk.\")\n\n# ask if sugar should be added and act accordingly\nadd_sugar = input(\"Do you want to add sugar? (y/n) \")\nif add_sugar == \"y\":\n    print(\"I added sugar.\")\nelif add_sugar == \"n\":\n    print(\"Ok, no sugar.\")\nelse:\n    print(\"I did not understand, so I don't add sugar.\")\n\n# friendly closure\nprint(\"Enjoy!\")"
                  }
                ]
              },
              "publicKey": "4qppqyebankx7cqesjwz"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe346823079539f997b55cd",
              "languages": [],
              "searchString": "Age Check age check agecheck",
              "moduleId": "5fe346823079534da77b55ae",
              "index": 1,
              "title": "Age Check",
              "files": [],
              "createdAt": "2020-02-02T18:42:33.927Z",
              "updatedAt": "2021-05-03T10:31:26.472Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e37182854878c26deccb006",
                    "programmingLanguage": "python",
                    "text": "Write a program that asks the user to enter their age. If it is under 18, the program should display a message to refuse entry, otherwise invite the user to come in. The output should be something like:\n```\nHow old are you (in years)? 15\nSorry, you are not allowed to enter.\n\nHow old are you (in years)? 29\nWelcome! Please come in.\n```",
                    "solution": "```python\n# ask user to enter their age\nage = int(input(\"How old are you (in years)? \"))\n\n# check if age is below 18, reject or welcome guest accordingly\nif age < 18:\n    print(\"Sorry, you are not allowed to enter.\")\nelse:\n    print(\"Welcome! Please come in.\")"
                  }
                ]
              },
              "publicKey": "s3d8b22wfe9ely62nqj9"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe3468230795328e47b55df",
              "searchString": "Lecture Notes lecture notes lecturenotes",
              "moduleId": "5fe3468230795320ce7b55b1",
              "index": 0,
              "title": "Lecture Notes",
              "isOptional": false,
              "difficulty": 0,
              "files": [
                {
                  "_id": "5fe346823079534b2a7b5620",
                  "label": "GitTutorial",
                  "mimetype": "application/pdf",
                  "extension": ".pdf",
                  "createdAt": "2020-12-23T13:30:43.893Z",
                  "updatedAt": "2020-12-23T13:30:43.893Z"
                }
              ],
              "createdAt": "2020-03-09T05:40:47.639Z",
              "updatedAt": "2021-05-03T10:31:25.942Z",
              "__v": 1,
              "publicKey": "vgy0femjtwn6yf6yo5g6"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe34682307953ca707b55e1",
              "searchString": "Branches and Merge branches and merge branchesandmerge",
              "moduleId": "5fe3468230795320ce7b55b1",
              "index": 2,
              "title": "Branches and Merge",
              "isOptional": false,
              "difficulty": 0,
              "files": [
                {
                  "_id": "5fe34682307953cf8a7b5622",
                  "label": "Module10-2",
                  "mimetype": "application/pdf",
                  "extension": ".pdf",
                  "createdAt": "2020-12-23T13:30:43.897Z",
                  "updatedAt": "2020-12-23T13:30:43.897Z"
                }
              ],
              "createdAt": "2020-03-09T05:42:10.267Z",
              "updatedAt": "2021-05-03T10:31:26.033Z",
              "__v": 1,
              "hideSolutions": false,
              "publicKey": "igkjw9ytgrqfje6hvkg3"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe34682307953398e7b55e2",
              "searchString": "Advanced Branching advanced branching advancedbranching",
              "moduleId": "5fe3468230795320ce7b55b1",
              "index": 3,
              "title": "Advanced Branching",
              "isOptional": true,
              "difficulty": 0,
              "files": [
                {
                  "_id": "5fe3468230795370a67b5626",
                  "label": "Module10-3",
                  "mimetype": "application/pdf",
                  "extension": ".pdf",
                  "createdAt": "2020-12-23T13:30:43.903Z",
                  "updatedAt": "2020-12-23T13:30:43.903Z"
                }
              ],
              "createdAt": "2020-03-09T05:42:40.982Z",
              "updatedAt": "2021-05-03T10:31:26.042Z",
              "__v": 1,
              "hideSolutions": true,
              "publicKey": "b6vx8cj683oefm7szo7r"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe3468230795392cd7b55e0",
              "searchString": "Local Git Directory local git directory localgitdirectory",
              "moduleId": "5fe3468230795320ce7b55b1",
              "index": 1,
              "title": "Local Git Directory",
              "isOptional": false,
              "difficulty": 0,
              "files": [
                {
                  "_id": "5fe3468330795394b57b5684",
                  "label": "Module10-1",
                  "mimetype": "application/pdf",
                  "extension": ".pdf",
                  "createdAt": "2020-12-23T13:30:44.008Z",
                  "updatedAt": "2020-12-23T13:30:44.008Z"
                }
              ],
              "createdAt": "2020-03-09T05:41:16.301Z",
              "updatedAt": "2021-05-03T10:31:26.407Z",
              "__v": 1,
              "hideSolutions": false,
              "publicKey": "7ev2ss8ifsvuraqo51cn"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe346823079537d277b55d6",
              "languages": [],
              "searchString": "Creating Activity Diagrams creating activity diagrams creatingactivitydiagrams",
              "moduleId": "5fe3468230795376ac7b55af",
              "index": 3,
              "title": "Creating Activity Diagrams",
              "files": [
                {
                  "_id": "5fe346823079531f387b5616",
                  "label": "ActivityDiagram1",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 280,
                  "cropWidth": 760,
                  "createdAt": "2020-12-23T13:30:43.878Z",
                  "updatedAt": "2020-12-23T13:30:43.878Z"
                },
                {
                  "_id": "5fe3468230795374de7b5617",
                  "label": "ActivityDiagram2",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 160,
                  "cropWidth": 570,
                  "createdAt": "2020-12-23T13:30:43.878Z",
                  "updatedAt": "2020-12-23T13:30:43.878Z"
                },
                {
                  "_id": "5fe3468230795311497b5618",
                  "label": "ActivityDiagram4",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 285,
                  "cropWidth": 1070,
                  "createdAt": "2020-12-23T13:30:43.878Z",
                  "updatedAt": "2020-12-23T13:30:43.878Z"
                },
                {
                  "_id": "5fe3468230795360077b5619",
                  "label": "ActivityDiagram3",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 280,
                  "cropWidth": 960,
                  "createdAt": "2020-12-23T13:30:43.878Z",
                  "updatedAt": "2020-12-23T13:30:43.878Z"
                }
              ],
              "createdAt": "2020-01-22T16:52:20.314Z",
              "updatedAt": "2021-05-03T10:31:25.851Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5e3712cb54878c9809ccaff9",
                    "text": "In this exercise you are asked to create some UML Activity Diagrams yourself. You can draw them using pen and paper, with an office or graphics software, or use a specialized editor like [UMLet](http://www.umlet.com) (installation required) or the new browser-based [UMLetino](http://www.umletino.com/umletino.html)."
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e287dd973600613a128a8a2",
                    "editor": "text",
                    "text": "Convert the following instructions (for a possible morning routine) into an\nActivity Diagram: \n\n*“Get out of bed. If you need to use the bathroom, use it. Eat breakfast while watching the news. If today is a weekday, put on work clothes and go to work. If today is not a weekday, put on leisure wear and make a plan for the day.”*\n\nUnfortunately Quarterfall does not yet support the upload of images, so please describe your diagram in words. Which elements of UML Activity Diagrams have you used for modeling which parts of the process, and why?",
                    "solution": "```image\nlabel: ActivityDiagram1\nsize: medium\n```"
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e3714f154878c811fccb000",
                    "text": "Convert the following instructions (for crossing a street) into an Activity\nDiagram:\n\n*“Look left. Look right. Are there any cars coming? If not, cross the\nroad. If yes, wait for 5 seconds and then start looking left again.”*\n\nUnfortunately Quarterfall does not yet support the upload of images, so please describe your diagram in words. Which elements of UML Activity Diagrams have you used for modeling which parts of the process, and why?",
                    "solution": "```image\nlabel: ActivityDiagram2\nsize: medium\n```"
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e37152454878c3155ccb001",
                    "text": "Create an Activity Diagram for a simple \"Guess the number!\" game, where the\nplayer has to guess a randomly selected number between 1 and 10. The\nprocess is roughly the following: \n\nThe computer randomly selects a number between 1 and 10, then asks the player to guess it. The player enters a number. The computer checks if it is smaller, equal or greater than the number to guess. If smaller/greater, it displays \"Too small!\"/\"Too big!\" and goes back to letting the player enter a number. If equal, it displays \"Yes!\". Then it asks the player if he wants to play again. If yes, it goes back to the beginning, if not, the game ends.\n\nUnfortunately Quarterfall does not yet support the upload of images, so please describe your diagram in words. Which elements of UML Activity Diagrams have you used for modeling which parts of the process, and why?",
                    "solution": "```image\nlabel: ActivityDiagram3\nsize: medium\n```"
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e3715ea54878c4e6fccb004",
                    "text": "Finally, think of some (not too simple) process that you have learned about in your studies. Describe it briefly in natural language and then in form of an Activity Diagram.\n\nUnfortunately Quarterfall does not yet support the upload of images, so please describe your diagram in words. Which elements of UML Activity Diagrams have you used for modeling which parts of the process, and why?",
                    "solution": "The answers to this question are of course very individual! Below is an example from bioinformatics:\n\nThe process of creating a phylogenetic tree starts with a (single) DNA\nsequence from the organism/gene for which we want to get the phylogenetic\ntree. We need to decide if we want to look for similar sequences in a DNA or a protein database. In the latter case, the DNA sequence needs to be translated into the corresponding protein sequence first. Then the BLAST search is executed to find sequences that are homologous (similar) to the input DNA sequences. From these sequences a multiple sequence alignment is\ncomputed, from which the phylogenetic tree can directly be derived and\ndisplayed.\n\n```image\nlabel: ActivityDiagram4\nsize: medium\n```\n"
                  }
                ]
              },
              "publicKey": "of186z62cost3zglwfn3"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe3468230795376967b55d4",
              "languages": [],
              "searchString": "Understanding Activity Diagrams understanding activity diagrams understandingactivitydiagrams",
              "moduleId": "5fe3468230795376ac7b55af",
              "index": 1,
              "title": "Understanding Activity Diagrams",
              "files": [
                {
                  "_id": "5fe3468230795396c67b561e",
                  "label": "ActivityDiagram1",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 510,
                  "cropWidth": 390,
                  "createdAt": "2020-12-23T13:30:43.888Z",
                  "updatedAt": "2020-12-23T13:30:43.888Z"
                }
              ],
              "createdAt": "2020-01-22T16:32:01.657Z",
              "updatedAt": "2021-05-03T10:31:25.898Z",
              "__v": 1,
              "difficulty": null,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5e28790ed8b1776417a3be43",
                    "text": "```image\nlabel: ActivityDiagram1\nsize: medium\n```"
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e287923d8b17758fda3be44",
                    "text": "For the activity diagram shown above, summarize in your own words the process that it describes.",
                    "solution": "The diagram describes the process of processing an order. After the order\nis received, the process splits into two parallel threads. In one the order is filled and either regular or overnight delivery is arranged. In the other the invoice is sent and the payment is received. The threads are synchronized before the process ends."
                  },
                  {
                    "contentType": "multipleChoiceQuestion",
                    "choices": [
                      {
                        "id": "akupqpoihkfaiagx",
                        "text": "sequential execution",
                        "correct": true,
                        "label": "A"
                      },
                      {
                        "id": "smidfileroccagbv",
                        "text": "parallel execution",
                        "correct": true,
                        "label": "B"
                      },
                      {
                        "id": "zvwtauuskwtiwjhd",
                        "text": "conditional branching",
                        "correct": true,
                        "label": "C"
                      },
                      {
                        "id": "vdqkgawjgawtrhgs",
                        "text": "pre-test loop",
                        "correct": false,
                        "label": "D"
                      },
                      {
                        "id": "kvwwoyjwrbiyysln",
                        "text": "post-test loop",
                        "correct": false,
                        "label": "E"
                      }
                    ],
                    "actions": [],
                    "_id": "5e287a8d73600632b128a899",
                    "text": "Which of the following control-flow patterns does the activity diagram include?",
                    "multipleCorrect": true,
                    "solution": "Sequential execution (activities directly following on each other), parallel execution (black bars) and conditional branching (diamonds)."
                  }
                ]
              },
              "publicKey": "1zhw5g6tct4dvflj7vuk"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe3468230795385ab7b55d7",
              "languages": [],
              "searchString": "Lecture Notes lecture notes lecturenotes",
              "moduleId": "5fe3468230795376ac7b55af",
              "index": 0,
              "title": "Lecture Notes",
              "files": [
                {
                  "_id": "5fe3468230795369b57b5624",
                  "label": "Module2-LectureNotes",
                  "mimetype": "application/pdf",
                  "extension": ".pdf",
                  "createdAt": "2020-12-23T13:30:43.901Z",
                  "updatedAt": "2020-12-23T13:30:43.901Z"
                }
              ],
              "createdAt": "2020-01-22T16:55:25.325Z",
              "updatedAt": "2021-05-03T10:31:26.023Z",
              "__v": 1,
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5e38675fa14e592cc348f271",
                    "text": "```file\n\tlabel: Module2-LectureNotes\n```\n"
                  }
                ]
              },
              "publicKey": "9rgvsurvl5278zz6qku5"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe3468230795375e57b55d5",
              "languages": [],
              "searchString": "Understanding more Activity Diagrams understanding more activity diagrams understandingmoreactivitydiagrams",
              "moduleId": "5fe3468230795376ac7b55af",
              "index": 2,
              "title": "Understanding more Activity Diagrams",
              "files": [
                {
                  "_id": "5fe346823079531bc37b5656",
                  "label": "ActivityDiagram2",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 360,
                  "cropWidth": 360,
                  "createdAt": "2020-12-23T13:30:43.974Z",
                  "updatedAt": "2020-12-23T13:30:43.974Z"
                }
              ],
              "createdAt": "2020-01-22T16:44:44.418Z",
              "updatedAt": "2021-05-03T10:31:26.217Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5e287bff7360066d8b28a89c",
                    "text": "```image\nlabel: ActivityDiagram2\nsize: medium\n```"
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e287c557360066c3028a89f",
                    "text": "For the activity diagram shown above, summarize in your own words the process that it describes.",
                    "solution": "The diagram describes the process of leaving the house with or without\nan umbrella. First step is to look outside. If it is raining, you look for your umbrella. If you found it after a while, you’re done. If you have not found it after a while, you check if it is still raining. If yes, go back to searching. If it is not raining, you can leave the umbrella at home."
                  },
                  {
                    "contentType": "multipleChoiceQuestion",
                    "choices": [
                      {
                        "id": "oautnjjodfgvyein",
                        "text": "sequential execution",
                        "correct": true,
                        "label": "A"
                      },
                      {
                        "id": "dcnuzmwpnvnuyksb",
                        "text": "parallel execution",
                        "correct": false,
                        "label": "B"
                      },
                      {
                        "id": "ipktktjvchyohyai",
                        "text": "conditional branching",
                        "correct": true,
                        "label": "C"
                      },
                      {
                        "id": "gobgkyfvmxuzcafa",
                        "text": "pre-test loop",
                        "correct": false,
                        "label": "D"
                      },
                      {
                        "id": "fzikbhazjquvebre",
                        "text": "post-test loop",
                        "correct": true,
                        "label": "E"
                      }
                    ],
                    "actions": [],
                    "_id": "5e287c88736006a38128a8a0",
                    "text": "Which of the following control-flow patterns does the activity diagram include?",
                    "multipleCorrect": true,
                    "solution": "Sequence (activities following on each other), conditional branching (diamonds), post-test loop (diamond with a backward-going edge)."
                  }
                ]
              },
              "publicKey": "dia5850b5v8js1alxqxj"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe3468230795391867b55d9",
              "languages": [],
              "searchString": "Lecture Notes lecture notes lecturenotes",
              "moduleId": "5fe34682307953f3c17b55b0",
              "index": 0,
              "title": "Lecture Notes",
              "files": [
                {
                  "_id": "5fe34682307953d7887b5612",
                  "label": "Module5-LectureNotes",
                  "mimetype": "application/pdf",
                  "extension": ".pdf",
                  "createdAt": "2020-12-23T13:30:43.860Z",
                  "updatedAt": "2020-12-23T13:30:43.860Z"
                }
              ],
              "createdAt": "2020-01-22T17:12:38.824Z",
              "updatedAt": "2021-05-03T10:31:25.824Z",
              "__v": 1,
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5e41bbd7275051236fb41a3b",
                    "text": "```file\n\tlabel: Module5-LectureNotes\t\n```"
                  }
                ]
              },
              "publicKey": "9iyl17e51wo2clek89gg"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe34682307953c72a7b55db",
              "languages": [],
              "searchString": "Summing Up summing up summingup",
              "moduleId": "5fe34682307953f3c17b55b0",
              "index": 2,
              "title": "Summing Up",
              "files": [],
              "createdAt": "2020-02-02T19:05:56.719Z",
              "updatedAt": "2021-05-03T10:31:25.879Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e371d9f54878c6651ccb015",
                    "programmingLanguage": "python",
                    "text": "Write a program that asks the user to enter an integer number n, computes the sum of all numbers from 1 to n, and prints the result. The output should look like:\n\n```\nPlease enter an integer number: 5\nThe sum of all numbers from 1 to 5 is 15\n```",
                    "solution": "```python\n# ask the user to enter a number\nn = int(input(\"Please enter an integer number: \"))\n\n# remember the initial input for later printout\norig_n = n\n\n# initialize sum to 0\nsum = 0\n\n# iterate over all values from n down to 1 and add them to sum\nwhile n > 0:\n    sum = sum + n\n    n = n - 1\n\n# print result\nprint(f\"The sum of all numbers from 1 to {orig_n} is {sum}.\")"
                  }
                ]
              },
              "publicKey": "95g9l1xugqtqpxi5e8v5"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe34682307953e6d17b55dd",
              "languages": [],
              "searchString": "Temperature Conversion Revisited temperature conversion revisited temperatureconversionrevisited",
              "moduleId": "5fe34682307953f3c17b55b0",
              "index": 4,
              "title": "Temperature Conversion Revisited",
              "files": [],
              "createdAt": "2020-02-02T19:08:34.482Z",
              "updatedAt": "2021-05-03T10:31:25.924Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e371e3554878c7d8eccb019",
                    "programmingLanguage": "python",
                    "text": "Extend the temperature conversion program from last week so that it asks the user to enter both a temperature value and the unit of the temperature (Celsius or Fahrenheit), and calculates the temperature in the respecive other unit. If an incorrect unit is entered, the program should give an error message and ask the user to try again. Furthermore, after having done a conversion, the program should ask the user if they want to convert another temperature value. \n\nThe output should be something like:\n\n```\nPlease enter temperature: 54\nIs the temperature in Celsius (c) or Fahrenheit (f)? c\n54.0 degrees Celsius is 129.2 degrees Fahrenheit.\nDo you want to convert another temperature value? (y/n) y\nPlease enter temperature: 13\nIs the temperature in Celsius (c) or Fahrenheit (f)? k\nUnknown temperature unit, try again.\nPlease enter temperature: 13\nIs the temperature in Celsius (c) or Fahrenheit (f)? c\n13.0 degrees Celsius is 55.4 degrees Fahrenheit.\nDo you want to convert another temperature value? (y/n) n\nOkay, goodbye!\n```",
                    "solution": "```python\n# start infinite loop for running the program until the user ends it\nwhile True:\n\n    # read temperature value from user\n    temp = float(input(\"Please enter temperature: \"))\n    unit = input(\"Is the temperature in Celsius (c) or Fahrenheit (f)? \")\n\n    # read temperature unit from user and convert or display error\n    if unit == \"c\":\n        print(f\"{temp} degrees Celsius is {32 + temp * (9/5):.1f} degrees Fahrenheit.\")\n    elif unit == \"f\":\n        print(f\"{temp} degrees Fahrenheit is {(temp - 32) * (5/9):.1f} degrees Celsius.\")\n    else:\n        print(\"Unknown temperature unit, try again.\")\n        continue\n    \n    # ask user if they want to continue\n    more = input(\"Do you want to convert another temperature value? (y/n) \")\n    if more == \"n\":\n        print(\"Okay, goodbye!\")\n        break\n"
                  }
                ]
              },
              "publicKey": "eoztjbyz88g9vxrtwtr4"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe346823079535e987b55de",
              "languages": [],
              "searchString": "Text Analysis text analysis textanalysis",
              "moduleId": "5fe34682307953f3c17b55b0",
              "index": 5,
              "title": "Text Analysis",
              "files": [],
              "createdAt": "2020-02-02T19:10:34.380Z",
              "updatedAt": "2021-05-03T10:31:26.015Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e371ead54878c0448ccb01b",
                    "programmingLanguage": "python",
                    "text": "Using what you have learned in the course so far, write a simple text analysis program that finds the (first) longest word in a text. It should work on any text, but you can use the “lorem ipsum” as an example:\n\n```python\n# some random text\ntext = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do \\\neiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad \\\nminim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex \\\nea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate \\\nvelit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat \\\ncupidatat non proident, sunt in culpa qui officia deserunt mollit anim id \\\nest laborum.\"\n```\n\nTo check if a character c is an alphabetic character, you can call the isalpha() function on it: c.isalpha(). It will return True or False.\n\nThe output of your should report the longest word and its length, like this:\n\n```\nThe longest word in the text is \"reprehenderit\" (13 characters).\n```",
                    "solution": "```python\n# some random text\ntext = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do \\\n#eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad \\\n#minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex \\\n#ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate \\\n#velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat \\\n#cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id \\\n#est laborum.\"\n\n# initialize running length counter and word\nlength = 0\nword = \"\"\n\n# initialize variables for storing the max. length and longest word\nmax_length = 0\nlongest_word = \"\"\n\n# for all characters in the text ...\nfor character in text:\n    \n    # check if the character is a letter (part of a word).\n    if character.isalpha():\n        # if yes, increment the length counter and \n        # add the character to the word to remember\n        length += 1\n        word += character\n    else:\n        # reset running variables\n        length = 0\n        word = \"\"\n\n    # check if the current word is longer then the previous longest word\n    if length > max_length:\n        # if yes, remember the new max. length and longest word\n        max_length = length\n        longest_word = word\n        \n# print result\nprint(f\"The longest word in the text is \\\"{longest_word}\\\" \" \\\n      f\"({max_length} characters).\")\n",
                    "template": "# some random text\ntext = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do \\\neiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad \\\nminim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex \\\nea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate \\\nvelit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat \\\ncupidatat non proident, sunt in culpa qui officia deserunt mollit anim id \\\nest laborum.\"\n\n# write the code to find the longest word here"
                  }
                ]
              },
              "publicKey": "3807c5l7lmnpsjhmlyq6"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe34682307953dfdc7b55dc",
              "languages": [],
              "searchString": "The Bag of Marshmallows the bag of marshmallows thebagofmarshmallows",
              "moduleId": "5fe34682307953f3c17b55b0",
              "index": 3,
              "title": "The Bag of Marshmallows",
              "files": [],
              "createdAt": "2020-02-02T19:07:00.764Z",
              "updatedAt": "2021-05-03T10:31:26.052Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e371dd854878c2b64ccb017",
                    "programmingLanguage": "python",
                    "text": "Write a program that implements the “Eating a bag of marshmallows” example from the lecture on Activity Diagrams. It should tell the user to open the bag, eat a marshmallow, ask if there are more left, and repeat eating and asking until the bag is empty. Then the bag should be put into trash. The output should be something like:\n\n```\nOpen bag of marshmallows.\nEat marshmallow.\nMore marshmallows left? (y/n) y\nEat marshmallow.\n\n[...]\n\nMore marshmallows left? (y/n) n\nDispose of bag.\n```",
                    "solution": "```python\n# open bag\nprint(\"Open bag of marshmallows.\")\n\n# eat all the marshmallows\nwhile True:\n    print(\"Eat marshmallow.\")\n    more_left = input(\"More marshmallows left? (y/n) \")\n    if more_left==\"n\":\n        break\n\n# clean up\nprint(\"Dispose of bag.\")"
                  }
                ]
              },
              "publicKey": "oya84xyaurcllgv421tk"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe34682307953541d7b55da",
              "languages": [],
              "searchString": "Canteen Dish canteen dish canteendish",
              "moduleId": "5fe34682307953f3c17b55b0",
              "index": 1,
              "title": "Canteen Dish",
              "files": [],
              "createdAt": "2020-02-02T19:03:16.765Z",
              "updatedAt": "2021-05-03T10:31:26.126Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e371cf754878cbd01ccb013",
                    "programmingLanguage": "python",
                    "text": "Write a program that corresponds to the \"Season your dish from the canteen\"\nActivity Diagram example from the first week's lecture (pre-test loop). It should announce you the dish, ask you if it needs more salt (y/n), if yes add salt and ask again, and if not let you enjoy it. The output should be something like:\n\n```\nHello, here is the dish of the day for you.\nDoes it need more salt? (y/n) y\nOkay, I added some more salt.\nDoes it need more salt? (y/n) y\nOkay, I added some more salt.\nDoes it need more salt? (y/n) n\nEnjoy your meal!\n```",
                    "solution": "```python\n# greet the customer\nprint(\"Hello, here is the dish of the day for you.\")\n\n# ask the user if salt needs to be added, repeat until enough\nwhile input(\"Does it need more salt? (y/n) \") == \"y\":\n    print(\"Okay, I added some more salt.\")\n\n# friendly closing   \nprint(\"Enjoy your meal!\")"
                  }
                ]
              },
              "publicKey": "8im0tlwfwb9lrw7h4a9z"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe34682307953091c7b55e3",
              "searchString": "Lecture Notes lecture notes lecturenotes",
              "moduleId": "5fe346823079533bd97b55b2",
              "index": 0,
              "title": "Lecture Notes",
              "isOptional": false,
              "difficulty": 0,
              "files": [
                {
                  "_id": "5fe34682307953ca727b5614",
                  "label": "Module12-LectureNotes",
                  "mimetype": "application/pdf",
                  "extension": ".pdf",
                  "createdAt": "2020-12-23T13:30:43.865Z",
                  "updatedAt": "2020-12-23T13:30:43.865Z"
                }
              ],
              "createdAt": "2020-03-19T09:40:17.253Z",
              "updatedAt": "2021-05-03T10:31:25.871Z",
              "__v": 1,
              "publicKey": "aroil4n5pynnansfuam8"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe3468230795330717b55e7",
              "searchString": "Python and Functional Programming python and functional programming pythonandfunctionalprogramming",
              "moduleId": "5fe346823079533bd97b55b2",
              "index": 4,
              "title": "Python and Functional Programming",
              "isOptional": true,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-03-19T10:08:23.209Z",
              "updatedAt": "2021-05-03T10:31:25.960Z",
              "__v": 1,
              "publicKey": "kpi2cwcsj9gugpk9d2si"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe34682307953033b7b55e5",
              "searchString": "People at the University people at the university peopleattheuniversity",
              "moduleId": "5fe346823079533bd97b55b2",
              "index": 2,
              "title": "People at the University",
              "isOptional": false,
              "difficulty": 0,
              "files": [
                {
                  "_id": "5fe3468230795344857b5634",
                  "label": "personsatuniversity",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 350,
                  "cropWidth": 390,
                  "createdAt": "2020-12-23T13:30:43.925Z",
                  "updatedAt": "2020-12-23T13:30:43.925Z"
                }
              ],
              "createdAt": "2020-03-19T09:46:57.528Z",
              "updatedAt": "2021-05-03T10:31:26.090Z",
              "__v": 1,
              "hideSolutions": true,
              "publicKey": "g9njlty8ml9v4rlus1k2"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe34682307953425a7b55e6",
              "searchString": "Text Analysis with Higher-Order Functions text analysis with higher-order functions text analysis with higher order functions textanalysiswithhigherorderfunctions",
              "moduleId": "5fe346823079533bd97b55b2",
              "index": 3,
              "title": "Text Analysis with Higher-Order Functions",
              "isOptional": false,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-03-19T09:59:55.875Z",
              "updatedAt": "2021-05-03T10:31:26.134Z",
              "__v": 1,
              "hideSolutions": true,
              "publicKey": "0zdwtoq5xnmzh5mmf1wi"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe3468230795382df7b55e4",
              "searchString": "Additional Practice in Mastery Grids additional practice in mastery grids additionalpracticeinmasterygrids",
              "moduleId": "5fe346823079533bd97b55b2",
              "index": 1,
              "title": "Additional Practice in Mastery Grids",
              "isOptional": true,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-03-19T09:43:33.454Z",
              "updatedAt": "2021-05-03T10:31:26.267Z",
              "__v": 1,
              "publicKey": "wyxmqzszv7pic0sv6cvx"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe3468230795305db7b55ea",
              "searchString": "Pathfinder with GUI and Automatic Solver pathfinder with gui and automatic solver pathfinderwithguiandautomaticsolver",
              "moduleId": "5fe34682307953a3127b55b3",
              "index": 2,
              "title": "Pathfinder with GUI and Automatic Solver",
              "isOptional": false,
              "difficulty": 0,
              "files": [
                {
                  "_id": "5fe3468230795334a47b5630",
                  "label": "gui",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 306,
                  "cropWidth": 427,
                  "createdAt": "2020-12-23T13:30:43.916Z",
                  "updatedAt": "2020-12-23T13:30:43.916Z"
                }
              ],
              "createdAt": "2020-03-19T11:52:43.440Z",
              "updatedAt": "2021-05-03T10:31:25.996Z",
              "__v": 1,
              "hideSolutions": true,
              "publicKey": "ho2sd9ehgtz10hth0lru"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe3468230795336cd7b55e9",
              "searchString": "QR Code Generator with GUI qr code generator with gui qrcodegeneratorwithgui",
              "moduleId": "5fe34682307953a3127b55b3",
              "index": 1,
              "title": "QR Code Generator with GUI",
              "isOptional": false,
              "difficulty": 0,
              "files": [
                {
                  "_id": "5fe34682307953db2d7b5632",
                  "label": "gui",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 330,
                  "cropWidth": 448,
                  "createdAt": "2020-12-23T13:30:43.921Z",
                  "updatedAt": "2020-12-23T13:30:43.921Z"
                }
              ],
              "createdAt": "2020-03-19T11:46:38.133Z",
              "updatedAt": "2021-05-03T10:31:26.062Z",
              "__v": 1,
              "hideSolutions": true,
              "publicKey": "icu5c56x2a35ujx5zn1u"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe34682307953d8927b55e8",
              "searchString": "Lecture Notes lecture notes lecturenotes",
              "moduleId": "5fe34682307953a3127b55b3",
              "index": 0,
              "title": "Lecture Notes",
              "isOptional": false,
              "difficulty": 0,
              "files": [
                {
                  "_id": "5fe3468230795314f97b5654",
                  "label": "Module13-LectureNotes",
                  "mimetype": "application/pdf",
                  "extension": ".pdf",
                  "createdAt": "2020-12-23T13:30:43.963Z",
                  "updatedAt": "2020-12-23T13:30:43.963Z"
                }
              ],
              "createdAt": "2020-03-19T11:45:10.943Z",
              "updatedAt": "2021-05-03T10:31:26.189Z",
              "__v": 1,
              "publicKey": "wpkexa4gjsw3uz5cno7n"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe346823079534b367b55f2",
              "languages": [],
              "searchString": "Quines quines",
              "moduleId": "5fe3468230795382c87b55b4",
              "index": 7,
              "title": "Quines",
              "isOptional": true,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-02-20T13:29:37.583Z",
              "updatedAt": "2021-05-03T10:31:25.906Z",
              "__v": 1,
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5e4e89c75081c875c63c45c1",
                    "text": "If you want to get your brain twisted with something really geeky, have a look at quines. Quines are programs that print themselves (i.e., their own code) during execution, but it is not allowed that they read in their code from the .py file. Here is an example of a quine in Python:\n```python\nq=\"\\nprint('q='+repr(q)+q)\"\nprint('q='+repr(q)+q)\n```\nCan you write another one?"
                  }
                ]
              },
              "publicKey": "6cxq3z1zzxigmbyn2o2t"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe346823079535a907b55ec",
              "languages": [],
              "searchString": "Password Generator password generator passwordgenerator",
              "moduleId": "5fe3468230795382c87b55b4",
              "index": 3,
              "title": "Password Generator",
              "createdAt": "2019-12-11T11:01:50.537Z",
              "updatedAt": "2021-05-03T10:31:25.988Z",
              "__v": 1,
              "files": [],
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [
                      {
                        "id": "qalhsqlqbuvqafqg",
                        "type": "unitTest",
                        "tests": [
                          {
                            "id": "tPMpS2guDDZ8RasxCH9i",
                            "name": "passwordShort",
                            "description": "Passwords with less than 8 characters should result in `None`",
                            "isCode": false,
                            "code": "create_password(4) == None"
                          },
                          {
                            "id": "4LEC2Z5JT3KYR8Up2cEt",
                            "name": "password8",
                            "description": "Should correctly create passwords with length 8",
                            "isCode": false,
                            "code": "len(create_password(8)) == 8"
                          },
                          {
                            "id": "DXw0Jn5TjByaP8IbyUQC",
                            "name": "password12",
                            "description": "Should correctly create passwords with length 12",
                            "isCode": false,
                            "code": "len(create_password(12)) == 12"
                          },
                          {
                            "id": "Tw79DzjjufccxKVEOnCv",
                            "name": "password16",
                            "description": "Should correctly create passwords with length 16",
                            "isCode": false,
                            "code": "len(create_password(16)) == 16"
                          },
                          {
                            "id": "JSSb2oc6Yo,mbxqCz,,C",
                            "name": "pattern",
                            "description": "Created passwords should have the requested pattern (sequence of alternating upper-case consonants and lower-case vowels, followed by 4 digits).",
                            "isCode": true,
                            "code": "import re\npattern = \"([BCDFGHJKLMNPQRSTVWXYZ][aeiou]){2,}\\d{4}\"\nmatcher = re.fullmatch(pattern, create_password(16))\nif matcher:\n    return True\nelse:\n    return False"
                          }
                        ],
                        "imports": "import random"
                      }
                    ],
                    "_id": "5df0cca04fd2a742cff6713c",
                    "programmingLanguage": "python",
                    "text": "People often use passwords that are too short or too simple and can easily be guessed. (\"123456\", \"Password\" and \"12345678\" were the most frequently used passwords in 2017!) Moreover, people tend to use the same password for different services, which makes it easy for criminals to take over other accounts once they have obtained one of the passwords. Thus, it is wise to use passwords that are reasonably long (8 characters minimum), consist of seemingly random sequences of letters (use of special characters is by the way not so important), and have a separate password for each account.\n\nWrite a program that helps you to create reasonably good passwords. Therefore define and implement a function `create_password(length)` that takes the desired length of the password as parameter. If a password shorter than 8 characters is requested, the function should refuse to create it (as it would not be secure) and simply return `None`. If the requested length is longer, then the function should fill the password with alternating upper-case consonants and lower-case vowels, apart for the last 4 positions, which should be filled with random numbers.",
                    "template": "# import the random package (needed to randomize the password)\nimport random\n\n# function for creating a password of a given length\ndef create_password(length):\n    # fill this in",
                    "solution": "```python\n# import the random package (needed to randomize the password)\nimport random\n\n# function for creating a password of a given length\ndef create_password(length):\n    # strings that just contain the letters that we want to use\n    consonants = \"BCDFGHJKLMNPQRSTVWXYZ\"\n    vowels = \"aeiou\"\n    \n    # if the given length is too short, refuse to create (insecure) password\n    if length < 8:\n       print(\"Too short, please create longer password.\")\n       return None\n    # otherwise, create password as described\n    else:\n        # init empty password string\n        password = \"\"\n        # for the first length-4 characters ...\n        for i in range(1,length-3):\n            # put random consonants on the odd positions ...\n            if i%2 != 0:\n                password += random.choice(consonants)\n            # ... and random vowels on the even positions\n            else:\n                password += random.choice(vowels)\n        # fill the remaining four positions with random numbers\n        for i in range(length-3,length+1):\n            password += str(random.randint(0,9))\n    \n    # return created password        \n    return password\n```"
                  }
                ]
              },
              "publicKey": "1zxnoqudkml7nle2unra"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe34682307953f3d37b55eb",
              "languages": [],
              "searchString": "Leap Years leap years leapyears",
              "moduleId": "5fe3468230795382c87b55b4",
              "index": 2,
              "title": "Leap Years",
              "createdAt": "2019-12-11T10:52:50.228Z",
              "updatedAt": "2021-05-03T10:31:26.071Z",
              "__v": 1,
              "files": [],
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [
                      {
                        "id": "yskgybclcoqigaut",
                        "type": "unitTest",
                        "tests": [
                          {
                            "id": "DR8yVm3L2cghVNbCTW2a",
                            "name": "test1900",
                            "description": "1900 should not be a leap year",
                            "isCode": false,
                            "code": "not is_leap_year(1900)"
                          },
                          {
                            "id": "M1JYetBwCK1li6VMs4oO",
                            "name": "test1984",
                            "description": "1984 should be a leap year",
                            "isCode": false,
                            "code": "is_leap_year(1984)"
                          },
                          {
                            "id": "mpOUAi3KhRGAqXE1C98j",
                            "name": "test1985",
                            "description": "1985 should not be a leap year",
                            "isCode": false,
                            "code": "not is_leap_year(1985)"
                          },
                          {
                            "id": "B5ipO21b4cYBeHjYNdIf",
                            "name": "test2000",
                            "description": "2000 should be a leap year",
                            "isCode": false,
                            "code": "is_leap_year(2000)"
                          },
                          {
                            "id": "OEk8Fxo7pzXF710xUaiU",
                            "name": "test2018",
                            "description": "2018 should not be a leap year",
                            "isCode": false,
                            "code": "not is_leap_year(2018)"
                          }
                        ],
                        "imports": "import random",
                        "answerEmbedding": "{{answer}}"
                      }
                    ],
                    "_id": "5df0ca844fd2a73c16f6713a",
                    "programmingLanguage": "python",
                    "text": "In our lifetimes (unless we happen to get veeery old) a leap year occurs every four years. But actually, the rule is a bit more involved: A year is a leap year if it is a multiple of 4, but not a multiple of 100, unless it is also a multiple of 400. For example, 1984 and 2000 were leap years, but 1900 and 1985 were not.\n\nWrite a function `is_leap_year(year)` that tests if the year is a leap year. If so, the function should return `True`, and `False` otherwise. Implement the function using _only one_ Boolean expression.",
                    "template": "def is_leap_year(year):\n    # fill this in",
                    "solution": "```python\n# function that checks if the given year is a leap year\ndef is_leap_year(year):\n    return year%4==0 and not year%100==0 or \\\n           year%4==0 and year%100==0 and year%400==0"
                  }
                ]
              },
              "publicKey": "3s662cousrlucm0tzs8l"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe346823079538e377b55f1",
              "languages": [],
              "searchString": "CheckiO checkio",
              "moduleId": "5fe3468230795382c87b55b4",
              "index": 6,
              "title": "CheckiO",
              "isOptional": true,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-02-20T13:28:54.587Z",
              "updatedAt": "2021-05-03T10:31:26.081Z",
              "__v": 1,
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5e4e899c5081c8a3b13c45bf",
                    "text": "[CheckiO](https://checkio.org/) is a game where you need to code in Python (or JavaScript) to get further. By now you should know enough Python to try it out and solve the challenges there."
                  }
                ]
              },
              "publicKey": "3mdz65bf38laon9kdnwq"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe3468230795375877b55ed",
              "languages": [],
              "searchString": "Lecture Notes lecture notes lecturenotes",
              "moduleId": "5fe3468230795382c87b55b4",
              "index": 0,
              "title": "Lecture Notes",
              "files": [
                {
                  "_id": "5fe34682307953a7e97b563a",
                  "label": "Module6-LectureNotes",
                  "mimetype": "application/pdf",
                  "extension": ".pdf",
                  "createdAt": "2020-12-23T13:30:43.930Z",
                  "updatedAt": "2020-12-23T13:30:43.930Z"
                }
              ],
              "createdAt": "2020-02-02T19:16:32.480Z",
              "updatedAt": "2021-05-03T10:31:26.144Z",
              "__v": 1,
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5e42ca9ae731b12269300799",
                    "text": "```file\n\tlabel: \tModule6-LectureNotes\n```"
                  }
                ]
              },
              "publicKey": "8pa3mbr1ynqzls33ritl"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe3468230795324a67b55f0",
              "languages": [],
              "searchString": "Ackermann Function ackermann function ackermannfunction",
              "moduleId": "5fe3468230795382c87b55b4",
              "index": 5,
              "title": "Ackermann Function",
              "files": [
                {
                  "_id": "5fe346823079536f2d7b563e",
                  "label": "Ackermann",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 110,
                  "cropWidth": 662,
                  "createdAt": "2020-12-23T13:30:43.935Z",
                  "updatedAt": "2020-12-23T13:30:43.935Z"
                }
              ],
              "createdAt": "2020-02-02T20:00:45.134Z",
              "updatedAt": "2021-05-03T10:31:26.179Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5e372aa854878c2af6ccb023",
                    "text": "The Ackermann function (named after the German mathematician Wilhelm Friedrich Ackermann) grows rapidly already for small inputs. It exists in different variants, one of the common definitions is the following (for two nonnegative integers m and n):\n\n```image\nlabel: Ackermann\nsize: medium\n```\n\n"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [
                      {
                        "id": "imfblzzkfqgeyfwj",
                        "type": "unitTest",
                        "tests": [
                          {
                            "id": "moGx14wpxXaPwoXtmvhM",
                            "name": "ackermann_0_0",
                            "description": "The result of ackermann(0,0) should be 1.",
                            "isCode": false,
                            "code": "ackermann(0,0) == 1"
                          },
                          {
                            "id": "FNRZE2jdumaPh0I55eAq",
                            "name": "ackermann_1_1",
                            "description": "The result of ackermann(1,1) should be 3.",
                            "isCode": false,
                            "code": "ackermann(1,1) == 3"
                          },
                          {
                            "id": "zSBUw6LQQdC0,vcJ5m,J",
                            "name": "ackermann_2_2",
                            "description": "The result of ackermann(2,2) should be 7.",
                            "isCode": false,
                            "code": "ackermann(2,2) == 7"
                          },
                          {
                            "id": "7O9SFB9xE7zbhgrKWMWU",
                            "name": "ackermann_1_0",
                            "description": "The result of ackermann(1,0) should be 2.",
                            "isCode": false,
                            "code": "ackermann(1,0) == 2"
                          },
                          {
                            "id": "vLrYrw9lQS3IIk6lmgIa",
                            "name": "ackermann_1_2",
                            "description": "The result of ackermann(1,2) should be 4.",
                            "isCode": false,
                            "code": "ackermann(1,2) == 4"
                          }
                        ]
                      }
                    ],
                    "_id": "5e372a7054878c125dccb022",
                    "programmingLanguage": "python",
                    "text": "Define and implement a (recursive) function `ackermann(m,n)` that computes the Ackermann function value for two nonnegative integers m and n. \n\nYou can use the following code to test your function:\n```python\nprint(f\"ackermann(0,0) = {ackermann(0,0)}\")\nprint(f\"ackermann(1,1) = {ackermann(1,1)}\")\nprint(f\"ackermann(2,2) = {ackermann(2,2)}\")\n\n```\n\nThe output should be something like:\n\n```\nackermann(0,0) = 1\nackermann(1,1) = 3\nackermann(2,2) = 7\n```",
                    "solution": "```python\n# function implementing the Ackermann function \n# (following straightforward from the recursive definition)\ndef ackermann(m,n):\n    if m==0:\n        return n+1\n    elif m>0 and n==0:\n        return ackermann(m-1,1)\n    else:\n        return ackermann(m-1,ackermann(m,n-1))\n",
                    "template": "# Python function implementing the Ackermann function \ndef ackermann(m,n):\n    # (fill this in)"
                  },
                  {
                    "contentType": "openQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e372be554878c1389ccb028",
                    "text": "Now run the following test program on your ackermann function:\n```python\n# test program\ni = 0\nwhile True:\n    print(f\"ackermann({i},{i}) = {ackermann(i,i)}\")\n    i += 1\n```\n\nWhat is the last value that your program computes before you get a\n`RecursionError?` (Hint: It might be that the outputs in the IPython console in Spyder are too verbose to see anything. You can alternatively run your program from the command line to see more.) \n\nWhat does this error mean?",
                    "solution": "The last output that I can get is `ackermann(3,3) = 61`. While trying to compute ackermann(4,4) the maximum recursion depth is reached and the program aborts with an `RecursionError`. \n\nThe Python environment allows only for a limited number of recursive calls of a function (to avoid them using up the available working memory), and with the fast-growing and double-recursive Ackermann function this limit is reached very quickly. For other recursive functions, it takes much longer before this happens, and often a `RecursionError` means that something is wrong with the implementation, so that recursive calls continue to happen although they should not (similar to an infinite loop)."
                  }
                ]
              },
              "publicKey": "bzbbathy06re1exhluet"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe3468230795373747b55ef",
              "languages": [],
              "searchString": "Basic Statistics basic statistics basicstatistics",
              "moduleId": "5fe3468230795382c87b55b4",
              "index": 4,
              "title": "Basic Statistics",
              "files": [],
              "createdAt": "2020-02-02T19:56:30.798Z",
              "updatedAt": "2021-05-03T10:31:26.226Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e372972e1d6d8f98bac0724",
                    "programmingLanguage": "python",
                    "text": "Use the `statistics` package from the Python standard library to define and\nimplement a function `print_basic_statistics()` with the following characteristics:\n* the function takes arbitrarily many numbers as input\n* the default case is that the function prints the arithmetic mean, median,\nstandard variation and variance of the input data to the screen\n* via a named parameter the calling code should also have the option to select only one of the four to be printed\n\nYou can use the following code to test your function:\n\n```python\nprint_basic_statistics(91,82,19,13,44,)\nprint_basic_statistics(91,82,19,13,44,73,18,95,17,65, \\ \noutput=\"median\")\n```\n\nThe output should be something like:\n```\nThe mean of (91, 82, 19, 13, 44) is 49.8.\nThe median of (91, 82, 19, 13, 44) is 44.0.\nThe standard deviation of (91, 82, 19, 13, 44) is 35.6.\nThe variance of (91, 82, 19, 13, 44) is 1267.7.\n\nThe median of (91, 82, 19, 13, 44, 73, 18, 95, 17, 65) is 54.5.\n```",
                    "solution": "```python\n# import the statistics package\nimport statistics\n\n# Function that prints basic statistics for a sequence of numbers. Optionally,\n# the desired output can be specified (mean, median, sd, var). Default is to\n# to print all of them.\ndef print_basic_statistics(*numbers, output=\"all\"):\n    if output == \"all\":\n        print(f\"The mean of {numbers} is {statistics.mean(numbers):.1f}.\")\n        print(f\"The median of {numbers} is {statistics.median(numbers):.1f}.\")\n        print(f\"The standard deviation of {numbers} is {statistics.stdev(numbers):.1f}.\")\n        print(f\"The variance of {numbers} is {statistics.variance(numbers):.1f}.\")\n    elif output == \"mean\":\n        print(f\"The mean of {numbers} is {statistics.mean(numbers):.1f}.\")\n    elif output == \"median\":\n        print(f\"The median of {numbers} is {statistics.median(numbers):.1f}.\")\n    elif output == \"sd\":\n        print(f\"The standard deviation of {numbers} is {statistics.stdev(numbers):.1f}.\")\n    elif output == \"var\":\n        print(f\"The variance of {numbers} is {statistics.variance(numbers):.1f}.\")\n    else:\n        print(\"Unknown parameter.\")\n\n\n# test program\nprint_basic_statistics(91,82,19,13,44)\nprint_basic_statistics(91,82,19,13,44,73,18,95,17,65, output=\"median\")",
                    "template": "# import the statistics package\nimport statistics\n\n# Function that prints basic statistics for a sequence of numbers. Optionally,\n# the desired output can be specified (mean, median, sd, var). Default is to\n# to print all of them.\n# (fill this in)\n\n# test program\nprint_basic_statistics(91,82,19,13,44)\nprint_basic_statistics(91,82,19,13,44,73,18,95,17,65, output=\"median\")"
                  }
                ]
              },
              "publicKey": "0928hluqsck2n3dihgcb"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe3468230795338097b55ee",
              "languages": [],
              "searchString": "Calculator calculator",
              "moduleId": "5fe3468230795382c87b55b4",
              "index": 1,
              "title": "Calculator",
              "files": [],
              "createdAt": "2020-02-02T19:26:20.387Z",
              "updatedAt": "2021-05-03T10:31:26.253Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [
                      {
                        "id": "vsapoasuyjqqpctp",
                        "type": "unitTest",
                        "tests": [
                          {
                            "id": "N5eJY7cNIESFWWZjh2ub",
                            "name": "test_add",
                            "description": "The result of add(x,y) should be equal to x+y.",
                            "isCode": false,
                            "code": "add(5,2) == 5+2"
                          },
                          {
                            "id": "HbcjPA3juQ2dAFbowVH,",
                            "name": "test_subtract",
                            "description": "The result of subtract(x,y) should be equal to x-y.",
                            "isCode": false,
                            "code": "subtract(5,2) == 5-2"
                          },
                          {
                            "id": "48kRcOrDD2tJW2feBHaj",
                            "name": "test_multiply",
                            "description": "The result of multiply(x,y) should be equal to x*y.",
                            "isCode": false,
                            "code": "multiply(5,2) == 5*2"
                          },
                          {
                            "id": "DVwr,JrQmJ0tZRJP42pd",
                            "name": "test_divide",
                            "description": "The result of divide(x,y) should be equal to x/y.",
                            "isCode": false,
                            "code": "divide(5,2) == 5/2"
                          }
                        ]
                      }
                    ],
                    "_id": "5e37226654878c93b2ccb01f",
                    "programmingLanguage": "python",
                    "text": "Write a program that acts a simple calculator, asking the user if they want to add, subtract, multiply or divide two arbitrary numbers. Define functions `add(x,y)`, `subtract(x,y)`, `multiply(x,y)` and `divide(x,y)` for this. (Normally one would not define functions for these basic operators, but this is just an exercise...) After the user has selected an operation, they are asked to enter the numbers `x` and `y`. The program calculates and prints the result. \n\nThe output should be something like:\n\n```\nYou have four options:\n1. Add\n2. Subtract\n3. Multiply\n4. Divide\nEnter choice (1/2/3/4): 2\nEnter first number: 34\nEnter second number: 53\n34 - 53 = -19\n```",
                    "solution": "```python\n# This function adds two numbers \ndef add(x, y):\n   return x + y\n\n# This function subtracts two numbers \ndef subtract(x, y):\n   return x - y\n\n# This function multiplies two numbers\ndef multiply(x, y):\n   return x * y\n\n# This function divides two numbers\ndef divide(x, y):\n   return x / y\n\n# Display options\nprint(\"Select operation.\")\nprint(\"1. Add\")\nprint(\"2. Subtract\")\nprint(\"3. Multiply\")\nprint(\"4. Divide\")\n\n# Take input from the user \nchoice = input(\"Enter choice(1/2/3/4):\")\nnum1 = int(input(\"Enter first number: \"))\nnum2 = int(input(\"Enter second number: \"))\n\n# Execute chosen operation with entered numbers\nif choice == '1':\n   print(f\"{num1} + {num2} = {add(num1,num2)}\")\n\nelif choice == '2':\n   print(f\"{num1} - {num2} = {subtract(num1,num2)}\")\n\nelif choice == '3':\n   print(f\"{num1} * {num2} = {multiply(num1,num2)}\")\n\nelif choice == '4':\n   print(f\"{num1} / {num2} = {divide(num1,num2)}\")\n\nelse:\n   print(\"Invalid input\")",
                    "template": "# This function adds two numbers \ndef add(x, y):\n    # (fill this in)\n    \n# This function subtracts two numbers \ndef subtract(x, y):\n    # (fill this in)\n\n# This function multiplies two numbers\ndef multiply(x, y):\n    # (fill this in)\n    \n# This function divides two numbers\ndef divide(x, y):\n    # (fill this in)\n    \n# Display options\nprint(\"Select operation.\")\nprint(\"1. Add\")\nprint(\"2. Subtract\")\nprint(\"3. Multiply\")\nprint(\"4. Divide\")\n\n# Take input from the user \n# (fill this in)\n\n# Execute chosen operation with entered numbers\n# (fill this in)\n"
                  }
                ]
              },
              "publicKey": "7qvtqt4jfd3mi7uymkx0"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe3468230795343907b55f7",
              "searchString": "String Reformatting string reformatting stringreformatting",
              "moduleId": "5fe34682307953dc8a7b55b5",
              "index": 4,
              "title": "String Reformatting",
              "isOptional": false,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-03-19T15:06:00.330Z",
              "updatedAt": "2021-05-03T10:31:26.100Z",
              "__v": 1,
              "hideSolutions": true,
              "publicKey": "vhpadl98wjvnt3bls367"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe3468230795337fc7b55f3",
              "searchString": "Lecture Notes lecture notes lecturenotes",
              "moduleId": "5fe34682307953dc8a7b55b5",
              "index": 0,
              "title": "Lecture Notes",
              "isOptional": false,
              "difficulty": 0,
              "files": [
                {
                  "_id": "5fe3468230795313667b562e",
                  "label": "Module14-LectureNotes",
                  "mimetype": "application/pdf",
                  "extension": ".pdf",
                  "createdAt": "2020-12-23T13:30:43.913Z",
                  "updatedAt": "2020-12-23T13:30:43.913Z"
                }
              ],
              "createdAt": "2020-03-19T12:54:49.964Z",
              "updatedAt": "2021-05-03T10:31:26.116Z",
              "__v": 1,
              "publicKey": "ddbicpuufzck4p5ybnfv"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe3468230795375e07b55f4",
              "searchString": "Understanding Regular Expressions understanding regular expressions understandingregularexpressions",
              "moduleId": "5fe34682307953dc8a7b55b5",
              "index": 1,
              "title": "Understanding Regular Expressions",
              "isOptional": false,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-03-19T14:54:59.175Z",
              "updatedAt": "2021-05-03T10:31:26.153Z",
              "__v": 1,
              "hideSolutions": true,
              "publicKey": "x1xk6ngub8fnej2nf2mj"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe34682307953e1157b55f6",
              "searchString": "Information from a Database Entry information from a database entry informationfromadatabaseentry",
              "moduleId": "5fe34682307953dc8a7b55b5",
              "index": 3,
              "title": "Information from a Database Entry",
              "isOptional": false,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-03-19T15:02:31.154Z",
              "updatedAt": "2021-05-03T10:31:26.296Z",
              "__v": 1,
              "hideSolutions": true,
              "publicKey": "bya7vhiu06qwt16olo5x"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe34682307953b4497b55f8",
              "searchString": "RegEx Puzzles regex puzzles regexpuzzles",
              "moduleId": "5fe34682307953dc8a7b55b5",
              "index": 5,
              "title": "RegEx Puzzles",
              "isOptional": true,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-03-19T15:39:21.746Z",
              "updatedAt": "2021-05-03T10:31:26.304Z",
              "__v": 1,
              "publicKey": "109nlua88skj65kev8lj"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe34682307953030f7b55f5",
              "searchString": "Writing Regular Expressions writing regular expressions writingregularexpressions",
              "moduleId": "5fe34682307953dc8a7b55b5",
              "index": 2,
              "title": "Writing Regular Expressions",
              "isOptional": false,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-03-19T15:00:36.358Z",
              "updatedAt": "2021-05-03T10:31:26.508Z",
              "__v": 1,
              "hideSolutions": true,
              "publicKey": "rd0cmvo4g688hmmq9y9k"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe34682307953a6a27b55fa",
              "languages": [],
              "searchString": "Lecture Notes lecture notes lecturenotes",
              "moduleId": "5fe34682307953d9cc7b55b7",
              "index": 0,
              "title": "Lecture Notes",
              "isOptional": false,
              "difficulty": null,
              "files": [
                {
                  "_id": "5fe34682307953d6437b5638",
                  "label": "Module7-LectureNotes",
                  "mimetype": "application/pdf",
                  "extension": ".pdf",
                  "createdAt": "2020-12-23T13:30:43.928Z",
                  "updatedAt": "2020-12-23T13:30:43.928Z"
                }
              ],
              "createdAt": "2020-02-03T19:12:36.067Z",
              "updatedAt": "2021-05-03T10:31:25.950Z",
              "__v": 1,
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5e42cd9ae731b12e7830079c",
                    "text": "```file\n\tlabel: Module7-LectureNotes\t\n```"
                  }
                ]
              },
              "publicKey": "tfgc9820j0adkz7vgzp4"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe3468230795334e67b55fb",
              "languages": [],
              "searchString": "String Reverse string reverse stringreverse",
              "moduleId": "5fe34682307953d9cc7b55b7",
              "index": 1,
              "title": "String Reverse",
              "isOptional": false,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-02-03T19:12:50.910Z",
              "updatedAt": "2021-05-03T10:31:25.978Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [
                      {
                        "id": "txhmvbvvtgkockph",
                        "type": "unitTest",
                        "tests": [
                          {
                            "id": "vD3XB,6zaq15S5ZQN4KM",
                            "name": "test_recursive_hello",
                            "description": "The recursive implementation should reverse \"hello\" correctly.",
                            "isCode": false,
                            "code": "reverse_recursive(\"hello\") == \"olleh\""
                          },
                          {
                            "id": ",k4K0Kzj7iKSwuknS3vZ",
                            "name": "test_recursive_password",
                            "description": "The recursive implementation should reverse the string \"password\" correctly.",
                            "isCode": false,
                            "code": "reverse_recursive(\"password\") == \"drowssap\""
                          },
                          {
                            "id": "kw,4cbmFU0ZQ0JnBExY7",
                            "name": "test_recursive_empty",
                            "description": "The recursive implementation should reverse the empty string correctly.",
                            "isCode": false,
                            "code": "reverse_recursive(\"\") == \"\""
                          },
                          {
                            "id": "ID,4XzX,P3kf8beTFvOT",
                            "name": "test_while_hello",
                            "description": "The while implementation should reverse the string \"hello\" correctly.",
                            "isCode": false,
                            "code": "reverse_while(\"hello\") == \"olleh\""
                          },
                          {
                            "id": "7nZQJl8halK0iyT3FKdS",
                            "name": "test_while_password",
                            "description": "The while implementation should reverse the string \"password\" correctly.",
                            "isCode": false,
                            "code": "reverse_while(\"password\") == \"drowssap\""
                          },
                          {
                            "id": "CW1FGYGJrffTnjd,PRq2",
                            "name": "test_while_empty",
                            "description": "The while implementation should reverse the empty string correctly.",
                            "isCode": false,
                            "code": "reverse_while(\"\") == \"\""
                          },
                          {
                            "id": "IU5IeBWVeXPU9AQX3uhj",
                            "name": "test_for_hello",
                            "description": "The for implementation should reverse the string \"hello\" correctly.",
                            "isCode": false,
                            "code": "reverse_for(\"hello\") == \"olleh\""
                          },
                          {
                            "id": "vKttkla2Zi4hlym4ngCR",
                            "name": "test_for_password",
                            "description": "The for implementation should reverse the string \"password\" correctly.",
                            "isCode": false,
                            "code": "reverse_for(\"password\") == \"drowssap\""
                          },
                          {
                            "id": "VvEn0F9bHXk2WG,nKli8",
                            "name": "test_for_empty",
                            "description": "The for implementation should reverse the empty string correctly.",
                            "isCode": false,
                            "code": "reverse_for(\"\") == \"\""
                          },
                          {
                            "id": "HYsaLLq40,Zmm0rC1G6T",
                            "name": "test_equality",
                            "description": "All three functions should return the same result.",
                            "isCode": false,
                            "code": "reverse_recursive(\"hello\") == reverse_while(\"hello\") == reverse_for(\"hello\")"
                          }
                        ]
                      }
                    ],
                    "_id": "5e3870b7a14e590a7748f27b",
                    "programmingLanguage": "python",
                    "text": "Implement three different variants of a function for reversing a string:\n\n1. `reverse_recursive(string)`, solving the problem recursively\n2. `reverse_while(string)`, solving the problem using a while-loop\n3. `reverse_for(string)`, solving the problem using a for-loop\n\nStrings can be indexed like lists, that is, an expression like `<string>[<index>]` returns the character at the corresponding position in the string. The first character of the string has index `0`, and the last is at position `len(<string>)-1`. A sub-sequence of a string can be obtained by specifying a range of indexes, for example `<string>[1:len(<string>)]` for all characters but the first. ",
                    "solution": "```python\n# function for reversing a string recursively\n# (Idea: If the string consists only of one letter, the reverse is trivial.\n# If the string is longer, reverse the string from the second character to\n# the end, append the first character to that.)\ndef reverse_recursive(string):\n    if len(string) > 1:\n        return reverse_recursive(string[1:len(string)]) + string[0]\n    else:\n        return string\n\n# function for reversing a string with a while-loop\n# (Idea: Iterate over the characters of the string with a while-loop, \n# in each iteration adding the current letter to the beginning of the \n# reversed string.)\ndef reverse_while(string):\n    i = 0\n    reversed_string = \"\"\n    while i < len(string):\n        reversed_string = string[i] + reversed_string\n        i = i+1\n    return reversed_string\n\n# function for reversing a string with a for-loop\n# (Idea: Same as with the while-loop, but less index management needed.)\ndef reverse_for(string):\n    reversed_string = \"\"\n    for s in string:\n        reversed_string = s + reversed_string\n    return reversed_string\n    \n# test program\nstring_to_reverse = \"This is just a test.\"\nprint(reverse_recursive(string_to_reverse))\nprint(reverse_while(string_to_reverse))\nprint(reverse_for(string_to_reverse))",
                    "template": "# function for reversing a string recursively\ndef reverse_recursive(string):\n    # (fill this in)\n    \n# function for reversing a string with a while-loop\ndef reverse_while(string):\n    #  (fill this in)\n    \n# function for reversing a string with a for-loop\ndef reverse_for(string):\n    #  (fill this in)\n\n# test program\nstring_to_reverse = \"This is just a test.\"\nprint(reverse_recursive(string_to_reverse))\nprint(reverse_while(string_to_reverse))\nprint(reverse_for(string_to_reverse))"
                  }
                ]
              },
              "publicKey": "vis9x4b37sq62ghc00eh"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe346823079531a737b55fe",
              "languages": [],
              "searchString": "Anagram Test anagram test anagramtest",
              "moduleId": "5fe34682307953d9cc7b55b7",
              "index": 4,
              "title": "Anagram Test",
              "isOptional": false,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-02-03T19:22:17.712Z",
              "updatedAt": "2021-05-03T10:31:26.108Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [
                      {
                        "id": "ysezrguexgmnhgnj",
                        "type": "unitTest",
                        "tests": [
                          {
                            "id": "nYBTVHlPChc1T,P,WTSS",
                            "name": "test_rescue_secure",
                            "description": "The result of is_anagram(\"rescue\", \"secure\") should be True.",
                            "isCode": false,
                            "code": "is_anagram(\"rescue\", \"secure\") == True"
                          },
                          {
                            "id": "mkbdwgMckUMX2kPXUtnb",
                            "name": "test_Rescue_Secure",
                            "description": "The result of is_anagram(\"Rescue\", \"Secure\") should be True.",
                            "isCode": false,
                            "code": "is_anagram(\"Rescue\", \"Secure\") == True"
                          },
                          {
                            "id": "G9rIYZntJyXcBLPXvNCD",
                            "name": "test_Rescue_Anchor",
                            "description": "The result of is_anagram(\"Rescue\", \"Anchor\") should be False.",
                            "isCode": false,
                            "code": "is_anagram(\"Rescue\", \"Anchor\") == False"
                          },
                          {
                            "id": "EVIX7vL0MT0WVr7jF,uo",
                            "name": "test_Ship_Secure",
                            "description": "The result of is_anagram(\"Ship\", \"Secure\") should be False.",
                            "isCode": false,
                            "code": "is_anagram(\"Ship\", \"Secure\") == False"
                          }
                        ]
                      }
                    ],
                    "_id": "5e3872ecd168a1482439d7af",
                    "programmingLanguage": "python",
                    "text": "An anagram is a word or phrase that is made by rearranging the letters of another word or phrase. For example, \"secure\" is an anagram of \"rescue\". Write a function `is_anagram(word1,word2)` that checks if the two words are anagrams of each other. If so, the function should return `True`, and `False` otherwise. The function should not distinguish between upper- and lower-case letters.",
                    "solution": "```python\n# Function to test if two words are anagrams.\n# Basic idea: count the number of occurrences of each\n# letter in two dictionaries, then compare if they are the same.\n# (An alternative solution would be to simply sort the strings and \n# compare if they are equal then.)\ndef is_anagram(word1,word2):\n    counts1 = {}\n    for w in word1.lower():\n        if w in counts1:\n            counts1[w] += 1\n        else:\n            counts1[w] = 1\n\n    counts2 = {}\n    for w in word2.lower():\n        if w in counts2:\n            counts2[w] += 1\n        else:\n            counts2[w] = 1\n\n    return counts1 == counts2\n\n\n# Test program\nprint(is_anagram(\"rescue\", \"secure\")) # should be True\nprint(is_anagram(\"Rescue\", \"Secure\")) # should be True\nprint(is_anagram(\"Rescue\", \"Anchor\")) # should be False\nprint(is_anagram(\"Ship\", \"Secure\")) # should be False",
                    "template": "def is_anagram(word1,word2):\n    # insert your code here\n\n# Test program\nprint(is_anagram(\"rescue\", \"secure\")) # should be True\nprint(is_anagram(\"Rescue\", \"Secure\")) # should be True\nprint(is_anagram(\"Rescue\", \"Anchor\")) # should be False\nprint(is_anagram(\"Ship\", \"Secure\")) # should be False"
                  }
                ]
              },
              "publicKey": "rba7wq5cujx9s1u2i7fa"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe34682307953bfb57b55fc",
              "languages": [],
              "searchString": "Irish League irish league irishleague",
              "moduleId": "5fe34682307953d9cc7b55b7",
              "index": 2,
              "title": "Irish League",
              "isOptional": false,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-02-03T19:16:54.162Z",
              "updatedAt": "2021-05-03T10:31:26.198Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e3871a9a14e59674c48f27d",
                    "programmingLanguage": "python",
                    "text": "Consider again the \"Irish League\" example from the lecture:\n\n```python\nteams = [\"Connacht\", \"Ulster\", \"Munster\", \"Leinster\"]\nfor home in teams:\n\tfor guest in teams:\n\t\tif home != guest:\n\t\t\tprint(f\"{home} : {guest}\")\n```\n\nAdd another list at the beginning:\n\n```python\ndates = [\"June 1\", \"June 3\", \"June 2\", \"June 4\", \"June 6\", \"June 5\", \\\n\"June 7\", \"June 9\", \"June 8\", \"June 10\", \"June 11\", \"June 12\"]\n```\n\nThen adapt the code so that it does not only print the pairings, but also the date on which the match shall take place (using the dates in the list in the order they appear there). The output should then be:\n\n```\nConnacht : Ulster (June 1)\nConnacht : Munster (June 3)\nConnacht : Leinster (June 2)\nUlster : Connacht (June 4)\nUlster : Munster (June 6)\nUlster : Leinster (June 5)\nMunster : Connacht (June 7)\nMunster : Ulster (June 9)\nMunster : Leinster (June 8)\nLeinster : Connacht (June 10)\nLeinster : Ulster (June 11)\nLeinster : Munster (June 12)\n```",
                    "solution": "```python\n# list containing teams and match dates\nteams = [\"Connacht\", \"Ulster\", \"Munster\", \"Leinster\"] \ndates = [\"June 1\", \"June 3\", \"June 2\", \"June 4\", \"June 6\", \"June 5\", \\\n         \"June 7\", \"June 9\", \"June 8\", \"June 10\", \"June 11\", \"June 12\"]\n\n# print all match pairings and dates\ni = 0\nfor home in teams: \n    for guest in teams: \n        if home != guest: \n            print(f\"{home} : {guest} ({dates[i]})\")\n            i += 1",
                    "template": "# list containing teams and match dates\nteams = [\"Connacht\", \"Ulster\", \"Munster\", \"Leinster\"] \ndates = [\"June 1\", \"June 3\", \"June 2\", \"June 4\", \"June 6\", \"June 5\", \\\n         \"June 7\", \"June 9\", \"June 8\", \"June 10\", \"June 11\", \"June 12\"]\n         \n# print all match pairings and dates\n# (fill this in)"
                  }
                ]
              },
              "publicKey": "xvhi7svdo5wkoli6j2da"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe3468230795365d97b55ff",
              "languages": [],
              "searchString": "Room Occupancy room occupancy roomoccupancy",
              "moduleId": "5fe34682307953d9cc7b55b7",
              "index": 5,
              "title": "Room Occupancy",
              "isOptional": false,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-02-03T19:25:13.209Z",
              "updatedAt": "2021-05-03T10:31:26.245Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e38739dd168a1b52139d7b1",
                    "programmingLanguage": "python",
                    "text": "Imagine a small hostel with four four-bed rooms (with the arbitrarily chosen numbers 101, 102, 201, and 202). You want to write a little program for the hostel staff to help them keep track of the room occupancy and checking guests in and out. The code for the user interaction already exists (see below), but you still need to implement the missing functions:\n\n* `print_occupancy` should simply print out a list of all rooms and the guests that are currently checked in.\n* `check_in` should add a guest to a room. If a non-existing room number is\ngiven or if the chosen room is already full, a corresponding message should be printed. There can be two guests with the same name in one room.\n* `check_out` should remove a guest from a room. If a wrong room number or\nguest name is passed, a corresponding message should be printed.\n\nThe code of a possible main program is included in the template below. It hows how the functions are used, and you can also use it to test your implementation.",
                    "solution": "```python\n# function that prints the current room occupancy\ndef print_occupancy(ro):\n    rooms = list(ro.keys())\n    rooms.sort()\n    for room in rooms:\n        print(f\"{room}: {ro[room]}\")\n\n# function for checking in a guest to a room\ndef checkin(ro, guest, room):\n    if room in ro:\n        if len(ro[room]) < 4:\n            ro[room].append(guest)\n        else:\n            print(f\"Room {room} is already full.\")\n    else:\n        print(\"Room {room} does not exist.\")\n\n# function for checking out a guest from a room\ndef checkout(ro, guest, room):\n    if room in ro:\n        if guest in ro[room]:\n            ro[room].remove(guest)\n        else:\n            print(f\"{guest} is not a guest in room {room}.\")\n    else:\n        print(\"Room {room} does not exist.\")\n\n\n# Main program\nroom_occupancy = {101:[], 102:[], 201:[], 202:[]}\n\nwhile True:\n    print(\"These are your options:\")\n    print(\"1 - View current room occupancy.\")\n    print(\"2 - Check guest in.\")\n    print(\"3 - Check guest out.\")\n    print(\"4 - Exit program.\")\n    choice = input(\"Please choose what you want to do: \")\n\n    if choice == \"1\":\n        print_occupancy(room_occupancy)\n    elif choice == \"2\":\n        guest = input(\"Enter name of guest: \")\n        room = int(input(\"Enter room number: \"))\n        checkin(room_occupancy, guest, room)\n    elif choice == \"3\":\n        guest = input(\"Enter name of guest: \")\n        room = int(input(\"Enter room number: \"))\n        checkout(room_occupancy, guest, room)\n    elif choice == \"4\":\n        print(\"Goodbye!\")\n        break\n    else:\n        print(\"Invalid input, try again.\")",
                    "template": "# function that prints the current room occupancy\ndef print_occupancy(ro):\n    # (fill this in)\n    \n# function for checking in a guest to a room\ndef checkin(ro, guest, room):\n    # (fill this in)\n    \n# function for checking out a guest from a room\ndef checkout(ro, guest, room):\n    # (fill this in)\n    \n# Main program\nroom_occupancy = {101:[], 102:[], 201:[], 202:[]}\nwhile True:\n\tprint(\"These are your options:\")\n\tprint(\"1 - View current room occupancy.\")\n\tprint(\"2 - Check guest in.\")\n\tprint(\"3 - Check guest out.\")\n\tprint(\"4 - Exit program.\")\n\tchoice = input(\"Please choose what you want to do: \")\n\n\tif choice == \"1\":\n\t\tprint_occupancy(room_occupancy)\n\telif choice == \"2\":\n\t\tguest = input(\"Enter name of guest: \")\n\t\troom = int(input(\"Enter room number: \"))\n\t\tcheck_in(room_occupancy, guest, room)\n\telif choice == \"3\":\n\t\tguest = input(\"Enter name of guest: \")\n\t\troom = int(input(\"Enter room number: \"))\n\t\tcheck_out(room_occupancy, guest, room)\n\telif choice == \"4\":\n\t\tprint(\"Goodbye!\")\n\t\tbreak\n\telse:\n\t\tprint(\"Invalid input, try again.\")"
                  }
                ]
              },
              "publicKey": "rayog023t157cm895aom"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe34682307953dfdd7b55fd",
              "languages": [],
              "searchString": "List of Fibonacci Numbers list of fibonacci numbers listoffibonaccinumbers",
              "moduleId": "5fe34682307953d9cc7b55b7",
              "index": 3,
              "title": "List of Fibonacci Numbers",
              "isOptional": false,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-02-03T19:19:07.421Z",
              "updatedAt": "2021-05-03T10:31:26.277Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [
                      {
                        "id": "wuxfesifzpinglbu",
                        "type": "unitTest",
                        "tests": [
                          {
                            "id": "9qrzhCCk6JBQg7nKJzoS",
                            "name": "test_fib_0",
                            "description": "The result of fib(0) should be a list \\[1\\].",
                            "isCode": false,
                            "code": "fib(0) == [1]"
                          },
                          {
                            "id": "hkL1Ro3tLMfF5Yuc7RVA",
                            "name": "test_fib_1",
                            "description": "The result of fib(1) should be a list \\[1,1\\].",
                            "isCode": false,
                            "code": "fib(1) == [1,1]"
                          },
                          {
                            "id": "9zVrbIi7kMBgkv79FVUT",
                            "name": "test_fib_2",
                            "description": "The result of fib(2) should be a list \\[1,1,2\\].",
                            "isCode": false,
                            "code": "fib(2) == [1,1,2]"
                          },
                          {
                            "id": "jF2rmUi8hjZhkWlBkq4s",
                            "name": "test_fib_12",
                            "description": "The result of fib(12) should be a list \\[1,1,2,3,5,8,13,21,34,55,89,144,233\\].",
                            "isCode": false,
                            "code": "fib(12) == [1,1,2,3,5,8,13,21,34,55,89,144,233]"
                          },
                          {
                            "id": "Lh66vb492TVBw0j2G7UQ",
                            "name": "test_fib_negative",
                            "description": "The result of fib(-1) should be None.",
                            "isCode": false,
                            "code": "fib(-1) == None"
                          }
                        ]
                      }
                    ],
                    "_id": "5e38722ea14e59792148f27f",
                    "programmingLanguage": "python",
                    "text": "Implement a function `fib(n)` that returns a list with the first `n` Fibonacci numbers. If `n==0`, it should directly return the list `[1]`, if `n==1`, it should return `[1,1]`, and if `n>1` it should use `[1,1]` as a start and compute Fibonacci numbers `2` to `n` by always adding the two predecessors in the list. If `n` is not an integer greater or equal to 0, the function should simply return `None`.",
                    "solution": "```python\n# function that writes the first n fibonacci numbers into a list\ndef fib(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1,1]\n    elif n > 1:\n        numbers = [1,1]\n        next_index = 2\n        while next_index <= n:\n            numbers.append(numbers[next_index-1]+numbers[next_index-2])\n            next_index = next_index + 1\n        return numbers\n    else:\n        return None\n\n# test program\nprint(fib(0))\nprint(fib(1))\nprint(fib(2))\nprint(fib(12))\nprint(fib(-1))",
                    "template": "def fib(n):\n    # (fill this in)\n\n# test program\nprint(fib(0))\nprint(fib(1))\nprint(fib(2))\nprint(fib(12))\nprint(fib(-1))"
                  }
                ]
              },
              "publicKey": "4wtcnk4dontppb2ein1q"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe3468230795330907b560c",
              "languages": [],
              "searchString": "Error Handling error handling errorhandling",
              "moduleId": "5fe3468230795362387b55c3",
              "index": 5,
              "title": "Error Handling",
              "isOptional": false,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-02-18T12:00:23.141Z",
              "updatedAt": "2021-05-03T10:31:26.161Z",
              "__v": 1,
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5e4bd1e69bb924f73b48128a",
                    "text": "If you have not done it yet, add adequate \"try and except\" error handling to your code for the four coding exercises of this module. \n\nInclude it in all code that you write from now on, at least when dealing with user inputs, file reading/writing operations, and accessing resources or services on the web."
                  }
                ]
              },
              "publicKey": "0d1vb3opmxvubpbgujs1"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe346823079537d637b560a",
              "languages": [],
              "searchString": "Randomized Story-Telling randomized story-telling randomized story telling randomizedstorytelling",
              "moduleId": "5fe3468230795362387b55c3",
              "index": 3,
              "title": "Randomized Story-Telling",
              "isOptional": false,
              "difficulty": 0,
              "files": [
                {
                  "_id": "5fe346823079533fc17b563c",
                  "label": "inputs",
                  "mimetype": "text/csv",
                  "extension": ".csv",
                  "createdAt": "2020-12-23T13:30:43.932Z",
                  "updatedAt": "2020-12-23T13:30:43.932Z"
                }
              ],
              "createdAt": "2020-02-18T11:50:29.040Z",
              "updatedAt": "2021-05-03T10:31:26.171Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e4bcf889bb92475ce481282",
                    "programmingLanguage": "python",
                    "text": "One of the simple pen-and-paper games I remember from my childhood days goes as follows: A paper sheet is divided into four columns for the questions “Who?”, “Does what?”, “How?” and “Where?”. The first player would write down a person in the first column, then fold it away, the second would fill in a verb, fold it away, etc. After the fourth column has been filled, the complete sentence is read out. It could then be something like *“My brother is showering happily at the gas station.”* \n\nWrite a program that creates a user-defined number of such random sentences. The file “inputs.csv” contains a list of possible answers to all of the four questions. Take the values from there. Feel free to add further words to the CSV file to create more variation. \n\nThe output of the program should be something like:\n\n```\nHow many sentences do you want to create? 3\nMy granny is drinking massively at the fair.\nThe butcher is travelling aggressively in bed.\nMy grandpa is reading nicely in the bathroom.\n```\n```button\n\tlabel: inputs\n\ttext: Download inputs.csv\n",
                    "solution": "```python\nimport pandas as pd\nimport sys\nimport random\n\n# set path to input file\ninfile = \"inputs.csv\"\n\ntry:\n    # read input file as dataframe\n    df_in = pd.read_csv(infile, sep=\",\")\n\n# for any error, display the exception message\nexcept Exception as err:\n    print(\"Something went wrong...\")\n    print(err) \n    sys.exit()\n\n\n# ask user how many sentences should be created\nwhile True:\n    try:\n        number = int(input(\"How many sentences do you want to create? \"))\n        break\n    except ValueError:\n        print(\"That was no valid number. Try again.\") \n    \n# create the desired number of sentences\nwhile number > 0:\n\n    # select a random value for each of the four sentence elements\n    who = df_in.loc[random.randint(0,df_in[\"who\"].size-1),\"who\"]\n    does_what = df_in.loc[random.randint(0,df_in[\"does what\"].size-1),\"does what\"]\n    how = df_in.loc[random.randint(0,df_in[\"how\"].size-1),\"how\"]\n    where = df_in.loc[random.randint(0,df_in[\"where\"].size-1),\"where\"]\n    \n    print(f\"{who} {does_what} {how} {where}.\")\n\n    number -= 1"
                  }
                ]
              },
              "publicKey": "p9i5s45jnxrdcui680qc"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe3468230795335147b5608",
              "languages": [],
              "searchString": "Interview Anonymization interview anonymization interviewanonymization",
              "moduleId": "5fe3468230795362387b55c3",
              "index": 1,
              "title": "Interview Anonymization",
              "isOptional": false,
              "difficulty": 0,
              "files": [
                {
                  "_id": "5fe3468230795332cf7b5652",
                  "label": "interview-with-a-syrian-refugee",
                  "mimetype": "text/plain",
                  "extension": ".txt",
                  "createdAt": "2020-12-23T13:30:43.958Z",
                  "updatedAt": "2020-12-23T13:30:43.958Z"
                }
              ],
              "createdAt": "2020-02-18T09:16:57.976Z",
              "updatedAt": "2021-05-03T10:31:26.323Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e4bab8d0efbad4b024a597b",
                    "programmingLanguage": "python",
                    "text": "Imagine you are a journalist, and you have written a text about an interview with somebody. Because the person wants to go unrecognized, you have to replace their name by a fictive one everywhere in the text before it gets published.\n\nWrite a Python program that reads the file containing the interview text, replaces all occurrences of the original name by a new one (the `str.replace()` function can be used here), and saves the changed text in the file. \n\nYou can download and use the example text file \"interview-with-a-syrian-refugee.txt\" or create an own one.\n```button \n\tlabel: \tinterview-with-a-syrian-refugee\n\ttext: \tDownload example text file\n```",
                    "solution": "```python\n# set file names\ninterview_file = \"interview-with-a-syrian-refugee.txt\"\nnew_file = \"interview-with-a-syrian-refugee-anonymized.txt\"\n\ntry:\n    # read original interview text from file\n    with open(interview_file, \"r\") as file:\n        text = file.read()\n\n    # write obfuscated interview text to file\n    with open(new_file, \"w\") as file:\n        file.write(text.replace(\"Samira\",\"Amal\"))\n\n# if interview file is not found, inform user accordingly\nexcept FileNotFoundError:\n    print(f\"File {interview_file} not found.\")\n\n# for any other error, display the exception message\nexcept Exception as err:\n    print(\"Something went wrong...\")\n    print(err)"
                  }
                ]
              },
              "publicKey": "1k7swuho3kbm1px90ws9"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe34682307953dd247b5609",
              "languages": [],
              "searchString": "Longest Word longest word longestword",
              "moduleId": "5fe3468230795362387b55c3",
              "index": 2,
              "title": "Longest Word",
              "isOptional": false,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-02-18T10:56:50.692Z",
              "updatedAt": "2021-05-03T10:31:26.426Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e4bc2fe9bb9245d7c48127e",
                    "programmingLanguage": "python",
                    "text": "Reuse your code from the \"Text Analysis\" exercise (Module 5) to create a function that finds the longest word in a given text. Apply it to the text file that you used for the previous exercise (\"Interview Anonymization\"). The output should be something like:\n\n`The longest word in the text is \"responsibility\".`\n",
                    "solution": "```python\n# function to find the longest word in a text\ndef find_longest_word(text):\n    # initialize running length counter and word\n    length = 0\n    word = \"\"\n    \n    # initialize variables for storing the max. length and longest word\n    max_length = 0\n    longest_word = \"\"\n    \n    # for all characters in the text ...\n    for character in text:\n        \n        # check if the character is a letter (part of a word).\n        if character.isalpha():\n            # if yes, increment the length counter and \n            # add the character to the word to remember\n            length += 1\n            word += character\n        else:\n            # if not, check if the last word was longer then the previous longest word\n            if length > max_length:\n                # if yes, remember the new max. length and longest word\n                max_length = length\n                longest_word = word\n            # reset running variables\n            length = 0\n            word = \"\"\n    \n    return longest_word\n    \n# main program\ntext_file = \"interview-with-a-syrian-refugee.txt\"\n\ntry:\n    # read original interview text from file\n    with open(text_file, \"r\") as file:\n        text = file.read()\n\n# if input file is not found, inform user accordingly\nexcept FileNotFoundError:\n    print(f\"File {text_file} not found.\")\n\n# for any other error, display the exception message\nexcept Exception as err:\n    print(\"Something went wrong...\")\n    print(err)\n    \n# print result\nprint(f\"The longest word in the text is \\\"{find_longest_word(text)}\\\".\")\n",
                    "template": "# function to find the longest word in a text\ndef find_longest_word(text):\n    # (insert code to implement the function here)\n    # ...\n    return longest_word\n    \n# main program \ntext_file = \"interview-with-a-syrian-refugee.txt\"\n# (insert code to read the file and apply function here)"
                  }
                ]
              },
              "publicKey": "fjw1mzsciipjtsaekb86"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe34682307953569b7b560d",
              "languages": [],
              "searchString": "Algorithmic Poetry algorithmic poetry algorithmicpoetry",
              "moduleId": "5fe3468230795362387b55c3",
              "index": 6,
              "title": "Algorithmic Poetry",
              "isOptional": true,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-02-18T12:04:59.675Z",
              "updatedAt": "2021-05-03T10:31:26.443Z",
              "__v": 1,
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5e4bd2ef9bb924c95c48128e",
                    "text": "The storytelling exercise was hopefully a bit of fun, but of course we generated a very simple kind of prose text there. The website https://eh.bard.edu/2016/11/07/generating-algorithmic-poetry/ shows how to use Python to automatically generate poems in the style\nof Shakespeare or Dickinson. Have a look if you find that interesting!"
                  }
                ]
              },
              "publicKey": "cv07ynytigq0ks3s9u63"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe3468230795394b67b560b",
              "languages": [],
              "searchString": "Murders per Province murders per province murdersperprovince",
              "moduleId": "5fe3468230795362387b55c3",
              "index": 4,
              "title": "Murders per Province",
              "isOptional": false,
              "difficulty": 0,
              "files": [
                {
                  "_id": "5fe3468330795348007b5682",
                  "label": "dutch_municipalities",
                  "mimetype": "text/csv",
                  "extension": ".csv",
                  "createdAt": "2020-12-23T13:30:44.004Z",
                  "updatedAt": "2020-12-23T13:30:44.004Z"
                }
              ],
              "createdAt": "2020-02-18T11:56:24.371Z",
              "updatedAt": "2021-05-03T10:31:26.490Z",
              "__v": 1,
              "hideSolutions": true,
              "metadata": {
                "content": [
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e4bd0eb9bb924480b481286",
                    "programmingLanguage": "python",
                    "text": "Write a Python program that reads in the CSV file \"dutch_municipalities.csv\" that we already used in the lecture. Sum up the murders and inhabitants for each province and write the result into a new CSV file \"dutch_provinces.csv”, in alphabetical order of the province names. \n\nIts content should look like:\n\n```\nprovince,population,murders\nDrenthe,488892,0\nFlevoland,400179,5\nFriesland,580537,2\n[...]\nUtrecht,1254034,6\nZeeland,380619,3\nZuid-Holland,3579503,22\n```\n\n```button\n\tlabel: dutch_municipalities\n\ttext: Download dutch_municipalities.csv\n\t\n\t",
                    "solution": "```python\nimport pandas as pd\nimport sys\n\n# set paths to input and output file\ninfile = \"dutch_municipalities.csv\"\noutfile = \"provinces_and_murders.csv\"\n\ntry:\n    # read input file as dataframe\n    df_in = pd.read_csv(infile, sep=\"\\t\")\n\n# for any error, display the exception message\nexcept Exception as err:\n    print(\"Something went wrong...\")\n    print(err) \n    sys.exit()\n\n# init new empty dataframe with the wanted columns\ndf_out = pd.DataFrame(columns=[\"province\", \"population\", \"murders\"])\n\n# get province names (as sorted set)\nprovinces = sorted(set(df_in[\"province\"]))\n\n# for all provinces ...\nfor province in provinces:\n    # get the part of the dataframe for the province\n    df_province = df_in[df_in[\"province\"]==province]\n    \n    # sum up murders and population and add to new data frame\n    df_out = df_out.append({\"province\":province,\\\n                            \"population\":df_province[\"population\"].sum(),\\\n                            \"murders\":df_province[\"murders_2014\"].sum()},\\\n                            ignore_index=True)\n  \ntry:\n    # save new dataframe as csv file\n    df_out.to_csv(outfile, index=False)\n\n# for any error, display the exception message\nexcept Exception as err:\n    print(\"Something went wrong...\")\n    print(err) \n    sys.exit()\n    \n\n# Another possible, but longer solution is with the csv package and \n# dictionaries, as shown below (without try/except error handling).\n#\n# import csv\n#\n## create two empty dictionaries to collect the aggregated data\n#murders_per_province = {}\n#population_per_province = {}\n#\n## read in the data and iterate over all rows, adding up\n## population and murder numbers per province\n#with open(\"dutch_municipalities.csv\", \"r\") as csvfile:\n#    csvreader = csv.DictReader(csvfile, delimiter='\\t')\n#    for row in csvreader:\n#        if row[\"province\"] not in murders_per_province:\n#            murders_per_province[row[\"province\"]] = int(row[\"murders_2014\"])\n#        else:\n#            murders_per_province[row[\"province\"]] += int(row[\"murders_2014\"])\n#        if row[\"population\"] != \"\":\n#            if row[\"province\"] not in population_per_province:\n#                    population_per_province[row[\"province\"]] = \\\n#                        int(row[\"population\"])\n#            else:\n#                population_per_province[row[\"province\"]] += \\\n#                        int(row[\"population\"])\n#\n## write aggregated data into new CSV file\n#with open(\"provinces_and_murders.csv\", \"w\") as csvfile:\n#    csvwriter = csv.DictWriter(csvfile, fieldnames=[\"province\", \\\n#                                \"population\", \"murders\"], delimiter=\",\")\n#    csvwriter.writeheader()\n#    for province in sorted(murders_per_province):\n#        csvwriter.writerow({\"province\":province, \\\n#            \"population\":population_per_province[province],\\\n#            \"murders\":murders_per_province[province]})"
                  }
                ]
              },
              "publicKey": "qiw7toq0xvivskquhabm"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe34682307953578d7b5607",
              "languages": [],
              "searchString": "Lecture Notes lecture notes lecturenotes",
              "moduleId": "5fe3468230795362387b55c3",
              "index": 0,
              "title": "Lecture Notes",
              "isOptional": false,
              "difficulty": 0,
              "files": [
                {
                  "_id": "5fe346833079538d3c7b567e",
                  "label": "Module8-LectureNotes",
                  "mimetype": "application/pdf",
                  "extension": ".pdf",
                  "createdAt": "2020-12-23T13:30:44.000Z",
                  "updatedAt": "2020-12-23T13:30:44.000Z"
                }
              ],
              "createdAt": "2020-02-18T09:15:32.548Z",
              "updatedAt": "2021-05-03T10:31:26.518Z",
              "__v": 1,
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5e4bab385d040ea586c014e6",
                    "text": "```file\n\tlabel: Module8-LectureNotes\t\n```"
                  }
                ]
              },
              "publicKey": "dxlhby2sltek11qo8eqv"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe34682307953a1827b5604",
              "searchString": "Calling REST Web Services with POST calling rest web services with post callingrestwebserviceswithpost",
              "moduleId": "5fe346823079536e967b55b9",
              "index": 3,
              "title": "Calling REST Web Services with POST",
              "isOptional": false,
              "difficulty": 0,
              "files": [
                {
                  "_id": "5fe3468230795369827b5636",
                  "label": "qrcode",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 250,
                  "cropWidth": 250,
                  "createdAt": "2020-12-23T13:30:43.926Z",
                  "updatedAt": "2020-12-23T13:30:43.926Z"
                }
              ],
              "createdAt": "2020-03-17T16:29:19.607Z",
              "updatedAt": "2021-05-03T10:31:26.006Z",
              "__v": 1,
              "hideSolutions": true,
              "publicKey": "4pp68rhicjo63zr28hp2"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe3468230795307cb7b5602",
              "searchString": "Reading Content from the Web reading content from the web readingcontentfromtheweb",
              "moduleId": "5fe346823079536e967b55b9",
              "index": 1,
              "title": "Reading Content from the Web",
              "isOptional": false,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-03-17T16:17:30.331Z",
              "updatedAt": "2021-05-03T10:31:26.207Z",
              "__v": 1,
              "hideSolutions": true,
              "publicKey": "mcyhazbg341ze1hrf4o8"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe346823079538e9e7b5601",
              "searchString": "Lecture Notes lecture notes lecturenotes",
              "moduleId": "5fe346823079536e967b55b9",
              "index": 0,
              "title": "Lecture Notes",
              "isOptional": false,
              "difficulty": 0,
              "files": [
                {
                  "_id": "5fe34682307953342c7b564c",
                  "label": "simple",
                  "mimetype": "text/xml",
                  "extension": ".xml",
                  "createdAt": "2020-12-23T13:30:43.955Z",
                  "updatedAt": "2020-12-23T13:30:43.955Z"
                },
                {
                  "_id": "5fe34682307953e3f37b564d",
                  "label": "esearch",
                  "mimetype": "text/xml",
                  "extension": ".xml",
                  "createdAt": "2020-12-23T13:30:43.955Z",
                  "updatedAt": "2020-12-23T13:30:43.955Z"
                },
                {
                  "_id": "5fe3468230795369317b564e",
                  "label": "Module11-LectureNotes",
                  "mimetype": "application/pdf",
                  "extension": ".pdf",
                  "createdAt": "2020-12-23T13:30:43.955Z",
                  "updatedAt": "2020-12-23T13:30:43.955Z"
                }
              ],
              "createdAt": "2020-03-17T16:15:04.969Z",
              "updatedAt": "2021-05-03T10:31:26.314Z",
              "__v": 1,
              "publicKey": "uej9b94t7hytkfc3j9aa"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe34682307953ad407b5603",
              "searchString": "Calling REST Web Services with GET calling rest web services with get callingrestwebserviceswithget",
              "moduleId": "5fe346823079536e967b55b9",
              "index": 2,
              "title": "Calling REST Web Services with GET",
              "isOptional": false,
              "difficulty": 0,
              "files": [],
              "createdAt": "2020-03-17T16:23:11.910Z",
              "updatedAt": "2021-05-03T10:31:26.434Z",
              "__v": 1,
              "hideSolutions": true,
              "publicKey": "qpd8j0ia23okd0tvpaqp"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe34682307953122f7b560f",
              "languages": [],
              "searchString": "Analysis of the McDonald’s Menu analysis of the mcdonald’s menu analysis of the mcdonald s menu analysisofthemcdonaldsmenu analysis of the mcdonalds menu analysis of the mcdonald menu",
              "moduleId": "5fe3468230795337487b55d8",
              "index": 1,
              "title": "Analysis of the McDonald’s Menu",
              "isOptional": false,
              "difficulty": 0,
              "files": [
                {
                  "_id": "5fe34682307953220f7b5640",
                  "label": "mcdonalds_menu",
                  "mimetype": "text/csv",
                  "extension": ".csv",
                  "createdAt": "2020-12-23T13:30:43.942Z",
                  "updatedAt": "2020-12-23T13:30:43.942Z"
                },
                {
                  "_id": "5fe3468230795358967b5641",
                  "label": "q1",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 358,
                  "cropWidth": 371,
                  "createdAt": "2020-12-23T13:30:43.942Z",
                  "updatedAt": "2020-12-23T13:30:43.942Z"
                },
                {
                  "_id": "5fe3468230795334127b5642",
                  "label": "q2",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 376,
                  "cropWidth": 389,
                  "createdAt": "2020-12-23T13:30:43.942Z",
                  "updatedAt": "2020-12-23T13:30:43.942Z"
                },
                {
                  "_id": "5fe346823079536aac7b5643",
                  "label": "q4",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 476,
                  "cropWidth": 378,
                  "createdAt": "2020-12-23T13:30:43.942Z",
                  "updatedAt": "2020-12-23T13:30:43.942Z"
                },
                {
                  "_id": "5fe34682307953c2fb7b5644",
                  "label": "q6",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 711,
                  "cropWidth": 728,
                  "createdAt": "2020-12-23T13:30:43.942Z",
                  "updatedAt": "2020-12-23T13:30:43.942Z"
                }
              ],
              "createdAt": "2020-02-18T12:14:49.894Z",
              "updatedAt": "2021-05-03T10:31:26.287Z",
              "__v": 1,
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5e4bd58a9bb9244c6448129c",
                    "text": "This exercise is a variation of one that Adrien Melquiond (Utrecht Bioinformatics Center) developed in the scope of another Python course. It uses the Pandas and NumPy libraries to analyze the dataset in the file “mcdonalds_menu.csv”, which provides a nutrition analysis of every menu item on the US McDonald's menu (including breakfast, beef burgers, chicken and fish sandwiches, fries, salads, soda, coffee and tea, milkshakes, and desserts). These data have been scraped from the McDonald's website. The assignment is basically about exploring how much fat and other nutrients are contained in McDonald’s food. \n\n```button\n\tlabel: mcdonalds_menu\n\ttext: Download mcdonalds_menu.csv\n```\n\nYou can use the following code (which reads the content of the file into a data frame and displays simple descriptive statistics about the numerical values in the data frame) as a basis for writing the code to answer the six questions below. Note that you might need Google’s help for some, and number 2 is probably the most difficult one.\n\n```python\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# import menu and display the first two rows of the dataframe\nmenu = pd.read_csv(\"mcdonalds_menu.csv\")\nprint(menu.head(5))\n\n# display simple statistics about the data frame\nprint(menu.describe())"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e4bd7469bb9249a4f4812a1",
                    "programmingLanguage": "python",
                    "text": "Question 1: **What do we have on the menu?**\n\nHow many different items do we have on the menu? Print out the number of items. It should be something like:\n```\nTotal number of items: 260\n```\n\nWhich category is the most represented in this menu? Use a barplot to display the number of items per category. It should look something like:\n```file\n\tlabel: q1\n\tsize: small",
                    "solution": "```python\n# determine and print number of items \nprint(\"Total number of items:\", len(menu.Item.unique()))\n\n# create and show barplot of categories\nmenu.groupby('Category')['Item'].count().plot(kind='bar')\nplt.show()\n",
                    "template": "# determine and print number of items \n# (fill this in)\n\n# create and show barplot of categories\n# (fill this in)\nplt.show()"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e4bd8069bb924181a4812a2",
                    "programmingLanguage": "python",
                    "text": "Question 2: **What is the most fatty item for each category?**\n\nBackground information: When it comes to fat, trans fats are really the ones to avoid. Trans fat is a byproduct of a process called hydrogenation that is used to turn healthy oils into solids and to prevent them from becoming rancid. It increases the amount of harmful LDL cholesterol in the bloodstream. Cholesterol can be either good (HDL) or bad (LDL) but chances are slim that we are talking about the good one here. Saturated fat is not necessarily bad, but diet rich in saturated fat can drive up total cholesterol, with increased risk of clogged arteries. Unsaturated fat are not reported in this table.\n\nFirst, use a boxplot to show the spread of 'Total Fat (% Daily Value)' values per category. This should look something like:\n```file\n\tlabel: q2\n\tsize: small\n```\n\nThen create a subset data frame, called `grp_by_category`, that lists per category the maximal amount of 'Total Fat (% Daily Value)','Trans Fat','Saturated Fat (% Daily Value)' and 'Cholesterol (% Daily Value)'. \nThe result should look something like: \n```\n             Category  Max_Fat    ...   Max_Sat_Fat  Max_Cholestrol\n0         Beef & Pork       66    ...            96              53\n1           Beverages        4    ...             8               3\n2           Breakfast       93    ...           100             192\n3      Chicken & Fish      182    ...           101              89\n4        Coffee & Tea       48    ...           101              32\n5            Desserts       19    ...            35              10\n6              Salads       33    ...            29              29\n7  Smoothies & Shakes       50    ...           102              30\n8      Snacks & Sides       37    ...            27              16\n[9 rows x 5 columns]\n```\n\nMerge the data frames `menu` and `grp_by_category` and create a mask to select the items that correspond to the maximal 'Total Fat (% Daily Value)'. Be careful, you may end up with more than one fattest item per category. The result should look something like: \n```\n\t\t       Category     ...     Cholesterol (% Daily Value)\n32            Breakfast     ...                             192\n47          Beef & Pork     ...                              53\n82       Chicken & Fish     ...                              89\n85               Salads     ...                              23\n88               Salads     ...                              17\n98       Snacks & Sides     ...                               0\n103            Desserts     ...                               0\n130           Beverages     ...                               3\n231        Coffee & Tea     ...                              32\n253  Smoothies & Shakes     ...                              25\n258  Smoothies & Shakes     ...                              20\n[11 rows x 4 columns]\n```\n\nRepeating the same process, extract now the fattest item in 'Trans fat' (make sure to select only items with Trans fat > 0). Sort them by decreasing order of Trans fat. The result should look something like: \n```\n               Category        ...   Cholesterol (% Daily Value)\n47          Beef & Pork        ...                            53\n26            Breakfast        ...                            99\n228        Coffee & Tea        ...                            32\n231        Coffee & Tea        ...                            32\n247  Smoothies & Shakes        ...                            20\n256  Smoothies & Shakes        ...                            19\n[…]\n241  Smoothies & Shakes        ...                            20\n82       Chicken & Fish        ...                            89\n258  Smoothies & Shakes        ...                            20\n[19 rows x 6 columns]\n\n```\n",
                    "solution": "```python\n# create and show boxplot to show the spread of total fat per category\nmenu.boxplot(column=['Total Fat (% Daily Value)'], by=['Category'], rot=90)\nplt.show()\n\n# group by category\ngrp_by_category = menu[['Category', 'Total Fat (% Daily Value)','Trans Fat','Saturated Fat (% Daily Value)', 'Cholesterol (% Daily Value)' ]].groupby(['Category']).max() #extracting the wanted columns, grouping by categories and calculating the max\ngrp_by_category.reset_index(inplace=True) #resetting the index (otherwise category is the new index and it messes up with merge)\ngrp_by_category.columns=['Category', 'Max_Fat', 'Max_Trans_Fat', 'Max_Sat_Fat', 'Max_Cholestrol'] #renaming the columns\nprint(grp_by_category) #displaying the new dataframe\n\n# merge menu and data frame grouped by category\ndf = menu.merge(grp_by_category) #merging the two dataframes by the only common column (\"Category\")\nmask = df['Total Fat (% Daily Value)'] == df.Max_Fat #creating the mask that will be used for the selection\nfatty_menu = df.loc[mask, ['Category','Item','Total Fat (% Daily Value)','Cholesterol (% Daily Value)']] #selection the items that correspond to the max of total fat (%daily value) per category\nprint(fatty_menu) #displaying the dataframe\n\n# extract fattest item in 'Trans Fat'\ntrans_menu = df.loc[(df['Trans Fat'] == df.Max_Trans_Fat) & (df['Trans Fat']>0)][['Category','Item','Total Fat (% Daily Value)','Trans Fat','Saturated Fat (% Daily Value)','Cholesterol (% Daily Value)']] #creating a new filter\nprint(trans_menu.sort_values(by='Trans Fat',ascending=False)) #displaying the dataframe sorted by Trans Fat (decreasing order)",
                    "template": "# create and show boxplot to show the spread of total fat per category\n# ((fill this in)\nplt.show()\n\n# group by category\n# (fill this in)\nprint(grp_by_category) #displaying the new dataframe\n\n# merge menu and data frame grouped by category\n# (fill this in)\nprint(fatty_menu) #displaying the dataframe\n\n# extract fattest item in 'Trans Fat'\n# (fill this in)\nprint(trans_menu) #displaying the dataframe"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e4bd8bf9bb92448724812a3",
                    "programmingLanguage": "python",
                    "text": "Question 3: **Is there anything healthy on the menu?**\n\nSearch for items with 0 'Trans fat' and 'Cholesterol (% Daily Value)', and maximum 20 'Sugars' and 'Total Fat (% Daily Value)'. Sort the healthy items per calories in ascending order. Remove from this healthy data frame all the drinks (beverages, coffee & tea). The result should look something like: \n```\n           Category                Item  Calories\n103        Desserts     Baked Apple Pie       250\n96   Snacks & Sides  Small French Fries       230\n38        Breakfast          Hash Brown       150\n99   Snacks & Sides   Kids French Fries       110\n100  Snacks & Sides          Side Salad        20\n101  Snacks & Sides        Apple Slices        15\n```\n",
                    "solution": "```python\n# create data frame of healthy item s\nhealthy = df.loc[(df['Trans Fat']==0) & (df['Sugars']<20) & (df['Total Fat (% Daily Value)']<=20) & (df['Cholesterol (% Daily Value)']==0), ['Category','Item','Calories']].sort_values('Calories', ascending=False)\nprint(healthy[(healthy['Category']!=\"Beverages\") & (healthy['Category']!=\"Coffee & Tea\")])\n\n",
                    "template": "# create data frame of healthy items\n# (fill this in)\nprint(healthy) #displaying the dataframe\n"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e4bd9ca9bb92429854812a6",
                    "programmingLanguage": "python",
                    "text": "Question 4: **What are the 10 items that have the highest content of Vitamin C?**\n\nCitrus fruits are the high source of Vitamin C. For adults, the recommended dietary reference intake for vitamin C is 65 to 90 milligrams (mg) a day, and the upper limit is 2,000 mg a day. Using pandas' function pivot_table(), make a barplot that shows the 'Vitamin C (% Daily Value)' for the ten items that contain the highest amount of vitamin C. The result should look something like:\n```file\n\tlabel: q4\n\tsize: small\n```\n",
                    "solution": "```python\n# barplot of top 10 vitamin C\npd.pivot_table(menu, index=['Item'], values=['Vitamin C (% Daily Value)']).sort_values(['Vitamin C (% Daily Value)'], ascending=False)[:10].plot(kind=\"bar\")\nplt.show()",
                    "template": "# barplot of top 10 vitamin C\n# (fill this in)\nplt.show()"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e4bda0d9bb924d9874812a7",
                    "programmingLanguage": "python",
                    "text": "Question 5: **What is the best “muscle food” on the menu?**\n\nLet's assume we want to get a lot of proteins but as little sugar as possible. Identify the top three items based on their protein/sugars ratio. The result should look something like: \n```\n          Category      ...      Protein/Sugar\n82  Chicken & Fish      ...               87.0\n3        Breakfast      ...               10.5\n4        Breakfast      ...               10.5\n```",
                    "solution": "```python\n# top 3 muscle food\nmenu['Protein/Sugar'] = np.where(menu['Sugars'] < 1, menu['Sugars'], menu['Protein']/menu['Sugars'])\nprint(menu.sort_values('Protein/Sugar', ascending=False).head(3))",
                    "template": "# get top 3 muscle food\n# (fill me in)\nprint(top_3_muscle_food)"
                  },
                  {
                    "contentType": "codeQuestion",
                    "choices": [],
                    "actions": [],
                    "_id": "5e4bdb419bb92483c24812a8",
                    "programmingLanguage": "python",
                    "text": "Question 6: **How do the nutrition features compare to each other?**\n\nLet's finally take a look at how one feature feeds into the other. Using pandas.plotting.scatter_matrix(), we can plot multiple scatterplots and get a quick feel for the data. Plot a multiple scatterplot for all the following columns in your dataframe: 'Calories', 'Total Fat', 'Saturated Fat', 'Cholesterol', 'Sodium', 'Carbohydrates', 'Sugars', 'Protein'. The result should look something like: \n```file\n\tlabel: q6\n\tsize: small\n```\n\nWhat can you observe from the (anti)correlations of the nutritional metrics?",
                    "solution": "# nutrition feature comparison\nselection = menu.loc[:,['Calories', 'Total Fat', 'Saturated Fat', 'Cholesterol', 'Sodium', 'Carbohydrates', 'Sugars', 'Protein']]\npd.plotting.scatter_matrix(selection, diagonal='kde', figsize=(12,12), grid=True)\nplt.show()",
                    "template": "# create multiple scatter plot for nutrition feature comparison\n# (fill this in)\nplt.show()"
                  }
                ]
              },
              "publicKey": "raw161xdvz6cb6ungk13"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "5fe3468230795308d57b560e",
              "languages": [],
              "searchString": "Lecture Notes lecture notes lecturenotes",
              "moduleId": "5fe3468230795337487b55d8",
              "index": 0,
              "title": "Lecture Notes",
              "isOptional": false,
              "difficulty": 0,
              "files": [
                {
                  "_id": "5fe34683307953e8de7b5680",
                  "label": "Module9-LectureNotes",
                  "mimetype": "application/pdf",
                  "extension": ".pdf",
                  "createdAt": "2020-12-23T13:30:44.002Z",
                  "updatedAt": "2020-12-23T13:30:44.002Z"
                }
              ],
              "createdAt": "2020-02-18T12:13:24.464Z",
              "updatedAt": "2021-05-03T10:31:26.389Z",
              "__v": 1,
              "metadata": {
                "content": [
                  {
                    "contentType": "text",
                    "choices": [],
                    "actions": [],
                    "_id": "5e4bd4e89bb9242d6f481298",
                    "text": "```file\n\tlabel: Module9-LectureNotes\t\n"
                  }
                ]
              },
              "publicKey": "c6mylrg786bqriezxuxb"
            }
          ]
        }
      ],
      "analyticsBlocks": [
        "5fe3468130795366807b55a0",
        "5fe34681307953136f7b55a1",
        "5fe346813079531c0f7b55a2",
        "5fe346813079532b417b55a3",
        "5fe34681307953a0f57b55a4",
        "5fe34681307953dca27b55a5",
        "5fe346813079537b0a7b55a6",
        "5fe346813079535e297b55a7",
        "5fe3468130795318347b55a8",
        "5fe34681307953c6747b55a9",
        "5fe3468130795301427b55aa"
      ],
      "archived": false,
      "demo": false,
      "visible": true,
      "_id": "5fe34681307953cf2a7b559f",
      "closed": false,
      "demoCourse": false,
      "organizationId": "5db2f52467230ad36e8c3cdc",
      "title": "Applications of Machine Learning Python",
      "code": "INFOB3APML",
      "description": "",
      "createdAt": "2019-12-11T10:09:06.848Z",
      "updatedAt": "2020-12-23T13:31:53.064Z",
      "__v": 0,
      "selectedImage": "robot"
    },
    {
      "modules": [
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "60420b8fa2a937cb303d2971",
              "searchString": "UP Quiz up quiz upquiz",
              "moduleId": "60420b8fa2a9377e383d296b",
              "index": 4,
              "title": "UP Quiz",
              "isOptional": false,
              "difficulty": 3,
              "files": [],
              "createdAt": "2020-08-26T15:37:13.310Z",
              "updatedAt": "2021-05-03T10:31:56.745Z",
              "__v": 1,
              "publicKey": "i2a3p4lj7ceduh79fcfh"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "60420b8fa2a93768ad3d2970",
              "searchString": "Videolecture: UML videolecture: uml videolecture uml videolectureuml",
              "moduleId": "60420b8fa2a9377e383d296b",
              "index": 2,
              "title": "Videolecture: UML",
              "isOptional": false,
              "difficulty": 3,
              "files": [
                {
                  "_id": "60420b8fa2a9370ff53d2999",
                  "label": "relation_1",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 344,
                  "cropWidth": 222,
                  "createdAt": "2020-08-26T14:54:59.513Z",
                  "updatedAt": "2020-08-26T14:54:59.513Z"
                },
                {
                  "_id": "60420b8fa2a937a61e3d299a",
                  "label": "relation_2",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 344,
                  "cropWidth": 222,
                  "createdAt": "2020-08-26T14:55:07.404Z",
                  "updatedAt": "2020-08-26T14:55:07.404Z"
                },
                {
                  "_id": "60420b8fa2a93743bb3d299b",
                  "label": "relation_3",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 344,
                  "cropWidth": 222,
                  "createdAt": "2020-08-26T14:55:14.279Z",
                  "updatedAt": "2020-08-26T14:55:14.279Z"
                },
                {
                  "_id": "60420b8fa2a937f97e3d299c",
                  "label": "relation_4",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 344,
                  "cropWidth": 222,
                  "createdAt": "2020-08-26T14:55:24.027Z",
                  "updatedAt": "2020-08-26T14:55:24.027Z"
                },
                {
                  "_id": "60420b8fa2a9370c0c3d299d",
                  "label": "slides",
                  "mimetype": "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                  "extension": ".pptx",
                  "createdAt": "2020-09-04T14:51:56.367Z",
                  "updatedAt": "2020-09-04T14:51:56.367Z"
                }
              ],
              "createdAt": "2020-08-26T13:52:48.241Z",
              "updatedAt": "2021-05-03T10:31:56.763Z",
              "__v": 1,
              "publicKey": "b9reqskgtnxpdh6ptt35"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "60420b8fa2a93732d13d2973",
              "searchString": "Use-cases Quiz use-cases quiz use cases quiz usecasesquiz",
              "moduleId": "60420b8fa2a9377e383d296b",
              "index": 7,
              "title": "Use-cases Quiz",
              "isOptional": false,
              "difficulty": 2,
              "files": [
                {
                  "_id": "60420b8fa2a937da423d29a3",
                  "label": "use-case-airline",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 758,
                  "cropWidth": 1131,
                  "createdAt": "2020-08-28T07:44:02.128Z",
                  "updatedAt": "2020-08-28T07:44:02.128Z"
                }
              ],
              "createdAt": "2020-08-26T15:42:50.538Z",
              "updatedAt": "2021-05-03T10:31:56.771Z",
              "__v": 1,
              "publicKey": "57qz1tl6lkv16ad07vsa"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "60420b8fa2a937284d3d2975",
              "searchString": "Analysis Quiz analysis quiz analysisquiz",
              "moduleId": "60420b8fa2a9377e383d296b",
              "index": 8,
              "title": "Analysis Quiz",
              "isOptional": false,
              "difficulty": 3,
              "files": [],
              "createdAt": "2020-08-28T09:52:18.686Z",
              "updatedAt": "2021-05-03T10:31:56.825Z",
              "__v": 1,
              "publicKey": "f6ged12bvfnaqq43ehvw"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "60420b8fa2a93781b03d296f",
              "searchString": "Videolecture: OO Design videolecture: oo design videolecture oo design videolectureoodesign",
              "moduleId": "60420b8fa2a9377e383d296b",
              "index": 1,
              "title": "Videolecture: OO Design",
              "isOptional": false,
              "difficulty": 3,
              "files": [
                {
                  "_id": "60420b8fa2a937fd363d29ba",
                  "label": "slides",
                  "mimetype": "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                  "extension": ".pptx",
                  "createdAt": "2020-09-04T14:51:32.346Z",
                  "updatedAt": "2020-09-04T14:51:32.346Z"
                }
              ],
              "createdAt": "2020-08-26T13:52:35.416Z",
              "updatedAt": "2021-05-03T10:31:56.861Z",
              "__v": 1,
              "publicKey": "1gvmrou9balqb73xl3wf"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "60420b8fa2a93791823d296e",
              "searchString": "Videolecture: Requirements Engineering videolecture: requirements engineering videolecture requirements engineering videolecturerequirementsengineering",
              "moduleId": "60420b8fa2a9377e383d296b",
              "index": 0,
              "title": "Videolecture: Requirements Engineering",
              "isOptional": false,
              "difficulty": 2,
              "files": [
                {
                  "_id": "60420b8fa2a937965c3d29cf",
                  "label": "slides",
                  "mimetype": "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                  "extension": ".pptx",
                  "createdAt": "2020-09-04T14:51:14.087Z",
                  "updatedAt": "2020-09-04T14:51:14.087Z"
                }
              ],
              "createdAt": "2020-08-26T13:52:18.028Z",
              "updatedAt": "2021-05-03T10:31:56.988Z",
              "__v": 1,
              "publicKey": "r6nu5j9pzhcbd1b7ctw5"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "60420b8fa2a93750e83d2972",
              "searchString": "Requirements Engineering Quiz requirements engineering quiz requirementsengineeringquiz",
              "moduleId": "60420b8fa2a9377e383d296b",
              "index": 5,
              "title": "Requirements Engineering Quiz",
              "isOptional": false,
              "difficulty": 2,
              "files": [],
              "createdAt": "2020-08-26T15:42:50.538Z",
              "updatedAt": "2021-05-03T10:31:56.996Z",
              "__v": 1,
              "publicKey": "naqi9e0354rnnhnd7p40"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "60420b8fa2a93796ff3d296d",
              "searchString": "Shapes shapes",
              "moduleId": "60420b8fa2a9377e383d296b",
              "index": 3,
              "title": "Shapes",
              "isOptional": false,
              "difficulty": 4,
              "files": [
                {
                  "_id": "60420b8fa2a93758373d29d3",
                  "label": "shapes",
                  "mimetype": "image/jpeg",
                  "extension": ".jpeg",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 127,
                  "cropWidth": 365,
                  "createdAt": "2020-07-17T11:32:21.018Z",
                  "updatedAt": "2020-07-17T11:32:21.018Z"
                }
              ],
              "createdAt": "2020-07-17T11:32:05.692Z",
              "updatedAt": "2021-05-03T10:31:57.015Z",
              "__v": 1,
              "introduction": "In this assignment, you'll answer a few questions about the following class hierarchy (where `Shape` is an abstract class).\n\n```image\nlabel: shapes\nsize: 50%\n```\n\nThe `Shape` class is a very basic abstract class that looks like this:\n```python\nclass Shape(ABC):\n\t@abstractmethod\n    def draw(self, canvas: Canvas):\n    \tpass\n```\nAnd here is an example of a `Shape` subclass, `Rectangle`:\n```python\nclass Rectangle(Shape):\n    def __init__(self, x: int, y: int, width: int, height: int):\n\t\tself.x = x\n\t\tself.y = y\n\t\tself.width = width\n\t\tself.height = height\n    \n\tdef draw(self, canvas: Canvas):\n\t\t# drawing code here\n```\nFinally, there is a `Parser` class that reads shapes from a file and returns a list of shapes. A `ShapeDisplay` class is responsible for drawing shapes and showing other information about them.",
              "publicKey": "jdatut0isme1p25amrsg"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "60420b8fa2a9373ebf3d2974",
              "searchString": "UML Quiz uml quiz umlquiz",
              "moduleId": "60420b8fa2a9377e383d296b",
              "index": 6,
              "title": "UML Quiz",
              "isOptional": false,
              "difficulty": 4,
              "files": [
                {
                  "_id": "60420b8fa2a9371f903d29df",
                  "label": "activity_diagram",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 904,
                  "cropWidth": 1000,
                  "createdAt": "2020-08-28T09:32:27.412Z",
                  "updatedAt": "2020-08-28T09:32:27.412Z"
                },
                {
                  "_id": "60420b8fa2a93700323d29e0",
                  "label": "activity_diagram_2",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 393,
                  "cropWidth": 1000,
                  "createdAt": "2020-08-28T09:39:18.067Z",
                  "updatedAt": "2020-08-28T09:39:18.067Z"
                },
                {
                  "_id": "60420b8fa2a937dd6e3d29e1",
                  "label": "square_class_diagram",
                  "mimetype": "image/jpeg",
                  "extension": ".jpeg",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 267,
                  "cropWidth": 510,
                  "createdAt": "2020-08-28T09:41:39.043Z",
                  "updatedAt": "2020-08-28T09:41:39.043Z"
                },
                {
                  "_id": "60420b8fa2a937e9e93d29e2",
                  "label": "vehicles",
                  "mimetype": "image/jpeg",
                  "extension": ".jpeg",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 277,
                  "cropWidth": 851,
                  "createdAt": "2020-08-28T09:45:11.249Z",
                  "updatedAt": "2020-08-28T09:45:11.249Z"
                },
                {
                  "_id": "60420b8fa2a93783443d29e3",
                  "label": "airport",
                  "mimetype": "image/jpeg",
                  "extension": ".jpeg",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 291,
                  "cropWidth": 621,
                  "createdAt": "2020-08-28T09:46:50.226Z",
                  "updatedAt": "2020-08-28T09:46:50.226Z"
                },
                {
                  "_id": "60420b8fa2a93784173d29e4",
                  "label": "macbook",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 365,
                  "cropWidth": 1000,
                  "createdAt": "2020-08-28T09:49:50.038Z",
                  "updatedAt": "2020-08-28T09:49:50.038Z"
                }
              ],
              "createdAt": "2020-08-28T09:30:15.803Z",
              "updatedAt": "2021-05-03T10:31:57.041Z",
              "__v": 1,
              "publicKey": "5ee21h4w3e6vjegvqeaj"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "60420b8fa2a9372ad43d297d",
              "searchString": "Shape Adapter shape adapter shapeadapter",
              "moduleId": "60420b8fa2a93728a23d296a",
              "index": 3,
              "title": "Shape Adapter",
              "isOptional": false,
              "difficulty": 3,
              "files": [],
              "createdAt": "2020-08-28T11:50:20.320Z",
              "updatedAt": "2021-05-03T10:31:56.780Z",
              "__v": 1,
              "introduction": "",
              "publicKey": "hz5p3sykdc840g887fon"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "60420b8fa2a93752a53d297b",
              "searchString": "Videolecture: Adapter videolecture: adapter videolecture adapter videolectureadapter",
              "moduleId": "60420b8fa2a93728a23d296a",
              "index": 1,
              "title": "Videolecture: Adapter",
              "isOptional": false,
              "difficulty": 3,
              "files": [
                {
                  "_id": "60420b8fa2a93713bb3d29ab",
                  "label": "adapter",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 782,
                  "cropWidth": 802,
                  "createdAt": "2020-08-28T10:23:46.529Z",
                  "updatedAt": "2020-08-28T10:23:46.529Z"
                },
                {
                  "_id": "60420b8fa2a93735143d29ac",
                  "label": "slides",
                  "mimetype": "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                  "extension": ".pptx",
                  "createdAt": "2020-09-09T07:11:25.446Z",
                  "updatedAt": "2020-09-09T07:11:25.446Z"
                }
              ],
              "createdAt": "2020-08-26T15:11:16.670Z",
              "updatedAt": "2021-05-03T10:31:56.790Z",
              "__v": 1,
              "introduction": "",
              "publicKey": "xla8cvj6dpzoqd36abk7"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "60420b8fa2a9371adf3d297a",
              "searchString": "Videolecture: Facade videolecture: facade videolecture facade videolecturefacade",
              "moduleId": "60420b8fa2a93728a23d296a",
              "index": 0,
              "title": "Videolecture: Facade",
              "isOptional": false,
              "difficulty": 2,
              "files": [
                {
                  "_id": "60420b8fa2a937bff33d29af",
                  "label": "Facade",
                  "mimetype": "image/png",
                  "extension": ".png",
                  "cropX": 0,
                  "cropY": 0,
                  "cropHeight": 662,
                  "cropWidth": 1222,
                  "createdAt": "2020-08-28T08:54:27.821Z",
                  "updatedAt": "2020-08-28T08:54:27.821Z"
                },
                {
                  "_id": "60420b8fa2a937dc7a3d29b0",
                  "label": "slides",
                  "mimetype": "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                  "extension": ".pptx",
                  "createdAt": "2020-09-09T07:10:57.644Z",
                  "updatedAt": "2020-09-09T07:10:57.644Z"
                }
              ],
              "createdAt": "2020-08-26T15:10:59.951Z",
              "updatedAt": "2021-05-03T10:31:56.798Z",
              "__v": 1,
              "publicKey": "bs9u4iqonapo28z58ep3"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "60420b8fa2a9377e373d297c",
              "searchString": "Videolecture: Upfront design videolecture: upfront design videolecture upfront design videolectureupfrontdesign",
              "moduleId": "60420b8fa2a93728a23d296a",
              "index": 2,
              "title": "Videolecture: Upfront design",
              "isOptional": false,
              "difficulty": 3,
              "files": [
                {
                  "_id": "60420b8fa2a937781c3d29b8",
                  "label": "slides",
                  "mimetype": "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                  "extension": ".pptx",
                  "createdAt": "2020-09-09T07:11:51.506Z",
                  "updatedAt": "2020-09-09T07:11:51.506Z"
                }
              ],
              "createdAt": "2020-08-26T15:11:29.434Z",
              "updatedAt": "2021-05-03T10:31:56.853Z",
              "__v": 1,
              "publicKey": "yvh20nf70mdk0tp4ao8m"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "60420b8fa2a93778753d2987",
              "searchString": "Sales order factory sales order factory salesorderfactory",
              "moduleId": "60420b8fa2a937953c3d296c",
              "index": 5,
              "title": "Sales order factory",
              "isOptional": false,
              "difficulty": 4,
              "files": [],
              "createdAt": "2020-09-14T10:18:09.276Z",
              "updatedAt": "2021-05-03T10:31:56.735Z",
              "__v": 1,
              "introduction": "In the examples of the slides, we talked about the `SalesOrder` class, and how we can use the strategy and factory patterns to improve the design. If you haven't read the related chapters in Shalloway & Trott, or viewed the video lectures on the strategy and factory patterns, do that before you start this assignment.\n\nIn all the questions, you can assume that there is a `SalesOrder` class that uses three strategies: dealing with taxes, currencies, and language. This is what the interfaces for those strategies look like:\n\n```python\n# strategy for computing taxes\nclass Tax(ABC):\n\t@abstractmethod\n\tdef calculate(amount: float) -> float:\n\t\tpass\n\n# strategy for converting currencies\nclass Currency(ABC):\n\t@abstractmethod\n\tdef calculate(amount: float) -> float:\n\t\tpass\n\t\t\n# strategy for printing invoice header\nclass Language(ABC):\n\t@abstractmethod\n\tdef print_invoice_header():\n\t\tpass\n\t\t\n# concrete strategies for taxes\nclass IrelandTax(Tax):\nclass NetherlandsTax(Tax):\n...\n\n# concrete strategies for converting currencies:\nclass Euro(Currency):\nclass Pound(Currency):\nclass Dollar(Currency):\n...\n\n# concrete strategies for printing invoices:\nclass Dutch(Language):\nclass English(Language):\n...\n```",
              "publicKey": "brb87zsgud5c31x1o0zv"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "60420b8fa2a9374d123d2984",
              "searchString": "Videolecture: Abstract Factory videolecture: abstract factory videolecture abstract factory videolectureabstractfactory",
              "moduleId": "60420b8fa2a937953c3d296c",
              "index": 1,
              "title": "Videolecture: Abstract Factory",
              "isOptional": false,
              "difficulty": 4,
              "files": [
                {
                  "_id": "60420b8fa2a93775293d29a7",
                  "label": "slides",
                  "mimetype": "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                  "extension": ".pptx",
                  "createdAt": "2020-09-14T10:09:41.293Z",
                  "updatedAt": "2020-09-14T10:09:41.293Z"
                }
              ],
              "createdAt": "2020-08-26T15:15:07.343Z",
              "updatedAt": "2021-05-03T10:31:56.835Z",
              "__v": 1,
              "publicKey": "n6l4tpq4mah9puurm3ql"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "60420b8fa2a93758063d2982",
              "searchString": "Videolecture: Strategy videolecture: strategy videolecture strategy videolecturestrategy",
              "moduleId": "60420b8fa2a937953c3d296c",
              "index": 0,
              "title": "Videolecture: Strategy",
              "isOptional": false,
              "difficulty": 3,
              "files": [
                {
                  "_id": "60420b8fa2a93770fc3d29a9",
                  "label": "slides",
                  "mimetype": "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                  "extension": ".pptx",
                  "createdAt": "2020-09-11T07:26:41.347Z",
                  "updatedAt": "2020-09-11T07:26:41.347Z"
                }
              ],
              "createdAt": "2020-08-26T15:14:43.902Z",
              "updatedAt": "2021-05-03T10:31:56.843Z",
              "__v": 1,
              "publicKey": "mipfek98azqd0cqer8hv"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "60420b8fa2a93736693d2986",
              "searchString": "Motorized vehicles motorized vehicles motorizedvehicles",
              "moduleId": "60420b8fa2a937953c3d296c",
              "index": 4,
              "title": "Motorized vehicles",
              "isOptional": false,
              "difficulty": 4,
              "files": [],
              "createdAt": "2020-09-14T07:52:06.297Z",
              "updatedAt": "2021-05-03T10:31:56.906Z",
              "__v": 1,
              "introduction": "Consider the following classes:\n\n```python\nclass Vehicle(ABC):\n\t...\n\t\nclass MotorizedVehicle(Vehicle):\n\t...\n\t\nclass Car(MotorizedVehicle):\n\t...\n\nclass Motorbike(MotorizedVehicle):\n\t...\n\t\nclass Bike(Vehicle):\n\t...\n```",
              "publicKey": "r9mt9mqqi4d9bldbsxd4"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "60420b8fa2a937c87f3d2988",
              "searchString": "Patterns Quiz patterns quiz patternsquiz",
              "moduleId": "60420b8fa2a937953c3d296c",
              "index": 6,
              "title": "Patterns Quiz",
              "isOptional": false,
              "difficulty": 3,
              "files": [],
              "createdAt": "2020-09-21T15:03:05.205Z",
              "updatedAt": "2021-05-03T10:31:56.934Z",
              "__v": 1,
              "publicKey": "st3gacfkpasi86tfts4d"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "60420b8fa2a93707203d2983",
              "searchString": "Videolecture: Bridge videolecture: bridge videolecture bridge videolecturebridge",
              "moduleId": "60420b8fa2a937953c3d296c",
              "index": 2,
              "title": "Videolecture: Bridge",
              "isOptional": false,
              "difficulty": 4,
              "files": [
                {
                  "_id": "60420b8fa2a9371a793d29cd",
                  "label": "slides",
                  "mimetype": "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                  "extension": ".pptx",
                  "createdAt": "2020-09-11T15:32:33.420Z",
                  "updatedAt": "2020-09-11T15:32:33.420Z"
                }
              ],
              "createdAt": "2020-08-26T15:14:56.016Z",
              "updatedAt": "2021-05-03T10:31:56.952Z",
              "__v": 1,
              "publicKey": "kiuioobtnl2rxec4l8tr"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "60420b8fa2a9372f293d2985",
              "searchString": "Sales order strategy sales order strategy salesorderstrategy",
              "moduleId": "60420b8fa2a937953c3d296c",
              "index": 3,
              "title": "Sales order strategy",
              "isOptional": false,
              "difficulty": 4,
              "files": [],
              "createdAt": "2020-09-10T11:25:46.569Z",
              "updatedAt": "2021-05-03T10:31:56.970Z",
              "__v": 1,
              "introduction": "The slides about the Strategy pattern have an example that uses the strategy for tax rate calculation, currency and language. This is the piece of code that uses these various strategies to process an order:\n```python\ntax = my_tax.calculate(total_amount)\n...\namount_in_local_currency = my_curr.calculate(amount)\n...\nmy_language.print_invoice_header()\n```\nIn this assignment, we'll further fill in this example in steps, by writing the actual code for the currency conversion strategy.",
              "publicKey": "hzju1qlloprj34i7kldl"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "60420b8fa2a9373fb83d298b",
              "searchString": "Unit tests unit tests unittests",
              "moduleId": "60420b8fa2a93740c03d2976",
              "index": 2,
              "title": "Unit tests",
              "isOptional": false,
              "difficulty": 4,
              "files": [],
              "createdAt": "2020-09-28T08:25:00.198Z",
              "updatedAt": "2021-05-03T10:31:56.888Z",
              "__v": 1,
              "introduction": "Consider the following program:\n\n```python\nclass VehicleInfo:\n    brand: str\n    electric: bool\n    catalogue_price: int\n\n    def __init__(self, brand, electric, catalogue_price):\n        self.brand = brand\n        self.electric = electric\n        self.catalogue_price = catalogue_price\n\n    def compute_tax(self):\n        if self.catalogue_price < 0:\n            raise ValueError(\"Catalogue price should be >= 0.\")\n        tax_percentage = 0.05\n        if self.electric:\n            tax_percentage = 0.02\n        return tax_percentage * self.catalogue_price\n```\nIn this assignment, we'll fill in the unit tests for the `compute_tax` method of `VehicleInfo` in a few steps.",
              "publicKey": "tepiiifxmbrfpiih7m11"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "60420b8fa2a9376eb13d298a",
              "searchString": "Videolecture: Testing videolecture: testing videolecture testing videolecturetesting",
              "moduleId": "60420b8fa2a93740c03d2976",
              "index": 1,
              "title": "Videolecture: Testing",
              "isOptional": false,
              "difficulty": 3,
              "files": [
                {
                  "_id": "60420b8fa2a93704a63d29c5",
                  "label": "slides",
                  "mimetype": "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                  "extension": ".pptx",
                  "createdAt": "2020-09-17T15:31:29.659Z",
                  "updatedAt": "2020-09-17T15:31:29.659Z"
                }
              ],
              "createdAt": "2020-08-26T15:16:19.017Z",
              "updatedAt": "2021-05-03T10:31:56.925Z",
              "__v": 1,
              "publicKey": "dyl12xtgzpqwgrkdipfw"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "60420b8fa2a937f3613d2989",
              "searchString": "Videolecture: Refactoring videolecture: refactoring videolecture refactoring videolecturerefactoring",
              "moduleId": "60420b8fa2a93740c03d2976",
              "index": 0,
              "title": "Videolecture: Refactoring",
              "isOptional": false,
              "difficulty": 3,
              "files": [
                {
                  "_id": "60420b8fa2a93741473d29d9",
                  "label": "slides",
                  "mimetype": "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                  "extension": ".pptx",
                  "createdAt": "2020-09-17T11:04:29.630Z",
                  "updatedAt": "2020-09-17T11:04:29.630Z"
                }
              ],
              "createdAt": "2020-08-26T15:16:07.855Z",
              "updatedAt": "2021-05-03T10:31:57.050Z",
              "__v": 1,
              "introduction": "",
              "forceBlockOrder": true,
              "publicKey": "ozal4s2dmuik9edcmcpd"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "60420b8fa2a93777b93d298c",
              "searchString": "Videolecture: MVC - Observer videolecture: mvc - observer videolecture mvc observer videolecturemvcobserver",
              "moduleId": "60420b8fa2a937a6b43d2977",
              "index": 0,
              "title": "Videolecture: MVC - Observer",
              "isOptional": false,
              "difficulty": 3,
              "files": [
                {
                  "_id": "60420b8fa2a937645d3d2997",
                  "label": "slides",
                  "mimetype": "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                  "extension": ".pptx",
                  "createdAt": "2020-09-24T13:52:13.714Z",
                  "updatedAt": "2020-09-24T13:52:13.714Z"
                }
              ],
              "createdAt": "2020-08-26T15:17:35.893Z",
              "updatedAt": "2021-05-03T10:31:56.753Z",
              "__v": 1,
              "publicKey": "orlipj5yefd2epewaa6a"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "60420b8fa2a937e4873d298f",
              "searchString": "Poor Mario! poor mario! poor mario poormario",
              "moduleId": "60420b8fa2a937a6b43d2977",
              "index": 3,
              "title": "Poor Mario!",
              "isOptional": false,
              "difficulty": 4,
              "files": [
                {
                  "_id": "60420b8fa2a937086b3d29b6",
                  "label": "slides",
                  "mimetype": "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                  "extension": ".pptx",
                  "createdAt": "2020-09-24T13:52:13.714Z",
                  "updatedAt": "2020-09-24T13:52:13.714Z"
                }
              ],
              "createdAt": "2020-08-26T15:17:35.893Z",
              "updatedAt": "2021-05-03T10:31:56.808Z",
              "__v": 1,
              "introduction": "In this assignment, we're going to look at a computer game use-case and see how we can apply the Observer pattern. The idea is that we have characters in our game that can die, and we want to inform other parts of our game application when this happens, so that high scores can be updated, we can restart a level, assign bonus points, and so on.\n\nThis is the code we're going to look at, a class that represents the Mario character in the game:\n```python\nclass Mario:\n\talive = True\n\tobservers: List[GameCharacterObserver] = []\n\t...\n\t# this is called when the character dies\n\tdef die(self):\n\t\tself.alive = False\n\t\t# to do: notify the observers\n```\nMario has a `die` method that changes the `alive` flag of the character to `False` (just like in real life!). Also, a list of observers is attached to Mario that need to be informed if the character passes away.",
              "publicKey": "phr4qpg1iix4ligbhq7z"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "60420b8fa2a9375a7d3d298d",
              "searchString": "Videolecture: Creation I videolecture: creation i videolecture creation i videolecturecreationi",
              "moduleId": "60420b8fa2a937a6b43d2977",
              "index": 1,
              "title": "Videolecture: Creation I",
              "isOptional": false,
              "difficulty": 4,
              "files": [
                {
                  "_id": "60420b8fa2a937e1b13d29a5",
                  "label": "slides",
                  "mimetype": "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                  "extension": ".pptx",
                  "createdAt": "2020-09-25T10:56:18.947Z",
                  "updatedAt": "2020-09-25T10:56:18.947Z"
                }
              ],
              "createdAt": "2020-08-26T15:17:50.888Z",
              "updatedAt": "2021-05-03T10:31:56.817Z",
              "__v": 1,
              "publicKey": "xml6j8wjfaw6227o9glk"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "60420b8fa2a9377bc33d298e",
              "searchString": "Videolecture: Creation II videolecture: creation ii videolecture creation ii videolecturecreationii",
              "moduleId": "60420b8fa2a937a6b43d2977",
              "index": 2,
              "title": "Videolecture: Creation II",
              "isOptional": false,
              "difficulty": 4,
              "files": [
                {
                  "_id": "60420b8fa2a93756083d29c1",
                  "label": "slides",
                  "mimetype": "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                  "extension": ".pptx",
                  "createdAt": "2020-09-25T15:21:14.667Z",
                  "updatedAt": "2020-09-25T15:21:14.667Z"
                }
              ],
              "createdAt": "2020-08-26T15:18:00.882Z",
              "updatedAt": "2021-05-03T10:31:56.898Z",
              "__v": 1,
              "publicKey": "9ig0i4kzroiyh3mh8jm0"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "60420b8fa2a93743153d2991",
              "searchString": "Videolecture: CVA - Analysis Matrix videolecture: cva - analysis matrix videolecture cva analysis matrix videolecturecvaanalysismatrix",
              "moduleId": "60420b8fa2a937085d3d2978",
              "index": 1,
              "title": "Videolecture: CVA - Analysis Matrix",
              "isOptional": false,
              "difficulty": 3,
              "files": [
                {
                  "_id": "60420b8fa2a9370d333d29c3",
                  "label": "slides",
                  "mimetype": "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                  "extension": ".pptx",
                  "createdAt": "2020-09-21T14:40:36.091Z",
                  "updatedAt": "2020-09-21T14:40:36.091Z"
                }
              ],
              "createdAt": "2020-08-26T15:16:57.307Z",
              "updatedAt": "2021-05-03T10:31:56.915Z",
              "__v": 1,
              "publicKey": "skdi2drzwxdoso1r3ika"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "60420b8fa2a9374de13d2990",
              "searchString": "Videolecture: OO Principles videolecture: oo principles videolecture oo principles videolectureooprinciples",
              "moduleId": "60420b8fa2a937085d3d2978",
              "index": 0,
              "title": "Videolecture: OO Principles",
              "isOptional": false,
              "difficulty": 3,
              "files": [
                {
                  "_id": "60420b8fa2a93775053d29cb",
                  "label": "slides",
                  "mimetype": "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                  "extension": ".pptx",
                  "createdAt": "2020-09-21T11:49:22.725Z",
                  "updatedAt": "2020-09-21T11:49:22.725Z"
                }
              ],
              "createdAt": "2020-08-26T15:16:40.612Z",
              "updatedAt": "2021-05-03T10:31:56.960Z",
              "__v": 1,
              "publicKey": "k07yi657tvwnksjap6ev"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "60420b8fa2a93707cb3d2992",
              "searchString": "Videolecture: Decorator videolecture: decorator videolecture decorator videolecturedecorator",
              "moduleId": "60420b8fa2a937085d3d2978",
              "index": 2,
              "title": "Videolecture: Decorator",
              "isOptional": false,
              "difficulty": 4,
              "files": [
                {
                  "_id": "60420b8fa2a9373c8c3d29db",
                  "label": "slides",
                  "mimetype": "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                  "extension": ".pptx",
                  "createdAt": "2020-09-24T10:50:21.372Z",
                  "updatedAt": "2020-09-24T10:50:21.372Z"
                }
              ],
              "createdAt": "2020-08-26T15:17:13.446Z",
              "updatedAt": "2021-05-03T10:31:57.023Z",
              "__v": 1,
              "publicKey": "of1y5im5dk11gf3izhes"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "60420b8fa2a93750bd3d297f",
              "searchString": "Hoare, Hoare! hoare, hoare! hoare hoare hoarehoare",
              "moduleId": "60420b8fa2a93759883d2979",
              "index": 1,
              "title": "Hoare, Hoare!",
              "isOptional": false,
              "difficulty": 4,
              "files": [],
              "createdAt": "2020-08-28T15:33:02.658Z",
              "updatedAt": "2021-05-03T10:31:56.880Z",
              "__v": 1,
              "publicKey": "q18f4nxszmsqfrxttkt6"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "60420b8fa2a93759683d2980",
              "searchString": "Contracts contracts",
              "moduleId": "60420b8fa2a93759883d2979",
              "index": 2,
              "title": "Contracts",
              "isOptional": false,
              "difficulty": 3,
              "files": [],
              "createdAt": "2020-08-28T15:40:35.340Z",
              "updatedAt": "2021-05-03T10:31:56.978Z",
              "__v": 1,
              "publicKey": "jb1clz0y0zwdb1n7dtnu"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "60420b8fa2a9379d533d297e",
              "searchString": "Videolecture: Design by Contract videolecture: design by contract videolecture design by contract videolecturedesignbycontract",
              "moduleId": "60420b8fa2a93759883d2979",
              "index": 0,
              "title": "Videolecture: Design by Contract",
              "isOptional": false,
              "difficulty": 4,
              "files": [
                {
                  "_id": "60420b8fa2a93714e43d29d1",
                  "label": "slides",
                  "mimetype": "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                  "extension": ".pptx",
                  "createdAt": "2020-10-12T09:52:57.123Z",
                  "updatedAt": "2020-10-12T09:52:57.123Z"
                }
              ],
              "createdAt": "2020-08-26T15:15:40.844Z",
              "updatedAt": "2021-05-03T10:31:57.005Z",
              "__v": 1,
              "publicKey": "fuvjd4voz0b5mtqihxnu"
            }
          ]
        },
        {
          "assignments": [
            {
              "visible": true,
              "keywords": [],
              "_id": "60420b8fa2a9374d7d3d2994",
              "searchString": "Videolecture: Classes videolecture: classes videolecture classes videolectureclasses",
              "moduleId": "60420b8fa2a937610e3d2981",
              "index": 0,
              "title": "Videolecture: Classes",
              "isOptional": false,
              "difficulty": 3,
              "files": [
                {
                  "_id": "60420b8fa2a93738153d29bc",
                  "label": "slides",
                  "mimetype": "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                  "extension": ".pptx",
                  "createdAt": "2020-09-04T14:47:17.772Z",
                  "updatedAt": "2020-09-04T14:47:17.772Z"
                }
              ],
              "createdAt": "2020-07-17T10:48:29.234Z",
              "updatedAt": "2021-05-03T10:31:56.870Z",
              "__v": 1,
              "introduction": "",
              "publicKey": "z9wf03wy85w6gf71nleb"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "60420b8fa2a937f75f3d2993",
              "searchString": "Assignment submission system assignment submission system assignmentsubmissionsystem",
              "moduleId": "60420b8fa2a937610e3d2981",
              "index": 3,
              "title": "Assignment submission system",
              "isOptional": false,
              "difficulty": 3,
              "files": [],
              "createdAt": "2020-06-29T15:19:27.606Z",
              "updatedAt": "2021-05-03T10:31:56.943Z",
              "__v": 1,
              "introduction": "In this assignment, your goal is to write (part of the) requirements for a new online system to be used by the university, to collect submissions for lab assignments from students (so you're going to do a meta-assignment, yay!).\n\nLecturers can define assigments; students can submit their solution; student assistants can download these solutions and grade them. Once all assignments have been graded, these grades need to be communicated to the students. In a single period many different courses will use the assignment submission system; each course may have different assignments with different deadlines.\n\nYou should consult Chapter 6 of Craig Larman’s Applying UML and Patterns, for guidelines and examples of use cases at various levels of detail.",
              "publicKey": "pp5rfk40256c7td4ivmi"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "60420b8fa2a937c9293d2996",
              "searchString": "Videolecture: Agile videolecture: agile videolecture agile videolectureagile",
              "moduleId": "60420b8fa2a937610e3d2981",
              "index": 2,
              "title": "Videolecture: Agile",
              "isOptional": false,
              "difficulty": 2,
              "files": [
                {
                  "_id": "60420b8fa2a9370b9d3d29dd",
                  "label": "slides",
                  "mimetype": "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                  "extension": ".pptx",
                  "createdAt": "2020-09-04T14:50:37.058Z",
                  "updatedAt": "2020-09-04T14:50:37.058Z"
                }
              ],
              "createdAt": "2020-08-26T12:33:14.674Z",
              "updatedAt": "2021-05-03T10:31:57.032Z",
              "__v": 1,
              "publicKey": "9v4g6wnbud9dvw6k9k19"
            },
            {
              "visible": true,
              "keywords": [],
              "_id": "60420b8fa2a9373c843d2995",
              "searchString": "Videolecture: Waterfall & RUP videolecture: waterfall & rup videolecture waterfall rup videolecturewaterfallrup videolecture: waterfall rup videolecture: waterfall en rup videolecture: waterfall and rup",
              "moduleId": "60420b8fa2a937610e3d2981",
              "index": 1,
              "title": "Videolecture: Waterfall & RUP",
              "isOptional": false,
              "difficulty": 3,
              "files": [
                {
                  "_id": "60420b8fa2a937004e3d29eb",
                  "label": "slides",
                  "mimetype": "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                  "extension": ".pptx",
                  "createdAt": "2020-09-04T14:50:08.321Z",
                  "updatedAt": "2020-09-04T14:50:08.321Z"
                }
              ],
              "createdAt": "2020-08-26T08:24:55.592Z",
              "updatedAt": "2021-05-03T10:31:57.059Z",
              "__v": 1,
              "publicKey": "6e07qnoqew08xr6d18qr"
            }
          ]
        }
      ],
      "analyticsBlocks": [
        "60420b8fa2a937b47d3d295f",
        "60420b8fa2a93752743d2960",
        "60420b8fa2a937c7053d2961",
        "60420b8fa2a937512f3d2962",
        "60420b8fa2a93715a63d2963",
        "60420b8fa2a9378a913d2964",
        "60420b8fa2a937a4c53d2965",
        "60420b8fa2a93719d93d2966",
        "60420b8fa2a93707c23d2967",
        "60420b8fa2a9371bdf3d2968",
        "60420b8fa2a93735913d2969"
      ],
      "archived": false,
      "demo": false,
      "visible": true,
      "_id": "60420b8fa2a937d0333d295e",
      "organizationId": "5d78b2c29c536b0012658aec",
      "title": "Systeemontwikkelingsmethoden",
      "code": "INFOB2SOM-2020",
      "createdAt": "2020-06-29T14:44:24.331Z",
      "updatedAt": "2021-03-05T10:44:32.224Z",
      "__v": 0,
      "selectedImage": "electronics"
    }
  ]
